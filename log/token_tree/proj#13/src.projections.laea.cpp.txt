7 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

7 :	"laea"
		- NEIGH  = { laea , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

10 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

11 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

19 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

20 :	"sinb1"
		- NEIGH  = { sinb1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

21 :	"cosb1"
		- NEIGH  = { cosb1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

22 :	"xmf"
		- NEIGH  = { xmf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"ymf"
		- NEIGH  = { ymf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

24 :	"mmf"
		- NEIGH  = { mmf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

25 :	"qp"
		- NEIGH  = { qp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"dd"
		- NEIGH  = { dd , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

27 :	"rq"
		- NEIGH  = { rq , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"apa"
		- NEIGH  = { apa , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"e_forward"
		- NEIGH  = { e_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

36 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

37 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

37 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }

38 :	"coslam"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

38 :	"sinlam"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

38 :	"sinphi"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

38 :	"q"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

38 :	"sinb"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

38 :	"cosb"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

38 :	"b"
		- NEIGH  = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

40 :	"coslam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

40 :	"cos"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

40 :	"lp"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

40 :	"lam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosb , q , sinphi , b , sinb , sinlam , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

41 :	"sinlam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

41 :	"sin"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

41 :	"lp"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

41 :	"lam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

42 :	"sinphi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { one_es , q , sinphi , P , pj_qsfn , e , }

42 :	"sin"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { one_es , q , sinphi , P , pj_qsfn , e , }

42 :	"lp"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { one_es , q , sinphi , P , pj_qsfn , e , }

42 :	"phi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { one_es , q , sinphi , P , pj_qsfn , e , }

43 :	"q"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

43 :	"pj_qsfn"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

43 :	"sinphi"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

43 :	"P"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

43 :	"e"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

43 :	"P"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

43 :	"one_es"
		- NEIGH  = { one_es , q , sinphi , P , pj_qsfn , e , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

45 :	"if"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"Q"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"mode"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"=="
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"OBLIQ"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"||"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"Q"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"mode"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"=="
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

45 :	"EQUIT"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { * , - , cosb , qp , sqrt , Q , / , q , sinb , }
		- PRED   = { one_es , q , sinphi , P , pj_qsfn , e , }
		- SUCC   = { mode , Q , switch , }

46 :	"sinb"
		- NEIGH  = { qp , Q , / , q , sinb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb , - , * , sqrt , cosb , }

46 :	"q"
		- NEIGH  = { qp , Q , / , q , sinb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb , - , * , sqrt , cosb , }

46 :	"/"
		- NEIGH  = { qp , Q , / , q , sinb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb , - , * , sqrt , cosb , }

46 :	"Q"
		- NEIGH  = { qp , Q , / , q , sinb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb , - , * , sqrt , cosb , }

46 :	"qp"
		- NEIGH  = { qp , Q , / , q , sinb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb , - , * , sqrt , cosb , }

47 :	"cosb"
		- NEIGH  = { sinb , - , * , sqrt , cosb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { qp , Q , / , q , sinb , }
		- SUCC   = { }

47 :	"sqrt"
		- NEIGH  = { sinb , - , * , sqrt , cosb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { qp , Q , / , q , sinb , }
		- SUCC   = { }

47 :	"-"
		- NEIGH  = { sinb , - , * , sqrt , cosb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { qp , Q , / , q , sinb , }
		- SUCC   = { }

47 :	"sinb"
		- NEIGH  = { sinb , - , * , sqrt , cosb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { qp , Q , / , q , sinb , }
		- SUCC   = { }

47 :	"*"
		- NEIGH  = { sinb , - , * , sqrt , cosb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { qp , Q , / , q , sinb , }
		- SUCC   = { }

47 :	"sinb"
		- NEIGH  = { sinb , - , * , sqrt , cosb , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { qp , Q , / , q , sinb , }
		- SUCC   = { }

50 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { S_POLE , phi , lp , N_POLE , EQUIT , Q , coslam , cosb1 , * , break , M_HALFPI , cosb , - , sinb1 , qp , sinb , b , q , + , OBLIQ , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { < , fabs , b , if , }

50 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { S_POLE , phi , lp , N_POLE , EQUIT , Q , coslam , cosb1 , * , break , M_HALFPI , cosb , - , sinb1 , qp , sinb , b , q , + , OBLIQ , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { < , fabs , b , if , }

50 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { S_POLE , phi , lp , N_POLE , EQUIT , Q , coslam , cosb1 , * , break , M_HALFPI , cosb , - , sinb1 , qp , sinb , b , q , + , OBLIQ , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { < , fabs , b , if , }

51 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }

52 :	"b"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"+"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"Q"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"sinb1"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"*"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"sinb"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"+"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"Q"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"cosb1"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"*"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"cosb"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"*"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

52 :	"coslam"
		- NEIGH  = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { break , }

53 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosb1 , * , cosb , sinb1 , Q , + , sinb , b , }
		- SUCC   = { EQUIT , }

54 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { * , cosb , coslam , + , b , }

55 :	"b"
		- NEIGH  = { * , cosb , coslam , + , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

55 :	"+"
		- NEIGH  = { * , cosb , coslam , + , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

55 :	"cosb"
		- NEIGH  = { * , cosb , coslam , + , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

55 :	"*"
		- NEIGH  = { * , cosb , coslam , + , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

55 :	"coslam"
		- NEIGH  = { * , cosb , coslam , + , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

56 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , cosb , coslam , + , b , }
		- SUCC   = { N_POLE , }

57 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { phi , lp , + , M_HALFPI , b , }

58 :	"b"
		- NEIGH  = { phi , lp , + , M_HALFPI , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { qp , Q , - , q , }

58 :	"M_HALFPI"
		- NEIGH  = { phi , lp , + , M_HALFPI , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { qp , Q , - , q , }

58 :	"+"
		- NEIGH  = { phi , lp , + , M_HALFPI , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { qp , Q , - , q , }

58 :	"lp"
		- NEIGH  = { phi , lp , + , M_HALFPI , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { qp , Q , - , q , }

58 :	"phi"
		- NEIGH  = { phi , lp , + , M_HALFPI , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { qp , Q , - , q , }

59 :	"q"
		- NEIGH  = { qp , Q , - , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_HALFPI , b , }
		- SUCC   = { break , }

59 :	"Q"
		- NEIGH  = { qp , Q , - , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_HALFPI , b , }
		- SUCC   = { break , }

59 :	"qp"
		- NEIGH  = { qp , Q , - , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_HALFPI , b , }
		- SUCC   = { break , }

59 :	"-"
		- NEIGH  = { qp , Q , - , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_HALFPI , b , }
		- SUCC   = { break , }

59 :	"q"
		- NEIGH  = { qp , Q , - , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_HALFPI , b , }
		- SUCC   = { break , }

60 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { qp , Q , - , q , }
		- SUCC   = { S_POLE , }

61 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { M_HALFPI , - , phi , lp , b , }

62 :	"b"
		- NEIGH  = { M_HALFPI , - , phi , lp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { qp , + , Q , q , }

62 :	"lp"
		- NEIGH  = { M_HALFPI , - , phi , lp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { qp , + , Q , q , }

62 :	"phi"
		- NEIGH  = { M_HALFPI , - , phi , lp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { qp , + , Q , q , }

62 :	"-"
		- NEIGH  = { M_HALFPI , - , phi , lp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { qp , + , Q , q , }

62 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , phi , lp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { qp , + , Q , q , }

63 :	"q"
		- NEIGH  = { qp , + , Q , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , phi , lp , b , }
		- SUCC   = { break , }

63 :	"Q"
		- NEIGH  = { qp , + , Q , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , phi , lp , b , }
		- SUCC   = { break , }

63 :	"qp"
		- NEIGH  = { qp , + , Q , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , phi , lp , b , }
		- SUCC   = { break , }

63 :	"+"
		- NEIGH  = { qp , + , Q , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , phi , lp , b , }
		- SUCC   = { break , }

63 :	"q"
		- NEIGH  = { qp , + , Q , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , phi , lp , b , }
		- SUCC   = { break , }

64 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { qp , + , Q , q , }
		- SUCC   = { }

66 :	"if"
		- NEIGH  = { < , fabs , b , if , }
		- PARENT = { }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { mode , Q , switch , }

66 :	"fabs"
		- NEIGH  = { < , fabs , b , if , }
		- PARENT = { }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { mode , Q , switch , }

66 :	"b"
		- NEIGH  = { < , fabs , b , if , }
		- PARENT = { }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { mode , Q , switch , }

66 :	"<"
		- NEIGH  = { < , fabs , b , if , }
		- PARENT = { }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { mode , Q , switch , }

67 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , fabs , b , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

67 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , fabs , b , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

67 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , fabs , b , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

68 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { < , fabs , b , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

68 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { < , fabs , b , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

71 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { >= , if , S_POLE , N_POLE , break , sinlam , xmf , sqrt , + , * , EQUIT , cosb , OBLIQ , coslam , xy , - , Q , cosb1 , sinb1 , q , y , x , sinb , eqcon , b , / , ymf , }
		- PRED   = { < , fabs , b , if , }
		- SUCC   = { xy , return , }

71 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { >= , if , S_POLE , N_POLE , break , sinlam , xmf , sqrt , + , * , EQUIT , cosb , OBLIQ , coslam , xy , - , Q , cosb1 , sinb1 , q , y , x , sinb , eqcon , b , / , ymf , }
		- PRED   = { < , fabs , b , if , }
		- SUCC   = { xy , return , }

71 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { >= , if , S_POLE , N_POLE , break , sinlam , xmf , sqrt , + , * , EQUIT , cosb , OBLIQ , coslam , xy , - , Q , cosb1 , sinb1 , q , y , x , sinb , eqcon , b , / , ymf , }
		- PRED   = { < , fabs , b , if , }
		- SUCC   = { xy , return , }

72 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { / , sqrt , b , }

73 :	"b"
		- NEIGH  = { / , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }

73 :	"sqrt"
		- NEIGH  = { / , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }

73 :	"/"
		- NEIGH  = { / , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }

73 :	"b"
		- NEIGH  = { / , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }

74 :	"xy"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"y"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"Q"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"ymf"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"*"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"b"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"*"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"Q"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"cosb1"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"*"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"sinb"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"-"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"Q"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"sinb1"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"*"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"cosb"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"*"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

74 :	"coslam"
		- NEIGH  = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , b , }
		- SUCC   = { eqcon , }

75 :	"eqcon"
		- NEIGH  = { eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb , y , sinb1 , - , coslam , Q , cosb1 , sinb , b , * , ymf , xy , }
		- SUCC   = { break , }

76 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { eqcon , }
		- SUCC   = { EQUIT , }

77 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { coslam , * , + , / , cosb , sqrt , b , }

78 :	"b"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

78 :	"sqrt"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

78 :	"/"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

78 :	"+"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

78 :	"cosb"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

78 :	"*"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

78 :	"coslam"
		- NEIGH  = { coslam , * , + , / , cosb , sqrt , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { ymf , Q , sinb , b , * , y , xy , }

79 :	"xy"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"y"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"b"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"*"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"sinb"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"*"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"Q"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

79 :	"ymf"
		- NEIGH  = { ymf , Q , sinb , b , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , * , + , / , cosb , sqrt , b , }
		- SUCC   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }

80 :	"eqcon"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"xy"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"x"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"Q"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"xmf"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"*"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"b"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"*"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"cosb"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"*"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

81 :	"sinlam"
		- NEIGH  = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ymf , Q , sinb , b , * , y , xy , }
		- SUCC   = { break , }

82 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb , * , sinlam , xmf , Q , b , x , xy , eqcon , }
		- SUCC   = { N_POLE , }

83 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { S_POLE , }

84 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { >= , q , if , }

85 :	"if"
		- NEIGH  = { >= , q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { S_POLE , == , mode , sinlam , - , y , sqrt , * , q , b , x , Q , coslam , xy , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

85 :	"q"
		- NEIGH  = { >= , q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { S_POLE , == , mode , sinlam , - , y , sqrt , * , q , b , x , Q , coslam , xy , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

85 :	">="
		- NEIGH  = { >= , q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { S_POLE , == , mode , sinlam , - , y , sqrt , * , q , b , x , Q , coslam , xy , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

86 :	"b"
		- NEIGH  = { q , sqrt , b , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinlam , b , * , x , xy , }

86 :	"sqrt"
		- NEIGH  = { q , sqrt , b , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinlam , b , * , x , xy , }

86 :	"q"
		- NEIGH  = { q , sqrt , b , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinlam , b , * , x , xy , }

87 :	"xy"
		- NEIGH  = { sinlam , b , * , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { q , sqrt , b , }
		- SUCC   = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }

87 :	"x"
		- NEIGH  = { sinlam , b , * , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { q , sqrt , b , }
		- SUCC   = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }

87 :	"b"
		- NEIGH  = { sinlam , b , * , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { q , sqrt , b , }
		- SUCC   = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }

87 :	"*"
		- NEIGH  = { sinlam , b , * , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { q , sqrt , b , }
		- SUCC   = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }

87 :	"sinlam"
		- NEIGH  = { sinlam , b , * , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { q , sqrt , b , }
		- SUCC   = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }

88 :	"xy"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"y"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"coslam"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"*"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"Q"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"mode"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"=="
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"S_POLE"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"b"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"-"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

88 :	"b"
		- NEIGH  = { - , b , S_POLE , == , mode , Q , xy , coslam , * , y , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { sinlam , b , * , x , xy , }
		- SUCC   = { }

90 :	"xy"
		- NEIGH  = { y , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"x"
		- NEIGH  = { y , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"xy"
		- NEIGH  = { y , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"y"
		- NEIGH  = { y , x , xy , }
		- PARENT = { >= , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

91 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { >= , q , if , }
		- SUCC   = { }

93 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

93 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

97 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

97 :	"s_forward"
		- NEIGH  = { s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

97 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

97 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

97 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

97 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

97 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

98 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

99 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

99 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

100 :	"coslam"
		- NEIGH  = { sinphi , cosphi , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

100 :	"cosphi"
		- NEIGH  = { sinphi , cosphi , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

100 :	"sinphi"
		- NEIGH  = { sinphi , cosphi , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

102 :	"sinphi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { phi , lp , cos , cosphi , }

102 :	"sin"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { phi , lp , cos , cosphi , }

102 :	"lp"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { phi , lp , cos , cosphi , }

102 :	"phi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { phi , lp , cos , cosphi , }

103 :	"cosphi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

103 :	"cos"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

103 :	"lp"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

103 :	"phi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

104 :	"coslam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

104 :	"cos"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

104 :	"lp"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

104 :	"lam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

105 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { cos , < , phi0 , P , fabs , S_POLE , N_POLE , break , phi , mode , <= , if , lam , lp , M_FORTPI , x , oblcon , sin , y , sinb1 , == , cosb1 , OBLIQ , coslam , - , xy , Q , sinphi , * , EQUIT , *= , / , cosphi , + , sqrt , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { xy , return , }

105 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { cos , < , phi0 , P , fabs , S_POLE , N_POLE , break , phi , mode , <= , if , lam , lp , M_FORTPI , x , oblcon , sin , y , sinb1 , == , cosb1 , OBLIQ , coslam , - , xy , Q , sinphi , * , EQUIT , *= , / , cosphi , + , sqrt , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { xy , return , }

105 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { cos , < , phi0 , P , fabs , S_POLE , N_POLE , break , phi , mode , <= , if , lam , lp , M_FORTPI , x , oblcon , sin , y , sinb1 , == , cosb1 , OBLIQ , coslam , - , xy , Q , sinphi , * , EQUIT , *= , / , cosphi , + , sqrt , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { xy , return , }

106 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cosphi , + , * , y , coslam , xy , }

107 :	"xy"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

107 :	"y"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

107 :	"+"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

107 :	"cosphi"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

107 :	"*"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

107 :	"coslam"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

108 :	"oblcon"
		- NEIGH  = { oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosphi , + , * , y , coslam , xy , }
		- SUCC   = { OBLIQ , }

109 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { oblcon , }
		- SUCC   = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }

110 :	"xy"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"y"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"+"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"Q"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"sinb1"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"*"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"sinphi"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"+"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"Q"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"cosb1"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"*"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"cosphi"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"*"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

110 :	"coslam"
		- NEIGH  = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

111 :	"oblcon"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- SUCC   = { / , sqrt , y , xy , }

112 :	"if"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- SUCC   = { / , sqrt , y , xy , }

112 :	"xy"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- SUCC   = { / , sqrt , y , xy , }

112 :	"y"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- SUCC   = { / , sqrt , y , xy , }

112 :	"<="
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { cosphi , cosb1 , sinphi , sinb1 , Q , + , * , y , coslam , xy , }
		- SUCC   = { / , sqrt , y , xy , }

113 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

113 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

113 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

114 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

114 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

116 :	"xy"
		- NEIGH  = { / , sqrt , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { lam , lp , sin , cosphi , * , y , x , xy , }

116 :	"y"
		- NEIGH  = { / , sqrt , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { lam , lp , sin , cosphi , * , y , x , xy , }

116 :	"sqrt"
		- NEIGH  = { / , sqrt , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { lam , lp , sin , cosphi , * , y , x , xy , }

116 :	"/"
		- NEIGH  = { / , sqrt , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { lam , lp , sin , cosphi , * , y , x , xy , }

116 :	"xy"
		- NEIGH  = { / , sqrt , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { lam , lp , sin , cosphi , * , y , x , xy , }

116 :	"y"
		- NEIGH  = { / , sqrt , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { lam , lp , sin , cosphi , * , y , x , xy , }

117 :	"xy"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"x"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"xy"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"y"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"*"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"cosphi"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"*"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"sin"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"lp"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

117 :	"lam"
		- NEIGH  = { lam , lp , sin , cosphi , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sqrt , y , xy , }
		- SUCC   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }

118 :	"xy"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"y"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"*="
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"Q"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"mode"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"=="
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"EQUIT"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

118 :	"sinphi"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"Q"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"cosb1"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"*"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"sinphi"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"-"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"Q"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"sinb1"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"*"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"cosphi"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"*"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

119 :	"coslam"
		- NEIGH  = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , y , x , xy , }
		- SUCC   = { break , }

120 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinb1 , y , - , coslam , Q , cosb1 , sinphi , EQUIT , == , mode , * , *= , cosphi , xy , }
		- SUCC   = { N_POLE , }

121 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , coslam , }

122 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

122 :	"-"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

122 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

124 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { < , phi0 , if , + , phi , lp , P , fabs , }

125 :	"if"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"fabs"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"lp"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"phi"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"+"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"P"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"phi0"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

125 :	"<"
		- NEIGH  = { < , phi0 , if , + , phi , lp , P , fabs , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , - , M_FORTPI , * , y , xy , }

126 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , phi0 , if , + , phi , lp , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

126 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , phi0 , if , + , phi , lp , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

126 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , phi0 , if , + , phi , lp , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

127 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { < , phi0 , if , + , phi , lp , P , fabs , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

127 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { < , phi0 , if , + , phi , lp , P , fabs , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

129 :	"xy"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

129 :	"y"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

129 :	"M_FORTPI"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

129 :	"-"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

129 :	"lp"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

129 :	"phi"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

129 :	"*"
		- NEIGH  = { phi , lp , - , M_FORTPI , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi0 , if , + , phi , lp , P , fabs , }
		- SUCC   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }

130 :	"xy"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"y"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"*"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"Q"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"mode"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"=="
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"S_POLE"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"cos"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"xy"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"y"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"sin"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"xy"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

130 :	"y"
		- NEIGH  = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_FORTPI , * , y , xy , }
		- SUCC   = { lam , lp , sin , * , y , x , xy , }

131 :	"xy"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"x"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"xy"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"y"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"*"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"sin"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"lp"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

131 :	"lam"
		- NEIGH  = { lam , lp , sin , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , sin , S_POLE , == , mode , Q , * , y , xy , }
		- SUCC   = { coslam , *= , y , xy , }

132 :	"xy"
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , * , y , x , xy , }
		- SUCC   = { break , }

132 :	"y"
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , * , y , x , xy , }
		- SUCC   = { break , }

132 :	"*="
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , * , y , x , xy , }
		- SUCC   = { break , }

132 :	"coslam"
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , * , y , x , xy , }
		- SUCC   = { break , }

133 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , *= , y , xy , }
		- SUCC   = { }

135 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

135 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

139 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

139 :	"e_inverse"
		- NEIGH  = { e_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

139 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

139 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

139 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

139 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

139 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

140 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

141 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

141 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { ab , rho , q , sCe , cCe , }

142 :	"cCe"
		- NEIGH  = { ab , rho , q , sCe , cCe , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { mode , Q , switch , }

142 :	"sCe"
		- NEIGH  = { ab , rho , q , sCe , cCe , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { mode , Q , switch , }

142 :	"q"
		- NEIGH  = { ab , rho , q , sCe , cCe , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { mode , Q , switch , }

142 :	"rho"
		- NEIGH  = { ab , rho , q , sCe , cCe , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { mode , Q , switch , }

142 :	"ab"
		- NEIGH  = { ab , rho , q , sCe , cCe , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { mode , Q , switch , }

144 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { ab , + , S_POLE , N_POLE , break , cos , == , cCe , rq , qp , asin , EQUIT , *= , * , sCe , q , y , sin , if , mode , hypot , / , < , dd , - , xy , Q , x , /= , rho , OBLIQ , }
		- PRED   = { ab , rho , q , sCe , cCe , }
		- SUCC   = { y , x , xy , lam , atan2 , lp , }

144 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { ab , + , S_POLE , N_POLE , break , cos , == , cCe , rq , qp , asin , EQUIT , *= , * , sCe , q , y , sin , if , mode , hypot , / , < , dd , - , xy , Q , x , /= , rho , OBLIQ , }
		- PRED   = { ab , rho , q , sCe , cCe , }
		- SUCC   = { y , x , xy , lam , atan2 , lp , }

144 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { ab , + , S_POLE , N_POLE , break , cos , == , cCe , rq , qp , asin , EQUIT , *= , * , sCe , q , y , sin , if , mode , hypot , / , < , dd , - , xy , Q , x , /= , rho , OBLIQ , }
		- PRED   = { ab , rho , q , sCe , cCe , }
		- SUCC   = { y , x , xy , lam , atan2 , lp , }

145 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { OBLIQ , }

146 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { dd , Q , /= , x , xy , }

147 :	"xy"
		- NEIGH  = { dd , Q , /= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { dd , Q , *= , y , xy , }

147 :	"x"
		- NEIGH  = { dd , Q , /= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { dd , Q , *= , y , xy , }

147 :	"/="
		- NEIGH  = { dd , Q , /= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { dd , Q , *= , y , xy , }

147 :	"Q"
		- NEIGH  = { dd , Q , /= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { dd , Q , *= , y , xy , }

147 :	"dd"
		- NEIGH  = { dd , Q , /= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { dd , Q , *= , y , xy , }

148 :	"xy"
		- NEIGH  = { dd , Q , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , /= , x , xy , }
		- SUCC   = { y , x , xy , hypot , rho , }

148 :	"y"
		- NEIGH  = { dd , Q , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , /= , x , xy , }
		- SUCC   = { y , x , xy , hypot , rho , }

148 :	"*="
		- NEIGH  = { dd , Q , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , /= , x , xy , }
		- SUCC   = { y , x , xy , hypot , rho , }

148 :	"Q"
		- NEIGH  = { dd , Q , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , /= , x , xy , }
		- SUCC   = { y , x , xy , hypot , rho , }

148 :	"dd"
		- NEIGH  = { dd , Q , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , /= , x , xy , }
		- SUCC   = { y , x , xy , hypot , rho , }

149 :	"rho"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , *= , y , xy , }
		- SUCC   = { < , rho , if , }

149 :	"hypot"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , *= , y , xy , }
		- SUCC   = { < , rho , if , }

149 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , *= , y , xy , }
		- SUCC   = { < , rho , if , }

149 :	"x"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , *= , y , xy , }
		- SUCC   = { < , rho , if , }

149 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , *= , y , xy , }
		- SUCC   = { < , rho , if , }

149 :	"y"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , *= , y , xy , }
		- SUCC   = { < , rho , if , }

150 :	"if"
		- NEIGH  = { < , rho , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { return , lam , P , phi0 , phi , lp , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { / , rho , asin , rq , * , Q , sCe , }

150 :	"rho"
		- NEIGH  = { < , rho , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { return , lam , P , phi0 , phi , lp , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { / , rho , asin , rq , * , Q , sCe , }

150 :	"<"
		- NEIGH  = { < , rho , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { return , lam , P , phi0 , phi , lp , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { / , rho , asin , rq , * , Q , sCe , }

151 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , P , phi , lp , }

151 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , P , phi , lp , }

152 :	"lp"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

152 :	"phi"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

152 :	"P"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

152 :	"phi0"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

153 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { phi0 , P , phi , lp , }
		- SUCC   = { }

153 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { < , rho , if , }
		- CHILD  = { }
		- PRED   = { phi0 , P , phi , lp , }
		- SUCC   = { }

155 :	"sCe"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"*"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"asin"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"*"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"rho"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"/"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"Q"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

155 :	"rq"
		- NEIGH  = { / , rho , asin , rq , * , Q , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , rho , if , }
		- SUCC   = { sCe , cos , cCe , }

156 :	"cCe"
		- NEIGH  = { sCe , cos , cCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , rho , asin , rq , * , Q , sCe , }
		- SUCC   = { sin , sCe , }

156 :	"cos"
		- NEIGH  = { sCe , cos , cCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , rho , asin , rq , * , Q , sCe , }
		- SUCC   = { sin , sCe , }

156 :	"sCe"
		- NEIGH  = { sCe , cos , cCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , rho , asin , rq , * , Q , sCe , }
		- SUCC   = { sin , sCe , }

157 :	"sCe"
		- NEIGH  = { sin , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sCe , cos , cCe , }
		- SUCC   = { sCe , *= , x , xy , }

157 :	"sin"
		- NEIGH  = { sin , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sCe , cos , cCe , }
		- SUCC   = { sCe , *= , x , xy , }

157 :	"sCe"
		- NEIGH  = { sin , sCe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sCe , cos , cCe , }
		- SUCC   = { sCe , *= , x , xy , }

158 :	"xy"
		- NEIGH  = { sCe , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , sCe , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

158 :	"x"
		- NEIGH  = { sCe , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , sCe , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

158 :	"*="
		- NEIGH  = { sCe , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , sCe , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

158 :	"sCe"
		- NEIGH  = { sCe , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , sCe , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

159 :	"if"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , Q , cosb1 , + , - , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PRED   = { sCe , *= , x , xy , }
		- SUCC   = { break , }

159 :	"Q"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , Q , cosb1 , + , - , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PRED   = { sCe , *= , x , xy , }
		- SUCC   = { break , }

159 :	"mode"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , Q , cosb1 , + , - , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PRED   = { sCe , *= , x , xy , }
		- SUCC   = { break , }

159 :	"=="
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , Q , cosb1 , + , - , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PRED   = { sCe , *= , x , xy , }
		- SUCC   = { break , }

159 :	"OBLIQ"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , Q , cosb1 , + , - , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PRED   = { sCe , *= , x , xy , }
		- SUCC   = { break , }

160 :	"ab"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"cCe"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"*"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"Q"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"sinb1"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"+"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"xy"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"y"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"*"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"sCe"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"*"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"Q"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"cosb1"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"/"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

160 :	"rho"
		- NEIGH  = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }

161 :	"xy"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"y"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"rho"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"*"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"Q"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"cosb1"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"*"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"cCe"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"-"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"xy"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"y"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"*"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"Q"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"sinb1"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"*"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

161 :	"sCe"
		- NEIGH  = { sinb1 , - , cCe , cosb1 , sCe , Q , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , Q , cosb1 , + , sinb1 , y , * , sCe , / , cCe , xy , ab , }
		- SUCC   = { }

163 :	"ab"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

163 :	"xy"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

163 :	"y"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

163 :	"*"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

163 :	"sCe"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

163 :	"/"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

163 :	"rho"
		- NEIGH  = { rho , / , sCe , * , y , xy , ab , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cCe , rho , * , y , xy , }

164 :	"xy"
		- NEIGH  = { cCe , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , / , sCe , * , y , xy , ab , }
		- SUCC   = { }

164 :	"y"
		- NEIGH  = { cCe , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , / , sCe , * , y , xy , ab , }
		- SUCC   = { }

164 :	"rho"
		- NEIGH  = { cCe , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , / , sCe , * , y , xy , ab , }
		- SUCC   = { }

164 :	"*"
		- NEIGH  = { cCe , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , / , sCe , * , y , xy , ab , }
		- SUCC   = { }

164 :	"cCe"
		- NEIGH  = { cCe , rho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { rho , / , sCe , * , y , xy , ab , }
		- SUCC   = { }

166 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { N_POLE , }

167 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , y , xy , }

168 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

168 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

168 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

168 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

168 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

170 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { + , y , * , x , xy , q , }

171 :	"q"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"xy"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"x"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"*"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"xy"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"x"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"+"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"xy"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"y"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"*"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"xy"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

171 :	"y"
		- NEIGH  = { + , y , * , x , xy , q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { == , q , if , }

172 :	"if"
		- NEIGH  = { == , q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { return , lam , P , phi0 , phi , lp , }
		- PRED   = { + , y , * , x , xy , q , }
		- SUCC   = { Q , / , q , qp , - , ab , }

172 :	"q"
		- NEIGH  = { == , q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { return , lam , P , phi0 , phi , lp , }
		- PRED   = { + , y , * , x , xy , q , }
		- SUCC   = { Q , / , q , qp , - , ab , }

172 :	"=="
		- NEIGH  = { == , q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { return , lam , P , phi0 , phi , lp , }
		- PRED   = { + , y , * , x , xy , q , }
		- SUCC   = { Q , / , q , qp , - , ab , }

173 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , P , phi , lp , }

173 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , P , phi , lp , }

174 :	"lp"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

174 :	"phi"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

174 :	"P"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

174 :	"phi0"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

175 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , P , phi , lp , }
		- SUCC   = { }

175 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { == , q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , P , phi , lp , }
		- SUCC   = { }

177 :	"ab"
		- NEIGH  = { Q , / , q , qp , - , ab , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , q , if , }
		- SUCC   = { S_POLE , == , mode , Q , if , }

177 :	"-"
		- NEIGH  = { Q , / , q , qp , - , ab , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , q , if , }
		- SUCC   = { S_POLE , == , mode , Q , if , }

177 :	"q"
		- NEIGH  = { Q , / , q , qp , - , ab , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , q , if , }
		- SUCC   = { S_POLE , == , mode , Q , if , }

177 :	"/"
		- NEIGH  = { Q , / , q , qp , - , ab , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , q , if , }
		- SUCC   = { S_POLE , == , mode , Q , if , }

177 :	"Q"
		- NEIGH  = { Q , / , q , qp , - , ab , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , q , if , }
		- SUCC   = { S_POLE , == , mode , Q , if , }

177 :	"qp"
		- NEIGH  = { Q , / , q , qp , - , ab , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , q , if , }
		- SUCC   = { S_POLE , == , mode , Q , if , }

178 :	"if"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { - , ab , }
		- PRED   = { Q , / , q , qp , - , ab , }
		- SUCC   = { break , }

178 :	"Q"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { - , ab , }
		- PRED   = { Q , / , q , qp , - , ab , }
		- SUCC   = { break , }

178 :	"mode"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { - , ab , }
		- PRED   = { Q , / , q , qp , - , ab , }
		- SUCC   = { break , }

178 :	"=="
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { - , ab , }
		- PRED   = { Q , / , q , qp , - , ab , }
		- SUCC   = { break , }

178 :	"S_POLE"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { - , ab , }
		- PRED   = { Q , / , q , qp , - , ab , }
		- SUCC   = { break , }

179 :	"ab"
		- NEIGH  = { - , ab , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"-"
		- NEIGH  = { - , ab , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"ab"
		- NEIGH  = { - , ab , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

180 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { }

182 :	"lp"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

182 :	"lam"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

182 :	"atan2"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

182 :	"xy"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

182 :	"x"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

182 :	"xy"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

182 :	"y"
		- NEIGH  = { y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { apa , Q , ab , asin , pj_authlat , phi , lp , }

183 :	"lp"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

183 :	"phi"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

183 :	"pj_authlat"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

183 :	"asin"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

183 :	"ab"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

183 :	"Q"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

183 :	"apa"
		- NEIGH  = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , x , xy , lam , atan2 , lp , }
		- SUCC   = { lp , return , }

184 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- SUCC   = { }

184 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { apa , Q , ab , asin , pj_authlat , phi , lp , }
		- SUCC   = { }

188 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"s_inverse"
		- NEIGH  = { s_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

189 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

189 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

190 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

190 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinz , rh , cosz , }

191 :	"cosz"
		- NEIGH  = { sinz , rh , cosz , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , x , xy , hypot , rh , }

191 :	"rh"
		- NEIGH  = { sinz , rh , cosz , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , x , xy , hypot , rh , }

191 :	"sinz"
		- NEIGH  = { sinz , rh , cosz , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , x , xy , hypot , rh , }

193 :	"rh"
		- NEIGH  = { y , x , xy , hypot , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinz , rh , cosz , }
		- SUCC   = { * , rh , > , phi , lp , if , }

193 :	"hypot"
		- NEIGH  = { y , x , xy , hypot , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinz , rh , cosz , }
		- SUCC   = { * , rh , > , phi , lp , if , }

193 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinz , rh , cosz , }
		- SUCC   = { * , rh , > , phi , lp , if , }

193 :	"x"
		- NEIGH  = { y , x , xy , hypot , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinz , rh , cosz , }
		- SUCC   = { * , rh , > , phi , lp , if , }

193 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinz , rh , cosz , }
		- SUCC   = { * , rh , > , phi , lp , if , }

193 :	"y"
		- NEIGH  = { y , x , xy , hypot , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinz , rh , cosz , }
		- SUCC   = { * , rh , > , phi , lp , if , }

194 :	"if"
		- NEIGH  = { * , rh , > , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { return , PJD_ERR_TOLERANCE_CONDITION , P , lp , proj_errno_set , }
		- PRED   = { y , x , xy , hypot , rh , }
		- SUCC   = { asin , * , phi , lp , }

194 :	"lp"
		- NEIGH  = { * , rh , > , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { return , PJD_ERR_TOLERANCE_CONDITION , P , lp , proj_errno_set , }
		- PRED   = { y , x , xy , hypot , rh , }
		- SUCC   = { asin , * , phi , lp , }

194 :	"phi"
		- NEIGH  = { * , rh , > , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { return , PJD_ERR_TOLERANCE_CONDITION , P , lp , proj_errno_set , }
		- PRED   = { y , x , xy , hypot , rh , }
		- SUCC   = { asin , * , phi , lp , }

194 :	"rh"
		- NEIGH  = { * , rh , > , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { return , PJD_ERR_TOLERANCE_CONDITION , P , lp , proj_errno_set , }
		- PRED   = { y , x , xy , hypot , rh , }
		- SUCC   = { asin , * , phi , lp , }

194 :	"*"
		- NEIGH  = { * , rh , > , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { return , PJD_ERR_TOLERANCE_CONDITION , P , lp , proj_errno_set , }
		- PRED   = { y , x , xy , hypot , rh , }
		- SUCC   = { asin , * , phi , lp , }

194 :	">"
		- NEIGH  = { * , rh , > , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { return , PJD_ERR_TOLERANCE_CONDITION , P , lp , proj_errno_set , }
		- PRED   = { y , x , xy , hypot , rh , }
		- SUCC   = { asin , * , phi , lp , }

195 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { * , rh , > , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lp , return , }

195 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { * , rh , > , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lp , return , }

195 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { * , rh , > , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lp , return , }

196 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { * , rh , > , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

196 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { * , rh , > , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

198 :	"lp"
		- NEIGH  = { asin , * , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , rh , > , phi , lp , if , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

198 :	"phi"
		- NEIGH  = { asin , * , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , rh , > , phi , lp , if , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

198 :	"*"
		- NEIGH  = { asin , * , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , rh , > , phi , lp , if , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

198 :	"asin"
		- NEIGH  = { asin , * , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , rh , > , phi , lp , if , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

198 :	"lp"
		- NEIGH  = { asin , * , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , rh , > , phi , lp , if , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

198 :	"phi"
		- NEIGH  = { asin , * , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , rh , > , phi , lp , if , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

199 :	"if"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"Q"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"mode"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"=="
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"OBLIQ"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"||"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"Q"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"mode"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"=="
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

199 :	"EQUIT"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cosz , cos , phi , lp , sin , sinz , }
		- PRED   = { asin , * , phi , lp , }
		- SUCC   = { mode , Q , switch , }

200 :	"sinz"
		- NEIGH  = { phi , lp , sin , sinz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , cos , cosz , }

200 :	"sin"
		- NEIGH  = { phi , lp , sin , sinz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , cos , cosz , }

200 :	"lp"
		- NEIGH  = { phi , lp , sin , sinz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , cos , cosz , }

200 :	"phi"
		- NEIGH  = { phi , lp , sin , sinz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , cos , cosz , }

201 :	"cosz"
		- NEIGH  = { phi , lp , cos , cosz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinz , }
		- SUCC   = { }

201 :	"cos"
		- NEIGH  = { phi , lp , cos , cosz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinz , }
		- SUCC   = { }

201 :	"lp"
		- NEIGH  = { phi , lp , cos , cosz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinz , }
		- SUCC   = { }

201 :	"phi"
		- NEIGH  = { phi , lp , cos , cosz , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinz , }
		- SUCC   = { }

203 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { -= , S_POLE , M_HALFPI , N_POLE , cosb1 , - , xy , Q , phi0 , OBLIQ , break , cosz , x , EQUIT , * , *= , / , sinb1 , + , rh , sin , y , sinz , fabs , <= , phi , lp , P , asin , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }

203 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { -= , S_POLE , M_HALFPI , N_POLE , cosb1 , - , xy , Q , phi0 , OBLIQ , break , cosz , x , EQUIT , * , *= , / , sinb1 , + , rh , sin , y , sinz , fabs , <= , phi , lp , P , asin , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }

203 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { -= , S_POLE , M_HALFPI , N_POLE , cosb1 , - , xy , Q , phi0 , OBLIQ , break , cosz , x , EQUIT , * , *= , / , sinb1 , + , rh , sin , y , sinz , fabs , <= , phi , lp , P , asin , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }

204 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }

205 :	"lp"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"phi"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"fabs"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"rh"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"<="
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"asin"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"xy"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"y"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"*"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"sinz"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"/"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

205 :	"rh"
		- NEIGH  = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinz , *= , x , xy , }

206 :	"xy"
		- NEIGH  = { sinz , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- SUCC   = { rh , cosz , * , y , xy , }

206 :	"x"
		- NEIGH  = { sinz , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- SUCC   = { rh , cosz , * , y , xy , }

206 :	"*="
		- NEIGH  = { sinz , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- SUCC   = { rh , cosz , * , y , xy , }

206 :	"sinz"
		- NEIGH  = { sinz , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , y , sinz , xy , asin , / , phi , <= , fabs , rh , lp , }
		- SUCC   = { rh , cosz , * , y , xy , }

207 :	"xy"
		- NEIGH  = { rh , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinz , *= , x , xy , }
		- SUCC   = { break , }

207 :	"y"
		- NEIGH  = { rh , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinz , *= , x , xy , }
		- SUCC   = { break , }

207 :	"cosz"
		- NEIGH  = { rh , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinz , *= , x , xy , }
		- SUCC   = { break , }

207 :	"*"
		- NEIGH  = { rh , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinz , *= , x , xy , }
		- SUCC   = { break , }

207 :	"rh"
		- NEIGH  = { rh , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinz , *= , x , xy , }
		- SUCC   = { break , }

208 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , cosz , * , y , xy , }
		- SUCC   = { OBLIQ , }

209 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }

210 :	"lp"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

210 :	"phi"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

210 :	"fabs"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

210 :	"rh"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

210 :	"<="
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

210 :	"P"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

210 :	"phi0"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"asin"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"cosz"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"*"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"Q"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"sinb1"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"+"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"xy"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"y"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"*"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"sinz"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"*"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"Q"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"cosb1"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"/"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

211 :	"rh"
		- NEIGH  = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosb1 , Q , xy , sinz , * , *= , x , }

212 :	"xy"
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

212 :	"x"
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

212 :	"*="
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

212 :	"sinz"
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

212 :	"*"
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

212 :	"Q"
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

212 :	"cosb1"
		- NEIGH  = { cosb1 , Q , xy , sinz , * , *= , x , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , xy , cosb1 , Q , * , cosz , P , asin , phi0 , phi , + , <= , fabs , sinz , y , sinb1 , rh , lp , }
		- SUCC   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }

213 :	"xy"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"y"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"cosz"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"-"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"sin"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"lp"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"phi"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"*"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"Q"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"sinb1"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"*"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

213 :	"rh"
		- NEIGH  = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosb1 , Q , xy , sinz , * , *= , x , }
		- SUCC   = { break , }

214 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { Q , phi , lp , rh , sin , sinb1 , - , cosz , * , y , xy , }
		- SUCC   = { N_POLE , }

215 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , y , xy , }

216 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , phi , lp , }

216 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , phi , lp , }

216 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , phi , lp , }

216 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , phi , lp , }

216 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , phi , lp , }

217 :	"lp"
		- NEIGH  = { M_HALFPI , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

217 :	"phi"
		- NEIGH  = { M_HALFPI , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

217 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

217 :	"-"
		- NEIGH  = { M_HALFPI , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

217 :	"lp"
		- NEIGH  = { M_HALFPI , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

217 :	"phi"
		- NEIGH  = { M_HALFPI , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

218 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , phi , lp , }
		- SUCC   = { S_POLE , }

219 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { M_HALFPI , -= , phi , lp , }

220 :	"lp"
		- NEIGH  = { M_HALFPI , -= , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

220 :	"phi"
		- NEIGH  = { M_HALFPI , -= , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

220 :	"-="
		- NEIGH  = { M_HALFPI , -= , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

220 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , -= , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

221 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , -= , phi , lp , }
		- SUCC   = { }

223 :	"lp"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"lam"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"xy"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"y"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"=="
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"&&"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"Q"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"mode"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"=="
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"EQUIT"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"||"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"Q"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"mode"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"=="
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

223 :	"OBLIQ"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

224 :	"atan2"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

224 :	"xy"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

224 :	"x"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

224 :	"xy"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

224 :	"y"
		- NEIGH  = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { lp , return , }

225 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- SUCC   = { }

225 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , y , || , atan2 , EQUIT , Q , mode , && , == , xy , OBLIQ , lam , lp , }
		- SUCC   = { }

229 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"destructor"
		- NEIGH  = { destructor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"errlev"
		- NEIGH  = { errlev , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"if"
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

230 :	"=="
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

230 :	"P"
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

231 :	"return"
		- NEIGH  = { return , }
		- PARENT = { P , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"if"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

233 :	"=="
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

233 :	"P"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

233 :	"opaque"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

234 :	"return"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"pj_default_destructor"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"P"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"errlev"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

236 :	"pj_dealloc"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"static_cast"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"<"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"pj_opaque"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"*"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	">"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"P"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"opaque"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

236 :	"apa"
		- NEIGH  = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

238 :	"return"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

238 :	"pj_default_destructor"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

238 :	"P"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

238 :	"errlev"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , apa , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

242 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"laea"
		- NEIGH  = { laea , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

243 :	"t"
		- NEIGH  = { t , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }

244 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

244 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { Q , == , if , }

245 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

245 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

245 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

246 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

246 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

246 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

246 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

247 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

247 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

247 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

248 :	"P"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi0 , P , fabs , t , }

248 :	"destructor"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi0 , P , fabs , t , }

248 :	"destructor"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi0 , P , fabs , t , }

250 :	"t"
		- NEIGH  = { phi0 , P , fabs , t , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { + , > , M_HALFPI , t , if , }

250 :	"fabs"
		- NEIGH  = { phi0 , P , fabs , t , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { + , > , M_HALFPI , t , if , }

250 :	"P"
		- NEIGH  = { phi0 , P , fabs , t , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { + , > , M_HALFPI , t , if , }

250 :	"phi0"
		- NEIGH  = { phi0 , P , fabs , t , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { + , > , M_HALFPI , t , if , }

251 :	"if"
		- NEIGH  = { + , > , M_HALFPI , t , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PRED   = { phi0 , P , fabs , t , }
		- SUCC   = { < , - , M_HALFPI , t , fabs , if , }

251 :	"t"
		- NEIGH  = { + , > , M_HALFPI , t , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PRED   = { phi0 , P , fabs , t , }
		- SUCC   = { < , - , M_HALFPI , t , fabs , if , }

251 :	">"
		- NEIGH  = { + , > , M_HALFPI , t , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PRED   = { phi0 , P , fabs , t , }
		- SUCC   = { < , - , M_HALFPI , t , fabs , if , }

251 :	"M_HALFPI"
		- NEIGH  = { + , > , M_HALFPI , t , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PRED   = { phi0 , P , fabs , t , }
		- SUCC   = { < , - , M_HALFPI , t , fabs , if , }

251 :	"+"
		- NEIGH  = { + , > , M_HALFPI , t , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PRED   = { phi0 , P , fabs , t , }
		- SUCC   = { < , - , M_HALFPI , t , fabs , if , }

252 :	"return"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PARENT = { + , > , M_HALFPI , t , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

252 :	"destructor"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PARENT = { + , > , M_HALFPI , t , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

252 :	"P"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PARENT = { + , > , M_HALFPI , t , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

252 :	"PJD_ERR_LAT_LARGER_THAN_90"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , destructor , P , return , }
		- PARENT = { + , > , M_HALFPI , t , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

254 :	"if"
		- NEIGH  = { < , - , M_HALFPI , t , fabs , if , }
		- PARENT = { }
		- CHILD  = { t , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { + , > , M_HALFPI , t , if , }
		- SUCC   = { != , es , P , if , }

254 :	"fabs"
		- NEIGH  = { < , - , M_HALFPI , t , fabs , if , }
		- PARENT = { }
		- CHILD  = { t , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { + , > , M_HALFPI , t , if , }
		- SUCC   = { != , es , P , if , }

254 :	"t"
		- NEIGH  = { < , - , M_HALFPI , t , fabs , if , }
		- PARENT = { }
		- CHILD  = { t , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { + , > , M_HALFPI , t , if , }
		- SUCC   = { != , es , P , if , }

254 :	"-"
		- NEIGH  = { < , - , M_HALFPI , t , fabs , if , }
		- PARENT = { }
		- CHILD  = { t , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { + , > , M_HALFPI , t , if , }
		- SUCC   = { != , es , P , if , }

254 :	"M_HALFPI"
		- NEIGH  = { < , - , M_HALFPI , t , fabs , if , }
		- PARENT = { }
		- CHILD  = { t , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { + , > , M_HALFPI , t , if , }
		- SUCC   = { != , es , P , if , }

254 :	"<"
		- NEIGH  = { < , - , M_HALFPI , t , fabs , if , }
		- PARENT = { }
		- CHILD  = { t , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { + , > , M_HALFPI , t , if , }
		- SUCC   = { != , es , P , if , }

255 :	"Q"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"mode"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"P"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"phi0"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"<"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"S_POLE"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"N_POLE"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"if"
		- NEIGH  = { < , t , fabs , if , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { EQUIT , mode , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

256 :	"fabs"
		- NEIGH  = { < , t , fabs , if , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { EQUIT , mode , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

256 :	"t"
		- NEIGH  = { < , t , fabs , if , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { EQUIT , mode , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

256 :	"<"
		- NEIGH  = { < , t , fabs , if , }
		- PARENT = { < , - , M_HALFPI , t , fabs , if , }
		- CHILD  = { EQUIT , mode , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

257 :	"Q"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { < , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"mode"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { < , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"EQUIT"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { < , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"Q"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { < , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"mode"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { < , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"OBLIQ"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { < , t , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"if"
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , inv , == , sqrt , switch , if , e_inverse , pj_authset , fwd , Q , - , / , s_inverse , e_forward , mode , pj_qsfn , mmf , one_es , qp , OBLIQ , es , e , P , apa , sinphi , }
		- PRED   = { < , - , M_HALFPI , t , fabs , if , }
		- SUCC   = { P , return , }

260 :	"P"
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , inv , == , sqrt , switch , if , e_inverse , pj_authset , fwd , Q , - , / , s_inverse , e_forward , mode , pj_qsfn , mmf , one_es , qp , OBLIQ , es , e , P , apa , sinphi , }
		- PRED   = { < , - , M_HALFPI , t , fabs , if , }
		- SUCC   = { P , return , }

260 :	"es"
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , inv , == , sqrt , switch , if , e_inverse , pj_authset , fwd , Q , - , / , s_inverse , e_forward , mode , pj_qsfn , mmf , one_es , qp , OBLIQ , es , e , P , apa , sinphi , }
		- PRED   = { < , - , M_HALFPI , t , fabs , if , }
		- SUCC   = { P , return , }

260 :	"!="
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , inv , == , sqrt , switch , if , e_inverse , pj_authset , fwd , Q , - , / , s_inverse , e_forward , mode , pj_qsfn , mmf , one_es , qp , OBLIQ , es , e , P , apa , sinphi , }
		- PRED   = { < , - , M_HALFPI , t , fabs , if , }
		- SUCC   = { P , return , }

261 :	"sinphi"
		- NEIGH  = { sinphi , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sqrt , e , es , P , }

263 :	"P"
		- NEIGH  = { sqrt , e , es , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sinphi , }
		- SUCC   = { one_es , pj_qsfn , e , qp , P , Q , }

263 :	"e"
		- NEIGH  = { sqrt , e , es , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sinphi , }
		- SUCC   = { one_es , pj_qsfn , e , qp , P , Q , }

263 :	"sqrt"
		- NEIGH  = { sqrt , e , es , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sinphi , }
		- SUCC   = { one_es , pj_qsfn , e , qp , P , Q , }

263 :	"P"
		- NEIGH  = { sqrt , e , es , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sinphi , }
		- SUCC   = { one_es , pj_qsfn , e , qp , P , Q , }

263 :	"es"
		- NEIGH  = { sqrt , e , es , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sinphi , }
		- SUCC   = { one_es , pj_qsfn , e , qp , P , Q , }

264 :	"Q"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

264 :	"qp"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

264 :	"pj_qsfn"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

264 :	"P"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

264 :	"e"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

264 :	"P"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

264 :	"one_es"
		- NEIGH  = { one_es , pj_qsfn , e , qp , P , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { sqrt , e , es , P , }
		- SUCC   = { es , - , mmf , P , / , Q , }

265 :	"Q"
		- NEIGH  = { es , - , mmf , P , / , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { one_es , pj_qsfn , e , qp , P , Q , }
		- SUCC   = { pj_authset , es , P , apa , Q , }

265 :	"mmf"
		- NEIGH  = { es , - , mmf , P , / , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { one_es , pj_qsfn , e , qp , P , Q , }
		- SUCC   = { pj_authset , es , P , apa , Q , }

265 :	"/"
		- NEIGH  = { es , - , mmf , P , / , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { one_es , pj_qsfn , e , qp , P , Q , }
		- SUCC   = { pj_authset , es , P , apa , Q , }

265 :	"-"
		- NEIGH  = { es , - , mmf , P , / , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { one_es , pj_qsfn , e , qp , P , Q , }
		- SUCC   = { pj_authset , es , P , apa , Q , }

265 :	"P"
		- NEIGH  = { es , - , mmf , P , / , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { one_es , pj_qsfn , e , qp , P , Q , }
		- SUCC   = { pj_authset , es , P , apa , Q , }

265 :	"es"
		- NEIGH  = { es , - , mmf , P , / , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { one_es , pj_qsfn , e , qp , P , Q , }
		- SUCC   = { pj_authset , es , P , apa , Q , }

266 :	"Q"
		- NEIGH  = { pj_authset , es , P , apa , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { es , - , mmf , P , / , Q , }
		- SUCC   = { apa , Q , == , if , }

266 :	"apa"
		- NEIGH  = { pj_authset , es , P , apa , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { es , - , mmf , P , / , Q , }
		- SUCC   = { apa , Q , == , if , }

266 :	"pj_authset"
		- NEIGH  = { pj_authset , es , P , apa , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { es , - , mmf , P , / , Q , }
		- SUCC   = { apa , Q , == , if , }

266 :	"P"
		- NEIGH  = { pj_authset , es , P , apa , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { es , - , mmf , P , / , Q , }
		- SUCC   = { apa , Q , == , if , }

266 :	"es"
		- NEIGH  = { pj_authset , es , P , apa , Q , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { es , - , mmf , P , / , Q , }
		- SUCC   = { apa , Q , == , if , }

267 :	"if"
		- NEIGH  = { apa , Q , == , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { pj_authset , es , P , apa , Q , }
		- SUCC   = { mode , Q , switch , }

267 :	"=="
		- NEIGH  = { apa , Q , == , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { pj_authset , es , P , apa , Q , }
		- SUCC   = { mode , Q , switch , }

267 :	"Q"
		- NEIGH  = { apa , Q , == , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { pj_authset , es , P , apa , Q , }
		- SUCC   = { mode , Q , switch , }

267 :	"apa"
		- NEIGH  = { apa , Q , == , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { pj_authset , es , P , apa , Q , }
		- SUCC   = { mode , Q , switch , }

268 :	"return"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { apa , Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"destructor"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { apa , Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"P"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { apa , Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"ENOMEM"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { apa , Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

269 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , N_POLE , one_es , e , P , sin , sinphi , es , OBLIQ , sqrt , *= , EQUIT , * , rq , dd , ymf , / , sinb1 , phi0 , xmf , S_POLE , qp , pj_qsfn , break , cosb1 , - , Q , }
		- PRED   = { apa , Q , == , if , }
		- SUCC   = { e_inverse , inv , P , }

269 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , N_POLE , one_es , e , P , sin , sinphi , es , OBLIQ , sqrt , *= , EQUIT , * , rq , dd , ymf , / , sinb1 , phi0 , xmf , S_POLE , qp , pj_qsfn , break , cosb1 , - , Q , }
		- PRED   = { apa , Q , == , if , }
		- SUCC   = { e_inverse , inv , P , }

269 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , N_POLE , one_es , e , P , sin , sinphi , es , OBLIQ , sqrt , *= , EQUIT , * , rq , dd , ymf , / , sinb1 , phi0 , xmf , S_POLE , qp , pj_qsfn , break , cosb1 , - , Q , }
		- PRED   = { apa , Q , == , if , }
		- SUCC   = { e_inverse , inv , P , }

270 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { S_POLE , }

271 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { dd , Q , }

272 :	"Q"
		- NEIGH  = { dd , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

272 :	"dd"
		- NEIGH  = { dd , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

273 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , Q , }
		- SUCC   = { EQUIT , }

274 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { qp , Q , sqrt , * , rq , dd , / , }

275 :	"Q"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"dd"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"/"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"Q"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"rq"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"sqrt"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"*"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"Q"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

275 :	"qp"
		- NEIGH  = { qp , Q , sqrt , * , rq , dd , / , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { xmf , Q , }

276 :	"Q"
		- NEIGH  = { xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { qp , Q , sqrt , * , rq , dd , / , }
		- SUCC   = { qp , * , ymf , Q , }

276 :	"xmf"
		- NEIGH  = { xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { qp , Q , sqrt , * , rq , dd , / , }
		- SUCC   = { qp , * , ymf , Q , }

277 :	"Q"
		- NEIGH  = { qp , * , ymf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xmf , Q , }
		- SUCC   = { break , }

277 :	"ymf"
		- NEIGH  = { qp , * , ymf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xmf , Q , }
		- SUCC   = { break , }

277 :	"*"
		- NEIGH  = { qp , * , ymf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xmf , Q , }
		- SUCC   = { break , }

277 :	"Q"
		- NEIGH  = { qp , * , ymf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xmf , Q , }
		- SUCC   = { break , }

277 :	"qp"
		- NEIGH  = { qp , * , ymf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xmf , Q , }
		- SUCC   = { break , }

278 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { qp , * , ymf , Q , }
		- SUCC   = { OBLIQ , }

279 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { * , sqrt , qp , rq , Q , }

280 :	"Q"
		- NEIGH  = { * , sqrt , qp , rq , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi0 , P , sin , sinphi , }

280 :	"rq"
		- NEIGH  = { * , sqrt , qp , rq , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi0 , P , sin , sinphi , }

280 :	"sqrt"
		- NEIGH  = { * , sqrt , qp , rq , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi0 , P , sin , sinphi , }

280 :	"*"
		- NEIGH  = { * , sqrt , qp , rq , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi0 , P , sin , sinphi , }

280 :	"Q"
		- NEIGH  = { * , sqrt , qp , rq , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi0 , P , sin , sinphi , }

280 :	"qp"
		- NEIGH  = { * , sqrt , qp , rq , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi0 , P , sin , sinphi , }

281 :	"sinphi"
		- NEIGH  = { phi0 , P , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sqrt , qp , rq , Q , }
		- SUCC   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }

281 :	"sin"
		- NEIGH  = { phi0 , P , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sqrt , qp , rq , Q , }
		- SUCC   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }

281 :	"P"
		- NEIGH  = { phi0 , P , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sqrt , qp , rq , Q , }
		- SUCC   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }

281 :	"phi0"
		- NEIGH  = { phi0 , P , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sqrt , qp , rq , Q , }
		- SUCC   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }

282 :	"Q"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"sinb1"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"pj_qsfn"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"sinphi"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"P"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"e"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"P"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"one_es"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"/"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"Q"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

282 :	"qp"
		- NEIGH  = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , sinphi , }
		- SUCC   = { * , sinb1 , - , Q , sqrt , cosb1 , }

283 :	"Q"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"cosb1"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"sqrt"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"-"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"Q"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"sinb1"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"*"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"Q"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

283 :	"sinb1"
		- NEIGH  = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , one_es , sinphi , qp , sinb1 , P , e , pj_qsfn , Q , }
		- SUCC   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }

284 :	"Q"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"dd"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"cos"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"P"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"phi0"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"/"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"sqrt"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"-"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"P"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"es"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"*"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"sinphi"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"*"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"sinphi"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

284 :	"*"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

285 :	"Q"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

285 :	"rq"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

285 :	"*"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

285 :	"Q"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

285 :	"cosb1"
		- NEIGH  = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sinb1 , - , Q , sqrt , cosb1 , }
		- SUCC   = { rq , dd , xmf , ymf , / , Q , }

286 :	"Q"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"ymf"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"Q"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"xmf"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"Q"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"rq"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"/"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"Q"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

286 :	"dd"
		- NEIGH  = { rq , dd , xmf , ymf , / , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , sinphi , sqrt , * , es , dd , - , phi0 , / , cos , P , cosb1 , Q , }
		- SUCC   = { dd , *= , xmf , Q , }

287 :	"Q"
		- NEIGH  = { dd , *= , xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , dd , xmf , ymf , / , Q , }
		- SUCC   = { break , }

287 :	"xmf"
		- NEIGH  = { dd , *= , xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , dd , xmf , ymf , / , Q , }
		- SUCC   = { break , }

287 :	"*="
		- NEIGH  = { dd , *= , xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , dd , xmf , ymf , / , Q , }
		- SUCC   = { break , }

287 :	"Q"
		- NEIGH  = { dd , *= , xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , dd , xmf , ymf , / , Q , }
		- SUCC   = { break , }

287 :	"dd"
		- NEIGH  = { dd , *= , xmf , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rq , dd , xmf , ymf , / , Q , }
		- SUCC   = { break , }

288 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { dd , *= , xmf , Q , }
		- SUCC   = { }

290 :	"P"
		- NEIGH  = { e_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { e_forward , fwd , P , }

290 :	"inv"
		- NEIGH  = { e_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { e_forward , fwd , P , }

290 :	"e_inverse"
		- NEIGH  = { e_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { e_forward , fwd , P , }

291 :	"P"
		- NEIGH  = { e_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { e_inverse , inv , P , }
		- SUCC   = { }

291 :	"fwd"
		- NEIGH  = { e_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { e_inverse , inv , P , }
		- SUCC   = { }

291 :	"e_forward"
		- NEIGH  = { e_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { e_inverse , inv , P , }
		- SUCC   = { }

293 :	"if"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , cosb1 , phi0 , sin , sinb1 , P , Q , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

293 :	"Q"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , cosb1 , phi0 , sin , sinb1 , P , Q , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

293 :	"mode"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , cosb1 , phi0 , sin , sinb1 , P , Q , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

293 :	"=="
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , cosb1 , phi0 , sin , sinb1 , P , Q , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

293 :	"OBLIQ"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cos , cosb1 , phi0 , sin , sinb1 , P , Q , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

294 :	"Q"
		- NEIGH  = { phi0 , sin , sinb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , cos , cosb1 , P , Q , }

294 :	"sinb1"
		- NEIGH  = { phi0 , sin , sinb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , cos , cosb1 , P , Q , }

294 :	"sin"
		- NEIGH  = { phi0 , sin , sinb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , cos , cosb1 , P , Q , }

294 :	"P"
		- NEIGH  = { phi0 , sin , sinb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , cos , cosb1 , P , Q , }

294 :	"phi0"
		- NEIGH  = { phi0 , sin , sinb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi0 , cos , cosb1 , P , Q , }

295 :	"Q"
		- NEIGH  = { phi0 , cos , cosb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , sin , sinb1 , P , Q , }
		- SUCC   = { }

295 :	"cosb1"
		- NEIGH  = { phi0 , cos , cosb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , sin , sinb1 , P , Q , }
		- SUCC   = { }

295 :	"cos"
		- NEIGH  = { phi0 , cos , cosb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , sin , sinb1 , P , Q , }
		- SUCC   = { }

295 :	"P"
		- NEIGH  = { phi0 , cos , cosb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , sin , sinb1 , P , Q , }
		- SUCC   = { }

295 :	"phi0"
		- NEIGH  = { phi0 , cos , cosb1 , P , Q , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { phi0 , sin , sinb1 , P , Q , }
		- SUCC   = { }

297 :	"P"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { s_forward , fwd , P , }

297 :	"inv"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { s_forward , fwd , P , }

297 :	"s_inverse"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { s_forward , fwd , P , }

298 :	"P"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { }

298 :	"fwd"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { }

298 :	"s_forward"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { }

301 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , es , P , if , }
		- SUCC   = { }

301 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , es , P , if , }
		- SUCC   = { }

