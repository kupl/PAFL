9 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

10 :	"EULER"
		- NEIGH  = { EULER , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

11 :	"MURD1"
		- NEIGH  = { MURD1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"MURD3"
		- NEIGH  = { MURD3 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

15 :	"TISSOT"
		- NEIGH  = { TISSOT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

16 :	"VITK1"
		- NEIGH  = { VITK1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

21 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

22 :	"n"
		- NEIGH  = { n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"rho_c"
		- NEIGH  = { rho_c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

24 :	"rho_0"
		- NEIGH  = { rho_0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

25 :	"sig"
		- NEIGH  = { sig , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"c1"
		- NEIGH  = { c1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"c2"
		- NEIGH  = { c2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

27 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

27 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"euler"
		- NEIGH  = { euler , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"murd1"
		- NEIGH  = { murd1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"murd2"
		- NEIGH  = { murd2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"murd3"
		- NEIGH  = { murd3 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"pconic"
		- NEIGH  = { pconic , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"tissot"
		- NEIGH  = { tissot , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"vitk1"
		- NEIGH  = { vitk1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"phi12"
		- NEIGH  = { phi12 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"del"
		- NEIGH  = { del , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"p1"
		- NEIGH  = { p2 , p1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

48 :	"p2"
		- NEIGH  = { p2 , p1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

49 :	"err"
		- NEIGH  = { err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p2 , p1 , }
		- SUCC   = { i , params , ctx , || , pj_param , P , ! , if , }

51 :	"if"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"!"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"pj_param"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"P"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"ctx"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"P"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"params"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"i"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"||"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"!"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"pj_param"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"P"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"ctx"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"P"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"params"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

52 :	"i"
		- NEIGH  = { i , params , ctx , || , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , fabs , + , opaque , pj_opaque , < , static_cast , > , del , ctx , * , pj_param , P , p2 , f , p1 , sig , params , || , - , err , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

53 :	"err"
		- NEIGH  = { - , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"-"
		- NEIGH  = { - , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"p1"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

55 :	"pj_param"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

55 :	"P"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

55 :	"ctx"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

55 :	"P"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

55 :	"params"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

55 :	"f"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

56 :	"p2"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

56 :	"pj_param"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

56 :	"P"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

56 :	"ctx"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

56 :	"P"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

56 :	"params"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

56 :	"f"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

57 :	"*"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }

57 :	"del"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }

57 :	"*"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }

57 :	"p2"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }

57 :	"-"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }

57 :	"p1"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }

58 :	"static_cast"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"<"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"pj_opaque"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"*"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	">"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"P"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"opaque"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"sig"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"*"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"p2"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"+"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

58 :	"p1"
		- NEIGH  = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }

59 :	"err"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"fabs"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"*"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"del"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"<"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"||"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"fabs"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"static_cast"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"<"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"pj_opaque"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"*"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	">"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"P"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"opaque"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"sig"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"<"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

59 :	"PJD_ERR_ABS_LAT1_EQ_ABS_LAT2"
		- NEIGH  = { PJD_ERR_ABS_LAT1_EQ_ABS_LAT2 , sig , opaque , del , > , pj_opaque , static_cast , < , P , fabs , * , || , err , }
		- PARENT = { i , params , ctx , || , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , p2 , pj_opaque , p1 , + , static_cast , }
		- SUCC   = { }

61 :	"return"
		- NEIGH  = { err , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , || , pj_param , P , ! , if , }
		- SUCC   = { }

61 :	"err"
		- NEIGH  = { err , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , || , pj_param , P , ! , if , }
		- SUCC   = { }

65 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"sconics_s_forward"
		- NEIGH  = { sconics_s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

66 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

67 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

67 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

68 :	"rho"
		- NEIGH  = { rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { type , Q , switch , }

70 :	"switch"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { c1 , * , c2 , PCONIC , phi , lp , sig , break , - , tan , + , MURD2 , Q , rho , rho_c , }
		- PRED   = { rho , }
		- SUCC   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }

70 :	"Q"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { c1 , * , c2 , PCONIC , phi , lp , sig , break , - , tan , + , MURD2 , Q , rho , rho_c , }
		- PRED   = { rho , }
		- SUCC   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }

70 :	"type"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { c1 , * , c2 , PCONIC , phi , lp , sig , break , - , tan , + , MURD2 , Q , rho , rho_c , }
		- PRED   = { rho , }
		- SUCC   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }

71 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }

72 :	"rho"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"Q"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"rho_c"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"+"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"tan"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"Q"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"sig"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"-"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"lp"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

72 :	"phi"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

73 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- SUCC   = { PCONIC , }

74 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }

75 :	"rho"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"Q"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"c2"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"*"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"Q"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"c1"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"-"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"tan"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"lp"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"phi"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"-"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"Q"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

75 :	"sig"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

76 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- SUCC   = { }

78 :	"rho"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

78 :	"Q"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

78 :	"rho_c"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

78 :	"-"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

78 :	"lp"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

78 :	"phi"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

79 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , rho , rho_c , Q , }
		- SUCC   = { }

82 :	"xy"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"x"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"rho"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"*"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"sin"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"lp"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"lam"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"*="
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"Q"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

82 :	"n"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

83 :	"xy"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"y"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"Q"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"rho_0"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"-"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"rho"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"*"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"cos"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"lp"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

83 :	"lam"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

84 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- SUCC   = { }

84 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- SUCC   = { }

88 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"sconics_s_inverse"
		- NEIGH  = { sconics_s_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

89 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

89 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

90 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

90 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

91 :	"rho"
		- NEIGH  = { rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { - , Q , hypot , y , x , xy , rho_0 , rho , }

93 :	"rho"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"hypot"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"xy"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"x"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"xy"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"y"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"Q"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"rho_0"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"-"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"xy"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

93 :	"y"
		- NEIGH  = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { < , n , Q , if , }

94 :	"if"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

94 :	"Q"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

94 :	"n"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

94 :	"<"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { - , Q , hypot , y , x , xy , rho_0 , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

95 :	"rho"
		- NEIGH  = { - , rho , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

95 :	"-"
		- NEIGH  = { - , rho , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

95 :	"rho"
		- NEIGH  = { - , rho , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

96 :	"xy"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

96 :	"x"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

96 :	"-"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

96 :	"xy"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

96 :	"x"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

97 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

97 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

97 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

97 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

97 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

100 :	"lp"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"lam"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"atan2"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"xy"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"x"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"xy"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"y"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"/"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"Q"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

100 :	"n"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

102 :	"switch"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { break , sig , c2 , rho_c , rho , - , + , c1 , / , phi , atan , lp , MURD2 , Q , PCONIC , }
		- PRED   = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- SUCC   = { lp , return , }

102 :	"Q"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { break , sig , c2 , rho_c , rho , - , + , c1 , / , phi , atan , lp , MURD2 , Q , PCONIC , }
		- PRED   = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- SUCC   = { lp , return , }

102 :	"type"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { break , sig , c2 , rho_c , rho , - , + , c1 , / , phi , atan , lp , MURD2 , Q , PCONIC , }
		- PRED   = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- SUCC   = { lp , return , }

103 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }

104 :	"lp"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"phi"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"atan"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"Q"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"c1"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"-"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"rho"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"/"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"Q"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"c2"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"+"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"Q"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

104 :	"sig"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

105 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- SUCC   = { MURD2 , }

106 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { rho_c , rho , Q , - , sig , phi , atan , lp , }

107 :	"lp"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"phi"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"Q"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"sig"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"-"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"atan"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"rho"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"-"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"Q"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

107 :	"rho_c"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

108 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- SUCC   = { }

110 :	"lp"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"phi"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"Q"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"rho_c"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"-"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"rho"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { }

112 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { }

116 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"setup"
		- NEIGH  = { setup , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

117 :	"del"
		- NEIGH  = { cs , del , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

117 :	"cs"
		- NEIGH  = { cs , del , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

118 :	"err"
		- NEIGH  = { err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cs , del , }
		- SUCC   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }

119 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

119 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

120 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

120 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

120 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

121 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { type , Q , }

122 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { type , Q , }

122 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { type , Q , }

123 :	"Q"
		- NEIGH  = { type , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { del , P , & , phi12 , err , }

123 :	"type"
		- NEIGH  = { type , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { del , P , & , phi12 , err , }

123 :	"type"
		- NEIGH  = { type , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { del , P , & , phi12 , err , }

125 :	"err"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

125 :	"phi12"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

125 :	"P"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

125 :	"&"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

125 :	"del"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

126 :	"if"
		- NEIGH  = { err , if , }
		- PARENT = { }
		- CHILD  = { err , P , pj_default_destructor , return , }
		- PRED   = { del , P , & , phi12 , err , }
		- SUCC   = { type , Q , switch , }

126 :	"err"
		- NEIGH  = { err , if , }
		- PARENT = { }
		- CHILD  = { err , P , pj_default_destructor , return , }
		- PRED   = { del , P , & , phi12 , err , }
		- SUCC   = { type , Q , switch , }

127 :	"return"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

127 :	"pj_default_destructor"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

127 :	"P"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

127 :	"err"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"switch"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { VITK1 , >= , fabs , if , c1 , c2 , PCONIC , MURD3 , break , phi0 , tan , TISSOT , P , Q , - , *= , * , sqrt , + , rho_c , del , sig , / , MURD1 , cs , EULER , cos , M_HALFPI , rho_0 , sin , n , MURD2 , }
		- PRED   = { err , if , }
		- SUCC   = { sconics_s_inverse , inv , P , }

129 :	"Q"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { VITK1 , >= , fabs , if , c1 , c2 , PCONIC , MURD3 , break , phi0 , tan , TISSOT , P , Q , - , *= , * , sqrt , + , rho_c , del , sig , / , MURD1 , cs , EULER , cos , M_HALFPI , rho_0 , sin , n , MURD2 , }
		- PRED   = { err , if , }
		- SUCC   = { sconics_s_inverse , inv , P , }

129 :	"type"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { VITK1 , >= , fabs , if , c1 , c2 , PCONIC , MURD3 , break , phi0 , tan , TISSOT , P , Q , - , *= , * , sqrt , + , rho_c , del , sig , / , MURD1 , cs , EULER , cos , M_HALFPI , rho_0 , sin , n , MURD2 , }
		- PRED   = { err , if , }
		- SUCC   = { sconics_s_inverse , inv , P , }

131 :	"TISSOT"
		- NEIGH  = { TISSOT , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sig , sin , n , Q , }

132 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

132 :	"n"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

132 :	"sin"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

132 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

132 :	"sig"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

133 :	"cs"
		- NEIGH  = { del , cos , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { + , cs , n , rho_c , / , Q , }

133 :	"cos"
		- NEIGH  = { del , cos , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { + , cs , n , rho_c , / , Q , }

133 :	"del"
		- NEIGH  = { del , cos , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { + , cs , n , rho_c , / , Q , }

134 :	"Q"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"rho_c"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"Q"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"n"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"/"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"cs"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"+"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"cs"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"/"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"Q"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

134 :	"n"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

135 :	"Q"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"rho_0"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"sqrt"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"Q"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"rho_c"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"-"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"*"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"sin"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"P"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"phi0"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"/"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"Q"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

135 :	"n"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

136 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- SUCC   = { MURD1 , }

138 :	"MURD1"
		- NEIGH  = { MURD1 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { + , sig , tan , * , del , sin , rho_c , / , Q , }

139 :	"Q"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"rho_c"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"sin"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"del"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"/"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"del"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"*"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"tan"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"Q"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"sig"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"+"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"Q"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

139 :	"sig"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

140 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

140 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

140 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

140 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

140 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

140 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

140 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

141 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

141 :	"n"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

141 :	"sin"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

141 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

141 :	"sig"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

142 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { MURD2 , }

144 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }

145 :	"Q"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"rho_c"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"cs"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"sqrt"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"cos"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"del"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"/"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"tan"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"Q"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

145 :	"sig"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

146 :	"Q"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"rho_0"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"Q"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"rho_c"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"+"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"tan"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"Q"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"sig"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"-"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"P"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

146 :	"phi0"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

147 :	"Q"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

147 :	"n"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

147 :	"sin"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

147 :	"Q"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

147 :	"sig"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

147 :	"*"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

147 :	"cs"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

148 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sig , cs , sin , n , Q , }
		- SUCC   = { MURD3 , }

150 :	"MURD3"
		- NEIGH  = { MURD3 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { + , * , sig , tan , del , rho_c , / , Q , }

151 :	"Q"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"rho_c"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"del"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"/"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"tan"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"Q"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"sig"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"*"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"tan"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"del"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"+"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"Q"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

151 :	"sig"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

152 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

152 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

152 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

152 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

152 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

152 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

152 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

153 :	"Q"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"n"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"sin"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"Q"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"sig"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"*"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"sin"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"*"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"tan"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"/"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"*"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

153 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

154 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , tan , del , * , sig , sin , n , Q , }
		- SUCC   = { EULER , }

156 :	"EULER"
		- NEIGH  = { EULER , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { / , del , * , sig , sin , n , Q , }

157 :	"Q"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"n"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"sin"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"Q"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"sig"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"*"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"sin"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"del"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"/"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

157 :	"del"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

158 :	"del"
		- NEIGH  = { *= , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , del , * , sig , sin , n , Q , }
		- SUCC   = { + , sig , * , tan , del , rho_c , / , Q , }

158 :	"*="
		- NEIGH  = { *= , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , del , * , sig , sin , n , Q , }
		- SUCC   = { + , sig , * , tan , del , rho_c , / , Q , }

159 :	"Q"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"rho_c"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"del"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"/"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"tan"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"del"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"*"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"tan"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"Q"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"sig"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"+"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"Q"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

159 :	"sig"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

160 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

160 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

160 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

160 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

160 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

160 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

160 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

161 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { PCONIC , }

163 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sig , sin , n , Q , }

164 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

164 :	"n"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

164 :	"sin"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

164 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

164 :	"sig"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

165 :	"Q"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

165 :	"c2"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

165 :	"cos"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

165 :	"del"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

166 :	"Q"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }

166 :	"c1"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }

166 :	"/"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }

166 :	"tan"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }

166 :	"Q"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }

166 :	"sig"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }

167 :	"if"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"fabs"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"del"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"P"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"phi0"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"-"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"Q"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"sig"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"-"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	">="
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

167 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

168 :	"return"
		- NEIGH  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"pj_default_destructor"
		- NEIGH  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"P"
		- NEIGH  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"PJD_ERR_LAT_0_HALF_PI_FROM_MEAN"
		- NEIGH  = { PJD_ERR_LAT_0_HALF_PI_FROM_MEAN , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

170 :	"Q"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"rho_0"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"Q"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"c2"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"*"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"Q"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"c1"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"-"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"tan"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

170 :	"del"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , sig , Q , >= , - , if , phi0 , P , fabs , del , }
		- SUCC   = { break , }

171 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- SUCC   = { VITK1 , }

173 :	"VITK1"
		- NEIGH  = { VITK1 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { / , sig , * , del , sin , cs , tan , n , Q , }

174 :	"Q"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"n"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"cs"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"tan"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"del"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"*"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"sin"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"Q"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"sig"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"/"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

174 :	"del"
		- NEIGH  = { / , sig , * , del , sin , cs , tan , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

175 :	"Q"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"rho_c"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"del"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"/"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"cs"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"*"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"tan"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"Q"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"sig"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"+"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"Q"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

175 :	"sig"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , sig , * , del , sin , cs , tan , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

176 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

176 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

176 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

176 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

176 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

176 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

176 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

177 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { }

180 :	"P"
		- NEIGH  = { sconics_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { sconics_s_forward , fwd , P , }

180 :	"inv"
		- NEIGH  = { sconics_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { sconics_s_forward , fwd , P , }

180 :	"sconics_s_inverse"
		- NEIGH  = { sconics_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { sconics_s_forward , fwd , P , }

181 :	"P"
		- NEIGH  = { sconics_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_inverse , inv , P , }
		- SUCC   = { es , P , }

181 :	"fwd"
		- NEIGH  = { sconics_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_inverse , inv , P , }
		- SUCC   = { es , P , }

181 :	"sconics_s_forward"
		- NEIGH  = { sconics_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_inverse , inv , P , }
		- SUCC   = { es , P , }

182 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_forward , fwd , P , }
		- SUCC   = { P , return , }

182 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_forward , fwd , P , }
		- SUCC   = { P , return , }

183 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

183 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

187 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"euler"
		- NEIGH  = { euler , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"return"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"setup"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"P"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"EULER"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"tissot"
		- NEIGH  = { tissot , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

193 :	"return"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

193 :	"setup"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

193 :	"P"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

193 :	"TISSOT"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"murd1"
		- NEIGH  = { murd1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"return"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"setup"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"P"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"MURD1"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"murd2"
		- NEIGH  = { murd2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

203 :	"return"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

203 :	"setup"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

203 :	"P"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

203 :	"MURD2"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"murd3"
		- NEIGH  = { murd3 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"return"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"setup"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"P"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"MURD3"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

212 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

212 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

212 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

212 :	"pconic"
		- NEIGH  = { pconic , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"return"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"setup"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"P"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"PCONIC"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"vitk1"
		- NEIGH  = { vitk1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"return"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"setup"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"P"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"VITK1"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

