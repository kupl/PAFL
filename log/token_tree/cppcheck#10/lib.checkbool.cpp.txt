38 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"instance"
		- NEIGH  = { instance , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"CWE398"
		- NEIGH  = { CWE398 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"CWE571"
		- NEIGH  = { CWE571 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

43 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

43 :	"CWE587"
		- NEIGH  = { CWE587 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"CWE704"
		- NEIGH  = { CWE704 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"isBool"
		- NEIGH  = { isBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"Variable"
		- NEIGH  = { Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"return"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"var"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"&&"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"Token"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"Match"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"var"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"typeEndToken"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"checkIncrementBoolean"
		- NEIGH  = { checkIncrementBoolean , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

54 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

54 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

54 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

54 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

54 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

55 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

57 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

57 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

57 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

57 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

57 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

58 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

58 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

58 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

58 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

58 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

58 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

59 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

59 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

60 :	"if"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"astIsBool"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"tok"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"&&"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"tok"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"astParent"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"&&"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"tok"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"astParent"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"str"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

60 :	"=="
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

61 :	"incrementBooleanError"
		- NEIGH  = { tok , incrementBooleanError , }
		- PARENT = { str , tok , astParent , == , && , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"tok"
		- NEIGH  = { tok , incrementBooleanError , }
		- PARENT = { str , tok , astParent , == , && , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"incrementBooleanError"
		- NEIGH  = { incrementBooleanError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"reportError"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

70 :	"tok"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"Severity"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"style"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"CWE398"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"checkBitwiseOnBoolean"
		- NEIGH  = { checkBitwiseOnBoolean , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

85 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , ! , if , }

85 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , ! , if , }

85 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , ! , if , }

85 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , ! , if , }

85 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , ! , if , }

85 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , ! , if , }

86 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"if"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

90 :	"!"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

90 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

90 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

91 :	"return"
		- NEIGH  = { return , }
		- PARENT = { inconclusive , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

93 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

93 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

93 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

93 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

94 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

94 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

94 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

94 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

94 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

94 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

95 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

95 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"if"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"tok"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"isBinaryOp"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"&&"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"tok"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"str"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"=="
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"||"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"tok"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"str"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

96 :	"=="
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

97 :	"if"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"astIsBool"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"tok"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"astOperand1"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"||"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"astIsBool"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"tok"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

97 :	"astOperand2"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

98 :	"if"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"tok"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"astOperand2"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"variable"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"&&"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"tok"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"astOperand2"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"variable"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"nameToken"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"=="
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"tok"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

98 :	"astOperand2"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

99 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"std"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"string"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"expression"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"astIsBool"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"astOperand1"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"astOperand1"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"expressionString"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

100 :	"expressionString"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

101 :	"bitwiseOnBooleanError"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

101 :	"tok"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

101 :	"expression"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

101 :	"tok"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

101 :	"str"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

101 :	"=="
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

108 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"bitwiseOnBooleanError"
		- NEIGH  = { bitwiseOnBooleanError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"op"
		- NEIGH  = { op , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"reportError"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"tok"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"Severity"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"style"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"+"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"expression"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"+"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"+"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"op"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"+"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"CWE398"
		- NEIGH  = { CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"checkComparisonOfBoolWithInt"
		- NEIGH  = { checkComparisonOfBoolWithInt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"if"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"!"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"mSettings"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"isEnabled"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"Settings"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"WARNING"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"||"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"!"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"mTokenizer"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

122 :	"isCPP"
		- NEIGH  = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

123 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

125 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

125 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

125 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

125 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

125 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , WARNING , Settings , isCPP , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

126 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

126 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

126 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

126 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

126 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

126 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

127 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

127 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

128 :	"if"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"!"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"tok"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"isComparisonOp"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"||"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"!"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"tok"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

128 :	"isBinaryOp"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

129 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"Token"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

130 :	"*"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

130 :	"left"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

130 :	"tok"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

130 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

131 :	"Token"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

131 :	"*"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

131 :	"right"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

131 :	"tok"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

131 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

132 :	"if"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

132 :	"left"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

132 :	"isBoolean"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

132 :	"&&"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

132 :	"right"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

132 :	"varId"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

133 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

134 :	"comparisonOfBoolWithInvalidComparator"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"right"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"left"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"str"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"if"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

136 :	"left"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

136 :	"varId"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

136 :	"&&"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

136 :	"right"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

136 :	"isBoolean"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

137 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

137 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

138 :	"comparisonOfBoolWithInvalidComparator"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

138 :	"right"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

138 :	"left"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

138 :	"str"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"comparisonOfBoolWithInvalidComparator"
		- NEIGH  = { comparisonOfBoolWithInvalidComparator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

147 :	"reportError"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

147 :	"tok"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

147 :	"Severity"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

147 :	"warning"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"+"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"expression"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"+"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

158 :	"tokenIsFunctionReturningBool"
		- NEIGH  = { tokenIsFunctionReturningBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

158 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

158 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

158 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

160 :	"Function"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

160 :	"*"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

160 :	"func"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

160 :	"tok"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

160 :	"function"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

161 :	"if"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

161 :	"func"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

161 :	"&&"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

161 :	"Token"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

161 :	"Match"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

161 :	"tok"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

162 :	"if"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"func"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"tokenDef"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"&&"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"Token"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"Match"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"func"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"tokenDef"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

162 :	"previous"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

163 :	"return"
		- NEIGH  = { return , }
		- PARENT = { previous , Match , Token , if , tokenDef , && , func , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

166 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , Token , && , func , Match , if , }
		- SUCC   = { }

169 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

169 :	"checkComparisonOfFuncReturningBool"
		- NEIGH  = { checkComparisonOfFuncReturningBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

171 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

171 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

171 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

171 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

171 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

171 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

172 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

174 :	"if"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

174 :	"!"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

174 :	"mTokenizer"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

174 :	"isCPP"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

175 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , ! , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

177 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

177 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

177 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

177 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

177 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

179 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

179 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

179 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

179 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

179 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

179 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

180 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

180 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

181 :	"if"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"!"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"isComparisonOp"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

181 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

182 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , str , isComparisonOp , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

183 :	"Token"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

183 :	"*"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

183 :	"firstToken"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

183 :	"tok"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

183 :	"previous"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

184 :	"if"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

184 :	"tok"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

184 :	"strAt"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

184 :	"-"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

184 :	"=="
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

185 :	"firstToken"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"firstToken"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"link"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"previous"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"Token"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

187 :	"*"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

187 :	"secondToken"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

187 :	"tok"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

187 :	"next"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

188 :	"while"
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

188 :	"secondToken"
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

188 :	"str"
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

188 :	"=="
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

189 :	"secondToken"
		- NEIGH  = { next , secondToken , }
		- PARENT = { == , str , secondToken , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

189 :	"secondToken"
		- NEIGH  = { next , secondToken , }
		- PARENT = { == , str , secondToken , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

189 :	"next"
		- NEIGH  = { next , secondToken , }
		- PARENT = { == , str , secondToken , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

191 :	"firstIsFunctionReturningBool"
		- NEIGH  = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , secondToken , while , }
		- SUCC   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }

191 :	"tokenIsFunctionReturningBool"
		- NEIGH  = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , secondToken , while , }
		- SUCC   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }

191 :	"firstToken"
		- NEIGH  = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , secondToken , while , }
		- SUCC   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }

192 :	"secondIsFunctionReturningBool"
		- NEIGH  = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- SUCC   = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }

192 :	"tokenIsFunctionReturningBool"
		- NEIGH  = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- SUCC   = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }

192 :	"secondToken"
		- NEIGH  = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- SUCC   = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }

193 :	"if"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

193 :	"firstIsFunctionReturningBool"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

193 :	"&&"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

193 :	"secondIsFunctionReturningBool"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

194 :	"comparisonOfTwoFuncsReturningBoolError"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"firstToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"next"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"firstToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"str"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"secondToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"str"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

195 :	"if"
		- NEIGH  = { firstIsFunctionReturningBool , if , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { str , secondIsFunctionReturningBool , firstToken , if , next , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

195 :	"firstIsFunctionReturningBool"
		- NEIGH  = { firstIsFunctionReturningBool , if , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { str , secondIsFunctionReturningBool , firstToken , if , next , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

196 :	"comparisonOfFuncReturningBoolError"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"firstToken"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"next"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"firstToken"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"str"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"if"
		- NEIGH  = { secondIsFunctionReturningBool , if , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

197 :	"secondIsFunctionReturningBool"
		- NEIGH  = { secondIsFunctionReturningBool , if , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

198 :	"comparisonOfFuncReturningBoolError"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"secondToken"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"previous"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"secondToken"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"str"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"comparisonOfFuncReturningBoolError"
		- NEIGH  = { comparisonOfFuncReturningBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"reportError"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"tok"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"Severity"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"style"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"+"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"expression"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"+"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"CWE398"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"comparisonOfTwoFuncsReturningBoolError"
		- NEIGH  = { comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"expression1"
		- NEIGH  = { expression1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"expression2"
		- NEIGH  = { expression2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"reportError"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"tok"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"Severity"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"style"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"+"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"expression1"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"+"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"+"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"expression2"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

217 :	"+"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

219 :	"CWE398"
		- NEIGH  = { CWE398 , expression2 , + , Severity , style , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"checkComparisonOfBoolWithBool"
		- NEIGH  = { checkComparisonOfBoolWithBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"if"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

230 :	"!"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

230 :	"mSettings"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

230 :	"experimental"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

231 :	"return"
		- NEIGH  = { return , }
		- PARENT = { experimental , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

233 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

233 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

233 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

233 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

233 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

234 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

236 :	"if"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

236 :	"!"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

236 :	"mTokenizer"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

236 :	"isCPP"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , ! , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

239 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

239 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

239 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

239 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

239 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

241 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

241 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

241 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

241 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

241 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

241 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

242 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

242 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

243 :	"if"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"!"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"isComparisonOp"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

243 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

244 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , str , isComparisonOp , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

245 :	"firstTokenBool"
		- NEIGH  = { firstTokenBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { previous , tok , firstToken , * , Token , }

247 :	"Token"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

247 :	"*"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

247 :	"firstToken"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

247 :	"tok"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

247 :	"previous"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

248 :	"if"
		- NEIGH  = { firstToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , firstToken , isBool , if , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { firstTokenBool , ! , if , }

248 :	"firstToken"
		- NEIGH  = { firstToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , firstToken , isBool , if , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { firstTokenBool , ! , if , }

248 :	"varId"
		- NEIGH  = { firstToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , firstToken , isBool , if , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { firstTokenBool , ! , if , }

249 :	"if"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

249 :	"isBool"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

249 :	"firstToken"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

249 :	"variable"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

250 :	"firstTokenBool"
		- NEIGH  = { firstTokenBool , }
		- PARENT = { variable , firstToken , isBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

253 :	"if"
		- NEIGH  = { firstTokenBool , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { firstToken , varId , if , }
		- SUCC   = { secondTokenBool , }

253 :	"!"
		- NEIGH  = { firstTokenBool , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { firstToken , varId , if , }
		- SUCC   = { secondTokenBool , }

253 :	"firstTokenBool"
		- NEIGH  = { firstTokenBool , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { firstToken , varId , if , }
		- SUCC   = { secondTokenBool , }

254 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { firstTokenBool , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"secondTokenBool"
		- NEIGH  = { secondTokenBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , ! , if , }
		- SUCC   = { next , tok , secondToken , * , Token , }

257 :	"Token"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

257 :	"*"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

257 :	"secondToken"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

257 :	"tok"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

257 :	"next"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

258 :	"if"
		- NEIGH  = { secondToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , secondToken , isBool , if , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { secondTokenBool , if , }

258 :	"secondToken"
		- NEIGH  = { secondToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , secondToken , isBool , if , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { secondTokenBool , if , }

258 :	"varId"
		- NEIGH  = { secondToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , secondToken , isBool , if , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { secondTokenBool , if , }

259 :	"if"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

259 :	"isBool"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

259 :	"secondToken"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

259 :	"variable"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

260 :	"secondTokenBool"
		- NEIGH  = { secondTokenBool , }
		- PARENT = { variable , secondToken , isBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

263 :	"if"
		- NEIGH  = { secondTokenBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PRED   = { secondToken , varId , if , }
		- SUCC   = { }

263 :	"secondTokenBool"
		- NEIGH  = { secondTokenBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PRED   = { secondToken , varId , if , }
		- SUCC   = { }

264 :	"comparisonOfBoolWithBoolError"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

264 :	"firstToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

264 :	"next"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

264 :	"secondToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

264 :	"str"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"comparisonOfBoolWithBoolError"
		- NEIGH  = { comparisonOfBoolWithBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"reportError"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"tok"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"Severity"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"style"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

274 :	"+"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

274 :	"expression"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

274 :	"+"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

276 :	"CWE398"
		- NEIGH  = { CWE398 , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

280 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

280 :	"checkAssignBoolToPointer"
		- NEIGH  = { checkAssignBoolToPointer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

282 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

282 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

282 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

282 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

282 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

283 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

283 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

283 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

283 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

283 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

283 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

284 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

284 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

285 :	"if"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"str"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"=="
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"astIsPointer"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"astOperand1"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"astIsBool"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

285 :	"astOperand2"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

286 :	"assignBoolToPointerError"
		- NEIGH  = { tok , assignBoolToPointerError , }
		- PARENT = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

286 :	"tok"
		- NEIGH  = { tok , assignBoolToPointerError , }
		- PARENT = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"assignBoolToPointerError"
		- NEIGH  = { assignBoolToPointerError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

294 :	"reportError"
		- NEIGH  = { error , CWE587 , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

294 :	"tok"
		- NEIGH  = { error , CWE587 , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

294 :	"Severity"
		- NEIGH  = { error , CWE587 , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

294 :	"error"
		- NEIGH  = { error , CWE587 , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

295 :	"CWE587"
		- NEIGH  = { error , CWE587 , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

300 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

300 :	"checkComparisonOfBoolExpressionWithInt"
		- NEIGH  = { checkComparisonOfBoolExpressionWithInt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

302 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

302 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

302 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

302 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

302 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

302 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

303 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

305 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

305 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

305 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

305 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

305 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

307 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

307 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

307 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

307 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

307 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

307 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

308 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

308 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { isName , && , isOp , || , astOperand1 , astIsBool , numInRhs , boolExpr , * , ! , Token , isNumber , Match , isComparisonOp , tok , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

309 :	"if"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

309 :	"!"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

309 :	"tok"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

309 :	"isComparisonOp"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

310 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isComparisonOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

312 :	"Token"
		- NEIGH  = { numTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , ! , if , }
		- SUCC   = { boolExpr , * , Token , }

312 :	"*"
		- NEIGH  = { numTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , ! , if , }
		- SUCC   = { boolExpr , * , Token , }

312 :	"numTok"
		- NEIGH  = { numTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , ! , if , }
		- SUCC   = { boolExpr , * , Token , }

313 :	"Token"
		- NEIGH  = { boolExpr , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , * , Token , }
		- SUCC   = { numInRhs , }

313 :	"*"
		- NEIGH  = { boolExpr , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , * , Token , }
		- SUCC   = { numInRhs , }

313 :	"boolExpr"
		- NEIGH  = { boolExpr , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , * , Token , }
		- SUCC   = { numInRhs , }

314 :	"numInRhs"
		- NEIGH  = { numInRhs , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { boolExpr , * , Token , }
		- SUCC   = { astOperand1 , tok , astIsBool , if , }

315 :	"if"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

315 :	"astIsBool"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

315 :	"tok"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

315 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

316 :	"boolExpr"
		- NEIGH  = { astOperand1 , tok , boolExpr , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , numTok , }

316 :	"tok"
		- NEIGH  = { astOperand1 , tok , boolExpr , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , numTok , }

316 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , boolExpr , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , numTok , }

317 :	"numTok"
		- NEIGH  = { astOperand2 , tok , numTok , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

317 :	"tok"
		- NEIGH  = { astOperand2 , tok , numTok , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

317 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , numTok , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

318 :	"numInRhs"
		- NEIGH  = { numInRhs , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , numTok , }
		- SUCC   = { }

319 :	"if"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

319 :	"astIsBool"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

319 :	"tok"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

319 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

320 :	"boolExpr"
		- NEIGH  = { astOperand2 , tok , boolExpr , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , numTok , }

320 :	"tok"
		- NEIGH  = { astOperand2 , tok , boolExpr , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , numTok , }

320 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , boolExpr , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , numTok , }

321 :	"numTok"
		- NEIGH  = { tok , astOperand1 , numTok , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

321 :	"tok"
		- NEIGH  = { tok , astOperand1 , numTok , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

321 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , numTok , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

322 :	"numInRhs"
		- NEIGH  = { numInRhs , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , numTok , }
		- SUCC   = { }

324 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

327 :	"if"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

327 :	"!"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

327 :	"numTok"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

327 :	"||"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

327 :	"!"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

327 :	"boolExpr"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

328 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { boolExpr , numTok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

330 :	"if"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"boolExpr"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"isOp"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"&&"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"numTok"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"isName"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"&&"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"Token"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"Match"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

330 :	"tok"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

333 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

335 :	"if"
		- NEIGH  = { numTok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- SUCC   = { isNumber , numTok , if , }

335 :	"astIsBool"
		- NEIGH  = { numTok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- SUCC   = { isNumber , numTok , if , }

335 :	"numTok"
		- NEIGH  = { numTok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- SUCC   = { isNumber , numTok , if , }

336 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { numTok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"if"
		- NEIGH  = { isNumber , numTok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { mTokenizer , astIsIntegral , isCPP , comparisonOfBoolExpressionWithIntError , tok , Match , numInRhs , if , str , toLongNumber , MathLib , num , && , == , Token , bigint , numTok , }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { }

338 :	"numTok"
		- NEIGH  = { isNumber , numTok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { mTokenizer , astIsIntegral , isCPP , comparisonOfBoolExpressionWithIntError , tok , Match , numInRhs , if , str , toLongNumber , MathLib , num , && , == , Token , bigint , numTok , }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { }

338 :	"isNumber"
		- NEIGH  = { isNumber , numTok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { mTokenizer , astIsIntegral , isCPP , comparisonOfBoolExpressionWithIntError , tok , Match , numInRhs , if , str , toLongNumber , MathLib , num , && , == , Token , bigint , numTok , }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { }

339 :	"MathLib"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

339 :	"bigint"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

339 :	"num"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

339 :	"MathLib"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

339 :	"toLongNumber"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

339 :	"numTok"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

339 :	"str"
		- NEIGH  = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

340 :	"if"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

340 :	"num"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

340 :	"=="
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

340 :	"&&"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

341 :	"numInRhs"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

341 :	"Token"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

341 :	"Match"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

341 :	"tok"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

342 :	"Token"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

342 :	"Match"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

342 :	"tok"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { str , toLongNumber , num , bigint , numTok , MathLib , }
		- SUCC   = { Match , Token , numInRhs , && , == , tok , num , if , }

343 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { Match , Token , numInRhs , && , == , tok , num , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

344 :	"if"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

344 :	"num"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

344 :	"=="
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

344 :	"&&"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

345 :	"numInRhs"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

345 :	"Token"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

345 :	"Match"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

345 :	"tok"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

346 :	"Token"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

346 :	"Match"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

346 :	"tok"
		- NEIGH  = { Match , Token , numInRhs , && , == , tok , num , if , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { continue , }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { tok , comparisonOfBoolExpressionWithIntError , }

347 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { Match , Token , numInRhs , && , == , tok , num , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

348 :	"comparisonOfBoolExpressionWithIntError"
		- NEIGH  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { }

348 :	"tok"
		- NEIGH  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { }
		- PRED   = { Match , Token , numInRhs , && , == , tok , num , if , }
		- SUCC   = { }

349 :	"if"
		- NEIGH  = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PRED   = { }
		- SUCC   = { }

349 :	"astIsIntegral"
		- NEIGH  = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PRED   = { }
		- SUCC   = { }

349 :	"numTok"
		- NEIGH  = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PRED   = { }
		- SUCC   = { }

349 :	"&&"
		- NEIGH  = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PRED   = { }
		- SUCC   = { }

349 :	"mTokenizer"
		- NEIGH  = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PRED   = { }
		- SUCC   = { }

349 :	"isCPP"
		- NEIGH  = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- PARENT = { isNumber , numTok , if , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PRED   = { }
		- SUCC   = { }

350 :	"comparisonOfBoolExpressionWithIntError"
		- NEIGH  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

350 :	"tok"
		- NEIGH  = { tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { isCPP , mTokenizer , && , if , numTok , astIsIntegral , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"comparisonOfBoolExpressionWithIntError"
		- NEIGH  = { comparisonOfBoolExpressionWithIntError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"n0o1"
		- NEIGH  = { n0o1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

357 :	"if"
		- NEIGH  = { n0o1 , if , }
		- PARENT = { }
		- CHILD  = { CWE398 , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

357 :	"n0o1"
		- NEIGH  = { n0o1 , if , }
		- PARENT = { }
		- CHILD  = { CWE398 , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

358 :	"reportError"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"tok"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"Severity"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"warning"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

359 :	"CWE398"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"reportError"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"tok"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"Severity"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"warning"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

362 :	"CWE398"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { n0o1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

366 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

366 :	"pointerArithBool"
		- NEIGH  = { pointerArithBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

368 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

368 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

368 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

368 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

368 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

370 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , tok , next , eDo , eWhile , && , classDef , Token , eFor , astOperand2 , eIf , Scope , != , type , * , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

370 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , tok , next , eDo , eWhile , && , classDef , Token , eFor , astOperand2 , eIf , Scope , != , type , * , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

370 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , tok , next , eDo , eWhile , && , classDef , Token , eFor , astOperand2 , eIf , Scope , != , type , * , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

370 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , tok , next , eDo , eWhile , && , classDef , Token , eFor , astOperand2 , eIf , Scope , != , type , * , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

370 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , tok , next , eDo , eWhile , && , classDef , Token , eFor , astOperand2 , eIf , Scope , != , type , * , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

370 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , tok , next , eDo , eWhile , && , classDef , Token , eFor , astOperand2 , eIf , Scope , != , type , * , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

371 :	"if"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"type"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"!="
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"Scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"eIf"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"&&"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"type"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"!="
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"Scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"eWhile"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"&&"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"type"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"!="
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"Scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"eDo"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"&&"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"type"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"!="
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"Scope"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"eFor"
		- NEIGH  = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

372 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

373 :	"Token"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"*"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"tok"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"scope"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"classDef"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"next"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"astOperand2"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , && , eFor , eIf , Scope , != , type , scope , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

374 :	"if"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

374 :	"scope"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

374 :	"type"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

374 :	"=="
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

374 :	"Scope"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

374 :	"eFor"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

375 :	"tok"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

375 :	"Token"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

375 :	"findsimplematch"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

375 :	"scope"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

375 :	"classDef"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

375 :	"tokAt"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

376 :	"if"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand2 , tok , }
		- PRED   = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- SUCC   = { tok , if , }

376 :	"tok"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand2 , tok , }
		- PRED   = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- SUCC   = { tok , if , }

377 :	"tok"
		- NEIGH  = { astOperand2 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

377 :	"tok"
		- NEIGH  = { astOperand2 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

377 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

378 :	"if"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand1 , tok , }
		- PRED   = { tok , if , }
		- SUCC   = { }

378 :	"tok"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand1 , tok , }
		- PRED   = { tok , if , }
		- SUCC   = { }

379 :	"tok"
		- NEIGH  = { astOperand1 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

379 :	"tok"
		- NEIGH  = { astOperand1 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

379 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"if"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

380 :	"scope"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

380 :	"type"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

380 :	"=="
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

380 :	"Scope"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

380 :	"eDo"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

381 :	"tok"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"scope"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"bodyEnd"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"tokAt"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"scope"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"bodyEnd"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"tokAt"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

381 :	"astOperand2"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

383 :	"pointerArithBoolCond"
		- NEIGH  = { tok , pointerArithBoolCond , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eFor , == , type , Scope , scope , if , }
		- SUCC   = { }

383 :	"tok"
		- NEIGH  = { tok , pointerArithBoolCond , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eFor , == , type , Scope , scope , if , }
		- SUCC   = { }

387 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

387 :	"pointerArithBoolCond"
		- NEIGH  = { pointerArithBoolCond , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

387 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

387 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

387 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

389 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

389 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

389 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

390 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

391 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

391 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

391 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

391 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

392 :	"pointerArithBoolCond"
		- NEIGH  = { astOperand1 , tok , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , pointerArithBoolCond , }

392 :	"tok"
		- NEIGH  = { astOperand1 , tok , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , pointerArithBoolCond , }

392 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , pointerArithBoolCond , }

393 :	"pointerArithBoolCond"
		- NEIGH  = { tok , astOperand2 , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , pointerArithBoolCond , }
		- SUCC   = { return , }

393 :	"tok"
		- NEIGH  = { tok , astOperand2 , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , pointerArithBoolCond , }
		- SUCC   = { return , }

393 :	"astOperand2"
		- NEIGH  = { tok , astOperand2 , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , pointerArithBoolCond , }
		- SUCC   = { return , }

394 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , astOperand2 , pointerArithBoolCond , }
		- SUCC   = { }

396 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

397 :	"return"
		- NEIGH  = { return , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"if"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"isBinaryOp"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"astOperand1"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"isName"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"astOperand1"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"variable"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"astOperand1"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"variable"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"isPointer"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

403 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

403 :	"astOperand2"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

403 :	"isNumber"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

404 :	"pointerArithBoolError"
		- NEIGH  = { tok , pointerArithBoolError , }
		- PARENT = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

404 :	"tok"
		- NEIGH  = { tok , pointerArithBoolError , }
		- PARENT = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"pointerArithBoolError"
		- NEIGH  = { pointerArithBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"reportError"
		- NEIGH  = { CWE571 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"tok"
		- NEIGH  = { CWE571 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

410 :	"Severity"
		- NEIGH  = { CWE571 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

410 :	"error"
		- NEIGH  = { CWE571 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

413 :	"CWE571"
		- NEIGH  = { CWE571 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

416 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

416 :	"checkAssignBoolToFloat"
		- NEIGH  = { checkAssignBoolToFloat , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

418 :	"if"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

418 :	"!"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

418 :	"mTokenizer"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

418 :	"isCPP"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

419 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , ! , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

420 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

420 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

420 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

420 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

420 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

420 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

421 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

422 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

422 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

422 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

422 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

422 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

423 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

423 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

423 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

423 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

423 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

423 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

424 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

425 :	"if"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"str"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"=="
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"astIsFloat"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"astOperand1"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"astIsBool"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"astOperand2"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

426 :	"assignBoolToFloatError"
		- NEIGH  = { tok , assignBoolToFloatError , }
		- PARENT = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

426 :	"tok"
		- NEIGH  = { tok , assignBoolToFloatError , }
		- PARENT = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

432 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

432 :	"assignBoolToFloatError"
		- NEIGH  = { assignBoolToFloatError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

432 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

432 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

432 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"reportError"
		- NEIGH  = { CWE704 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"tok"
		- NEIGH  = { CWE704 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"Severity"
		- NEIGH  = { CWE704 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"style"
		- NEIGH  = { CWE704 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

435 :	"CWE704"
		- NEIGH  = { CWE704 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

438 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

438 :	"returnValueOfFunctionReturningBool"
		- NEIGH  = { returnValueOfFunctionReturningBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

440 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

440 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

440 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

440 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

440 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

440 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

441 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

443 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

443 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

443 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

443 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

443 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

445 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

445 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

445 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

445 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

445 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

445 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

446 :	"if"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"!"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"scope"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"function"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"&&"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"Token"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"Match"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"scope"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"function"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"retDef"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

447 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { retDef , Match , Token , && , function , scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"for"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"Token"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"*"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"bodyStart"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"&&"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"!="
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"bodyEnd"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

449 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

451 :	"Token"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

451 :	"*"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

451 :	"tok2"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

451 :	"findLambdaEndToken"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

451 :	"tok"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

452 :	"if"
		- NEIGH  = { tok2 , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isClassOrStruct , && , scope , if , tok2 , tok , }
		- PRED   = { tok , findLambdaEndToken , tok2 , * , Token , }
		- SUCC   = { }

452 :	"tok2"
		- NEIGH  = { tok2 , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isClassOrStruct , && , scope , if , tok2 , tok , }
		- PRED   = { tok , findLambdaEndToken , tok2 , * , Token , }
		- SUCC   = { }

453 :	"tok"
		- NEIGH  = { tok2 , tok , }
		- PARENT = { tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"tok2"
		- NEIGH  = { tok2 , tok , }
		- PARENT = { tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

454 :	"if"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"tok"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"scope"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"&&"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"tok"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"scope"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"isClassOrStruct"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

455 :	"tok"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"tok"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"scope"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"bodyEnd"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

456 :	"if"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"Token"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"simpleMatch"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"getValueGE"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"mSettings"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"||"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"getValueLE"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"-"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"mSettings"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"!"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"Token"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"Match"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

459 :	"returnValueBoolError"
		- NEIGH  = { tok , returnValueBoolError , }
		- PARENT = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

459 :	"tok"
		- NEIGH  = { tok , returnValueBoolError , }
		- PARENT = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"returnValueBoolError"
		- NEIGH  = { returnValueBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

466 :	"reportError"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

466 :	"tok"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

466 :	"Severity"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

466 :	"style"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

