34 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"CWE398"
		- NEIGH  = { CWE398 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"instance"
		- NEIGH  = { instance , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"assertWithSideEffects"
		- NEIGH  = { assertWithSideEffects , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

43 :	"if"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

43 :	"!"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

43 :	"mSettings"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

43 :	"severity"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

43 :	"isEnabled"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

43 :	"Severity"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

43 :	"warning"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

44 :	"return"
		- NEIGH  = { return , }
		- PARENT = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"for"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"Token"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"*"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"mTokenizer"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"list"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"front"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

46 :	"next"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

47 :	"!"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

47 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

47 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

47 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

48 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , simpleMatch , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"Token"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

50 :	"*"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

50 :	"endTok"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

50 :	"tok"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

50 :	"next"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

50 :	"link"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

51 :	"for"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"Token"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"*"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"tok"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"next"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"!="
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"endTok"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

51 :	"next"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , simpleMatch , isStatic , tok2 , && , ! , function , * , f , Token , Function , scope , functionScope , != , nestedIn , tok , tmp , eFunction , checkVariableAssignment , bodyStart , if , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"if"
		- NEIGH  = { tmp , simpleMatch , Token , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { linkAt , tmp , }
		- PRED   = { }
		- SUCC   = { tok , scope , tmp , checkVariableAssignment , }

52 :	"Token"
		- NEIGH  = { tmp , simpleMatch , Token , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { linkAt , tmp , }
		- PRED   = { }
		- SUCC   = { tok , scope , tmp , checkVariableAssignment , }

52 :	"simpleMatch"
		- NEIGH  = { tmp , simpleMatch , Token , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { linkAt , tmp , }
		- PRED   = { }
		- SUCC   = { tok , scope , tmp , checkVariableAssignment , }

52 :	"tmp"
		- NEIGH  = { tmp , simpleMatch , Token , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { linkAt , tmp , }
		- PRED   = { }
		- SUCC   = { tok , scope , tmp , checkVariableAssignment , }

53 :	"tmp"
		- NEIGH  = { linkAt , tmp , }
		- PARENT = { tmp , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"tmp"
		- NEIGH  = { linkAt , tmp , }
		- PARENT = { tmp , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"linkAt"
		- NEIGH  = { linkAt , tmp , }
		- PARENT = { tmp , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"checkVariableAssignment"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tmp , simpleMatch , Token , if , }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

55 :	"tmp"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tmp , simpleMatch , Token , if , }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

55 :	"tok"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tmp , simpleMatch , Token , if , }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

55 :	"scope"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tmp , simpleMatch , Token , if , }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

57 :	"if"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

57 :	"tmp"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

57 :	"tokType"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

57 :	"!="
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

57 :	"Token"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

57 :	"eFunction"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

58 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eFunction , Token , != , tmp , tokType , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"Function"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

60 :	"*"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

60 :	"f"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

60 :	"tmp"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

60 :	"function"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

61 :	"if"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"f"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"nestedIn"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"isClassOrStruct"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"&&"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"!"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"f"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"isStatic"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"&&"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"!"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"f"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

61 :	"isConst"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

62 :	"sideEffectInAssertError"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

62 :	"tmp"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

62 :	"f"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

62 :	"name"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

63 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { name , tmp , f , sideEffectInAssertError , }
		- SUCC   = { }

65 :	"Scope"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

65 :	"*"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

65 :	"scope"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

65 :	"f"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

65 :	"functionScope"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

66 :	"if"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { f , * , functionScope , scope , Scope , }
		- SUCC   = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }

66 :	"!"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { f , * , functionScope , scope , Scope , }
		- SUCC   = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }

66 :	"scope"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { f , * , functionScope , scope , Scope , }
		- SUCC   = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }

66 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

68 :	"for"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"Token"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"*"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"bodyStart"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"!="
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"bodyEnd"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

68 :	"next"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

69 :	"if"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"!"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"tok2"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"isAssignmentOp"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"&&"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"tok2"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"tokType"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"!="
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"Token"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

69 :	"eIncDecOp"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

70 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

72 :	"Variable"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

72 :	"*"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

72 :	"var"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

72 :	"tok2"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

72 :	"previous"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

72 :	"variable"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

73 :	"if"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"!"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"||"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"isLocal"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"||"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"isArgument"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"&&"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"!"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"isReference"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"&&"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"!"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

73 :	"isPointer"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

74 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"if"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"var"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"isArgument"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"&&"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"var"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"isPointer"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"&&"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"tok2"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"strAt"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"-"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

75 :	"!="
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

76 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"noReturnInScope"
		- NEIGH  = { noReturnInScope , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- SUCC   = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }

79 :	"for"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"Token"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"*"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"bodyStart"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"!="
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"bodyEnd"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

79 :	"next"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

80 :	"if"
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

80 :	"rt"
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

80 :	"str"
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

80 :	"!="
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

80 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { != , str , rt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

81 :	"if"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

81 :	"inSameScope"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

81 :	"rt"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

81 :	"tok2"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

82 :	"noReturnInScope"
		- NEIGH  = { noReturnInScope , }
		- PARENT = { tok2 , rt , inSameScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

83 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok2 , rt , inSameScope , if , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , }
		- SUCC   = { }

86 :	"if"
		- NEIGH  = { noReturnInScope , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- SUCC   = { name , tmp , f , sideEffectInAssertError , }

86 :	"noReturnInScope"
		- NEIGH  = { noReturnInScope , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- SUCC   = { name , tmp , f , sideEffectInAssertError , }

86 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { noReturnInScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"sideEffectInAssertError"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

88 :	"tmp"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

88 :	"f"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

88 :	"name"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

89 :	"break"
		- NEIGH  = { break , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { name , tmp , f , sideEffectInAssertError , }
		- SUCC   = { }

92 :	"tok"
		- NEIGH  = { endTok , tok , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { endTok , != , tok , tmp , * , next , Token , for , }
		- SUCC   = { }

92 :	"endTok"
		- NEIGH  = { endTok , tok , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { endTok , != , tok , tmp , * , next , Token , for , }
		- SUCC   = { }

98 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"sideEffectInAssertError"
		- NEIGH  = { sideEffectInAssertError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"functionName"
		- NEIGH  = { functionName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"tok"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"warning"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"+"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"functionName"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"+"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"normal"
		- NEIGH  = { Certainty , CWE398 , functionName , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"assignmentInAssertError"
		- NEIGH  = { assignmentInAssertError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"reportError"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"tok"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"Severity"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"warning"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

114 :	"+"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

114 :	"varname"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

114 :	"+"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

119 :	"CWE398"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

119 :	"Certainty"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

119 :	"normal"
		- NEIGH  = { CWE398 , Certainty , varname , + , normal , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"checkVariableAssignment"
		- NEIGH  = { checkVariableAssignment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"assignTok"
		- NEIGH  = { assignTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"Scope"
		- NEIGH  = { Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"assertionScope"
		- NEIGH  = { assertionScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

125 :	"if"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"!"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"assignTok"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"isAssignmentOp"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"&&"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"assignTok"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"tokType"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"!="
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"Token"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

125 :	"eIncDecOp"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

126 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

128 :	"Variable"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

128 :	"*"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

128 :	"var"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

128 :	"assignTok"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

128 :	"astOperand1"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

128 :	"variable"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

129 :	"if"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { variable , var , assignTok , astOperand1 , * , Variable , }
		- SUCC   = { scope , != , var , assertionScope , if , }

129 :	"!"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { variable , var , assignTok , astOperand1 , * , Variable , }
		- SUCC   = { scope , != , var , assertionScope , if , }

129 :	"var"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { variable , var , assignTok , astOperand1 , * , Variable , }
		- SUCC   = { scope , != , var , assertionScope , if , }

130 :	"return"
		- NEIGH  = { return , }
		- PARENT = { ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

133 :	"if"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

133 :	"assertionScope"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

133 :	"!="
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

133 :	"var"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

133 :	"scope"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

134 :	"Scope"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

134 :	"*"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

134 :	"s"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

134 :	"var"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

134 :	"scope"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

135 :	"while"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

135 :	"s"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

135 :	"&&"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

135 :	"s"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

135 :	"!="
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

135 :	"assertionScope"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

136 :	"s"
		- NEIGH  = { nestedIn , s , }
		- PARENT = { != , && , assertionScope , s , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"s"
		- NEIGH  = { nestedIn , s , }
		- PARENT = { != , && , assertionScope , s , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"nestedIn"
		- NEIGH  = { nestedIn , s , }
		- PARENT = { != , && , assertionScope , s , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

137 :	"if"
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

137 :	"s"
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

137 :	"=="
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

137 :	"assertionScope"
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

138 :	"return"
		- NEIGH  = { return , }
		- PARENT = { == , assertionScope , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"if"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"assignTok"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"isAssignmentOp"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"||"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"assignTok"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"tokType"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"=="
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"Token"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

142 :	"eIncDecOp"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

143 :	"if"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { name , var , assignTok , assignmentInAssertError , }

143 :	"var"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { name , var , assignTok , assignmentInAssertError , }

143 :	"isConst"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { name , var , assignTok , assignmentInAssertError , }

144 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

146 :	"assignmentInAssertError"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

146 :	"assignTok"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

146 :	"var"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

146 :	"name"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

151 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"inSameScope"
		- NEIGH  = { inSameScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"returnTok"
		- NEIGH  = { returnTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"assignTok"
		- NEIGH  = { assignTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"return"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"returnTok"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"scope"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"=="
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"assignTok"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"scope"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

