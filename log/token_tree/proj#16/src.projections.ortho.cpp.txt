7 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

7 :	"ortho"
		- NEIGH  = { ortho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

10 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

11 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

19 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

20 :	"sinph0"
		- NEIGH  = { sinph0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

21 :	"cosph0"
		- NEIGH  = { cosph0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

22 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

22 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"forward_error"
		- NEIGH  = { forward_error , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , P , lam , lp , proj_todeg , proj_log_trace , }

29 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , P , lam , lp , proj_todeg , proj_log_trace , }

29 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , P , lam , lp , proj_todeg , proj_log_trace , }

30 :	"proj_log_trace"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

30 :	"P"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

31 :	"proj_todeg"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

31 :	"lp"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

31 :	"lam"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

31 :	"proj_todeg"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

31 :	"lp"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

31 :	"phi"
		- NEIGH  = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { xy , return , }

32 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- SUCC   = { }

32 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , P , lam , lp , proj_todeg , proj_log_trace , }
		- SUCC   = { }

35 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"ortho_s_forward"
		- NEIGH  = { ortho_s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

36 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

37 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

37 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , cosphi , coslam , }

38 :	"coslam"
		- NEIGH  = { sinphi , cosphi , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { HUGE_VAL , x , xy , }

38 :	"cosphi"
		- NEIGH  = { sinphi , cosphi , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { HUGE_VAL , x , xy , }

38 :	"sinphi"
		- NEIGH  = { sinphi , cosphi , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { HUGE_VAL , x , xy , }

40 :	"xy"
		- NEIGH  = { HUGE_VAL , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { HUGE_VAL , y , xy , }

40 :	"x"
		- NEIGH  = { HUGE_VAL , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { HUGE_VAL , y , xy , }

40 :	"HUGE_VAL"
		- NEIGH  = { HUGE_VAL , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , coslam , }
		- SUCC   = { HUGE_VAL , y , xy , }

40 :	"xy"
		- NEIGH  = { HUGE_VAL , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , x , xy , }
		- SUCC   = { phi , lp , cos , cosphi , }

40 :	"y"
		- NEIGH  = { HUGE_VAL , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , x , xy , }
		- SUCC   = { phi , lp , cos , cosphi , }

40 :	"HUGE_VAL"
		- NEIGH  = { HUGE_VAL , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , x , xy , }
		- SUCC   = { phi , lp , cos , cosphi , }

42 :	"cosphi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , y , xy , }
		- SUCC   = { lam , lp , cos , coslam , }

42 :	"cos"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , y , xy , }
		- SUCC   = { lam , lp , cos , coslam , }

42 :	"lp"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , y , xy , }
		- SUCC   = { lam , lp , cos , coslam , }

42 :	"phi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , y , xy , }
		- SUCC   = { lam , lp , cos , coslam , }

43 :	"coslam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

43 :	"cos"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

43 :	"lp"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

43 :	"lam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { mode , Q , switch , }

44 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , > , phi0 , P , fabs , S_POLE , N_POLE , cosph0 , + , sinph0 , sinphi , coslam , OBLIQ , break , phi , lp , if , sin , y , Q , xy , - , cosphi , < , EQUIT , * , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { lam , lp , sin , cosphi , * , x , xy , }

44 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , > , phi0 , P , fabs , S_POLE , N_POLE , cosph0 , + , sinph0 , sinphi , coslam , OBLIQ , break , phi , lp , if , sin , y , Q , xy , - , cosphi , < , EQUIT , * , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { lam , lp , sin , cosphi , * , x , xy , }

44 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , > , phi0 , P , fabs , S_POLE , N_POLE , cosph0 , + , sinph0 , sinphi , coslam , OBLIQ , break , phi , lp , if , sin , y , Q , xy , - , cosphi , < , EQUIT , * , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { lam , lp , sin , cosphi , * , x , xy , }

45 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , coslam , * , < , cosphi , if , }

46 :	"if"
		- NEIGH  = { - , coslam , * , < , cosphi , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , y , xy , }

46 :	"cosphi"
		- NEIGH  = { - , coslam , * , < , cosphi , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , y , xy , }

46 :	"*"
		- NEIGH  = { - , coslam , * , < , cosphi , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , y , xy , }

46 :	"coslam"
		- NEIGH  = { - , coslam , * , < , cosphi , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , y , xy , }

46 :	"<"
		- NEIGH  = { - , coslam , * , < , cosphi , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , y , xy , }

46 :	"-"
		- NEIGH  = { - , coslam , * , < , cosphi , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , y , xy , }

47 :	"return"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , coslam , * , < , cosphi , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"forward_error"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , coslam , * , < , cosphi , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"P"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , coslam , * , < , cosphi , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"lp"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , coslam , * , < , cosphi , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"xy"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , coslam , * , < , cosphi , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"xy"
		- NEIGH  = { phi , lp , sin , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , * , < , cosphi , if , }
		- SUCC   = { break , }

48 :	"y"
		- NEIGH  = { phi , lp , sin , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , * , < , cosphi , if , }
		- SUCC   = { break , }

48 :	"sin"
		- NEIGH  = { phi , lp , sin , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , * , < , cosphi , if , }
		- SUCC   = { break , }

48 :	"lp"
		- NEIGH  = { phi , lp , sin , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , * , < , cosphi , if , }
		- SUCC   = { break , }

48 :	"phi"
		- NEIGH  = { phi , lp , sin , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , * , < , cosphi , if , }
		- SUCC   = { break , }

49 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , y , xy , }
		- SUCC   = { OBLIQ , }

50 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }

51 :	"if"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"Q"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"sinph0"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"*"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"sinphi"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"sin"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"lp"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"phi"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"+"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"Q"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"cosph0"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"*"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"cosphi"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"*"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"coslam"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"<"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

51 :	"-"
		- NEIGH  = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }

52 :	"return"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"forward_error"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"P"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"lp"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"xy"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"xy"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"y"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"Q"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"cosph0"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"sinphi"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"-"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"Q"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"sinph0"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"cosphi"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

53 :	"coslam"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , cosphi , cosph0 , phi , if , sin , lp , sinphi , * , sinph0 , coslam , Q , + , }
		- SUCC   = { break , }

54 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosphi , sinph0 , - , sinphi , cosph0 , Q , * , y , coslam , xy , }
		- SUCC   = { N_POLE , }

55 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , coslam , }

56 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

56 :	"-"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

56 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

58 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }

59 :	"if"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"fabs"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"lp"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"phi"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"-"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"P"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"phi0"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"-"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	">"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

59 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { lp , xy , forward_error , P , return , }
		- PRED   = { S_POLE , }
		- SUCC   = { coslam , cosphi , * , y , xy , }

60 :	"return"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"forward_error"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"P"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"lp"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"xy"
		- NEIGH  = { lp , xy , forward_error , P , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"xy"
		- NEIGH  = { coslam , cosphi , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- SUCC   = { break , }

61 :	"y"
		- NEIGH  = { coslam , cosphi , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- SUCC   = { break , }

61 :	"cosphi"
		- NEIGH  = { coslam , cosphi , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- SUCC   = { break , }

61 :	"*"
		- NEIGH  = { coslam , cosphi , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- SUCC   = { break , }

61 :	"coslam"
		- NEIGH  = { coslam , cosphi , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , > , phi , lp , P , fabs , phi0 , if , }
		- SUCC   = { break , }

62 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosphi , * , y , xy , }
		- SUCC   = { }

64 :	"xy"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

64 :	"x"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

64 :	"cosphi"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

64 :	"*"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

64 :	"sin"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

64 :	"lp"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

64 :	"lam"
		- NEIGH  = { lam , lp , sin , cosphi , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

65 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , x , xy , }
		- SUCC   = { }

65 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , cosphi , * , x , xy , }
		- SUCC   = { }

69 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"ortho_s_inverse"
		- NEIGH  = { ortho_s_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

70 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

70 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

71 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

71 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { sinc , cosc , rh , }

72 :	"rh"
		- NEIGH  = { sinc , cosc , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { HUGE_VAL , lam , lp , }

72 :	"cosc"
		- NEIGH  = { sinc , cosc , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { HUGE_VAL , lam , lp , }

72 :	"sinc"
		- NEIGH  = { sinc , cosc , rh , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { HUGE_VAL , lam , lp , }

74 :	"lp"
		- NEIGH  = { HUGE_VAL , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinc , cosc , rh , }
		- SUCC   = { HUGE_VAL , phi , lp , }

74 :	"lam"
		- NEIGH  = { HUGE_VAL , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinc , cosc , rh , }
		- SUCC   = { HUGE_VAL , phi , lp , }

74 :	"HUGE_VAL"
		- NEIGH  = { HUGE_VAL , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinc , cosc , rh , }
		- SUCC   = { HUGE_VAL , phi , lp , }

74 :	"lp"
		- NEIGH  = { HUGE_VAL , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , lam , lp , }
		- SUCC   = { > , x , xy , rh , y , hypot , sinc , if , }

74 :	"phi"
		- NEIGH  = { HUGE_VAL , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , lam , lp , }
		- SUCC   = { > , x , xy , rh , y , hypot , sinc , if , }

74 :	"HUGE_VAL"
		- NEIGH  = { HUGE_VAL , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE_VAL , lam , lp , }
		- SUCC   = { > , x , xy , rh , y , hypot , sinc , if , }

76 :	"if"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"sinc"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"rh"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"hypot"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"xy"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"x"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"xy"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	"y"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

76 :	">"
		- NEIGH  = { > , x , xy , rh , y , hypot , sinc , if , }
		- PARENT = { }
		- CHILD  = { > , - , sinc , if , }
		- PRED   = { HUGE_VAL , phi , lp , }
		- SUCC   = { sinc , * , sqrt , - , cosc , }

77 :	"if"
		- NEIGH  = { > , - , sinc , if , }
		- PARENT = { > , x , xy , rh , y , hypot , sinc , if , }
		- CHILD  = { lp , proj_log_trace , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { }
		- SUCC   = { sinc , }

77 :	"sinc"
		- NEIGH  = { > , - , sinc , if , }
		- PARENT = { > , x , xy , rh , y , hypot , sinc , if , }
		- CHILD  = { lp , proj_log_trace , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { }
		- SUCC   = { sinc , }

77 :	"-"
		- NEIGH  = { > , - , sinc , if , }
		- PARENT = { > , x , xy , rh , y , hypot , sinc , if , }
		- CHILD  = { lp , proj_log_trace , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { }
		- SUCC   = { sinc , }

77 :	">"
		- NEIGH  = { > , - , sinc , if , }
		- PARENT = { > , x , xy , rh , y , hypot , sinc , if , }
		- CHILD  = { lp , proj_log_trace , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { }
		- SUCC   = { sinc , }

78 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , proj_log_trace , }

78 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , proj_log_trace , }

78 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , proj_log_trace , }

79 :	"proj_log_trace"
		- NEIGH  = { P , proj_log_trace , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { lp , return , }

79 :	"P"
		- NEIGH  = { P , proj_log_trace , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { lp , return , }

80 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { P , proj_log_trace , }
		- SUCC   = { }

80 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { > , - , sinc , if , }
		- CHILD  = { }
		- PRED   = { P , proj_log_trace , }
		- SUCC   = { }

82 :	"sinc"
		- NEIGH  = { sinc , }
		- PARENT = { > , x , xy , rh , y , hypot , sinc , if , }
		- CHILD  = { }
		- PRED   = { > , - , sinc , if , }
		- SUCC   = { }

84 :	"cosc"
		- NEIGH  = { sinc , * , sqrt , - , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , x , xy , rh , y , hypot , sinc , if , }
		- SUCC   = { <= , rh , fabs , if , }

84 :	"sqrt"
		- NEIGH  = { sinc , * , sqrt , - , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , x , xy , rh , y , hypot , sinc , if , }
		- SUCC   = { <= , rh , fabs , if , }

84 :	"-"
		- NEIGH  = { sinc , * , sqrt , - , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , x , xy , rh , y , hypot , sinc , if , }
		- SUCC   = { <= , rh , fabs , if , }

84 :	"sinc"
		- NEIGH  = { sinc , * , sqrt , - , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , x , xy , rh , y , hypot , sinc , if , }
		- SUCC   = { <= , rh , fabs , if , }

84 :	"*"
		- NEIGH  = { sinc , * , sqrt , - , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , x , xy , rh , y , hypot , sinc , if , }
		- SUCC   = { <= , rh , fabs , if , }

84 :	"sinc"
		- NEIGH  = { sinc , * , sqrt , - , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , x , xy , rh , y , hypot , sinc , if , }
		- SUCC   = { <= , rh , fabs , if , }

85 :	"if"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , x , atan2 , EQUIT , OBLIQ , && , - , || , y , < , xy , phi , == , mode , Q , switch , P , lp , lam , phi0 , }
		- PRED   = { sinc , * , sqrt , - , cosc , }
		- SUCC   = { lp , return , }

85 :	"fabs"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , x , atan2 , EQUIT , OBLIQ , && , - , || , y , < , xy , phi , == , mode , Q , switch , P , lp , lam , phi0 , }
		- PRED   = { sinc , * , sqrt , - , cosc , }
		- SUCC   = { lp , return , }

85 :	"rh"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , x , atan2 , EQUIT , OBLIQ , && , - , || , y , < , xy , phi , == , mode , Q , switch , P , lp , lam , phi0 , }
		- PRED   = { sinc , * , sqrt , - , cosc , }
		- SUCC   = { lp , return , }

85 :	"<="
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { }
		- CHILD  = { M_HALFPI , x , atan2 , EQUIT , OBLIQ , && , - , || , y , < , xy , phi , == , mode , Q , switch , P , lp , lam , phi0 , }
		- PRED   = { sinc , * , sqrt , - , cosc , }
		- SUCC   = { lp , return , }

86 :	"lp"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lam , lp , }

86 :	"phi"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lam , lp , }

86 :	"P"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lam , lp , }

86 :	"phi0"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lam , lp , }

87 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi0 , P , phi , lp , }
		- SUCC   = { }

87 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi0 , P , phi , lp , }
		- SUCC   = { }

89 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { fabs , if , rh , + , sinph0 , xy , - , Q , OBLIQ , sinchk , cosc , cosph0 , x , EQUIT , * , *= , / , S_POLE , acos , >= , phi , lp , break , y , sinc , N_POLE , }
		- PRED   = { }
		- SUCC   = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }

89 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { fabs , if , rh , + , sinph0 , xy , - , Q , OBLIQ , sinchk , cosc , cosph0 , x , EQUIT , * , *= , / , S_POLE , acos , >= , phi , lp , break , y , sinc , N_POLE , }
		- PRED   = { }
		- SUCC   = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }

89 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { fabs , if , rh , + , sinph0 , xy , - , Q , OBLIQ , sinchk , cosc , cosph0 , x , EQUIT , * , *= , / , S_POLE , acos , >= , phi , lp , break , y , sinc , N_POLE , }
		- PRED   = { }
		- SUCC   = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }

90 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , y , xy , }

91 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { sinc , acos , phi , lp , }

91 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { sinc , acos , phi , lp , }

91 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { sinc , acos , phi , lp , }

91 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { sinc , acos , phi , lp , }

91 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { sinc , acos , phi , lp , }

92 :	"lp"
		- NEIGH  = { sinc , acos , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

92 :	"phi"
		- NEIGH  = { sinc , acos , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

92 :	"acos"
		- NEIGH  = { sinc , acos , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

92 :	"sinc"
		- NEIGH  = { sinc , acos , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { break , }

93 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , acos , phi , lp , }
		- SUCC   = { S_POLE , }

94 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sinc , acos , - , phi , lp , }

95 :	"lp"
		- NEIGH  = { sinc , acos , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

95 :	"phi"
		- NEIGH  = { sinc , acos , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

95 :	"-"
		- NEIGH  = { sinc , acos , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

95 :	"acos"
		- NEIGH  = { sinc , acos , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

95 :	"sinc"
		- NEIGH  = { sinc , acos , - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

96 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , acos , - , phi , lp , }
		- SUCC   = { EQUIT , }

97 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { rh , sinc , * , y , xy , / , phi , lp , }

98 :	"lp"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"phi"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"xy"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"y"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"*"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"sinc"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"/"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

98 :	"rh"
		- NEIGH  = { rh , sinc , * , y , xy , / , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sinc , *= , x , xy , }

99 :	"xy"
		- NEIGH  = { sinc , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , sinc , * , y , xy , / , phi , lp , }
		- SUCC   = { rh , cosc , * , y , xy , }

99 :	"x"
		- NEIGH  = { sinc , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , sinc , * , y , xy , / , phi , lp , }
		- SUCC   = { rh , cosc , * , y , xy , }

99 :	"*="
		- NEIGH  = { sinc , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , sinc , * , y , xy , / , phi , lp , }
		- SUCC   = { rh , cosc , * , y , xy , }

99 :	"sinc"
		- NEIGH  = { sinc , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , sinc , * , y , xy , / , phi , lp , }
		- SUCC   = { rh , cosc , * , y , xy , }

100 :	"xy"
		- NEIGH  = { rh , cosc , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , *= , x , xy , }
		- SUCC   = { sinchk , }

100 :	"y"
		- NEIGH  = { rh , cosc , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , *= , x , xy , }
		- SUCC   = { sinchk , }

100 :	"cosc"
		- NEIGH  = { rh , cosc , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , *= , x , xy , }
		- SUCC   = { sinchk , }

100 :	"*"
		- NEIGH  = { rh , cosc , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , *= , x , xy , }
		- SUCC   = { sinchk , }

100 :	"rh"
		- NEIGH  = { rh , cosc , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinc , *= , x , xy , }
		- SUCC   = { sinchk , }

101 :	"sinchk"
		- NEIGH  = { sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , cosc , * , y , xy , }
		- SUCC   = { OBLIQ , }

102 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinchk , }
		- SUCC   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }

103 :	"lp"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"phi"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"cosc"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"*"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"Q"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"sinph0"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"+"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"xy"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"y"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"*"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"sinc"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"*"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"Q"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"cosph0"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"/"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

103 :	"rh"
		- NEIGH  = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }

104 :	"xy"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"y"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"cosc"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"-"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"Q"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"sinph0"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"*"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"lp"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"phi"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"*"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

104 :	"rh"
		- NEIGH  = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , cosph0 , xy , + , sinph0 , Q , sinc , rh , y , * , cosc , phi , lp , }
		- SUCC   = { cosph0 , Q , sinc , * , *= , x , xy , }

105 :	"xy"
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

105 :	"x"
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

105 :	"*="
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

105 :	"sinc"
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

105 :	"*"
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

105 :	"Q"
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

105 :	"cosph0"
		- NEIGH  = { cosph0 , Q , sinc , * , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { rh , phi , lp , sinph0 , Q , - , * , cosc , y , xy , }
		- SUCC   = { >= , phi , lp , if , fabs , sinchk , }

106 :	"sinchk"
		- NEIGH  = { >= , phi , lp , if , fabs , sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosph0 , Q , sinc , * , *= , x , xy , }
		- SUCC   = { break , }

107 :	"if"
		- NEIGH  = { >= , phi , lp , if , fabs , sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { M_HALFPI , asin , < , - , phi , lp , }
		- PRED   = { cosph0 , Q , sinc , * , *= , x , xy , }
		- SUCC   = { break , }

107 :	"fabs"
		- NEIGH  = { >= , phi , lp , if , fabs , sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { M_HALFPI , asin , < , - , phi , lp , }
		- PRED   = { cosph0 , Q , sinc , * , *= , x , xy , }
		- SUCC   = { break , }

107 :	"lp"
		- NEIGH  = { >= , phi , lp , if , fabs , sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { M_HALFPI , asin , < , - , phi , lp , }
		- PRED   = { cosph0 , Q , sinc , * , *= , x , xy , }
		- SUCC   = { break , }

107 :	"phi"
		- NEIGH  = { >= , phi , lp , if , fabs , sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { M_HALFPI , asin , < , - , phi , lp , }
		- PRED   = { cosph0 , Q , sinc , * , *= , x , xy , }
		- SUCC   = { break , }

107 :	">="
		- NEIGH  = { >= , phi , lp , if , fabs , sinchk , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { M_HALFPI , asin , < , - , phi , lp , }
		- PRED   = { cosph0 , Q , sinc , * , *= , x , xy , }
		- SUCC   = { break , }

108 :	"lp"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"phi"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"lp"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"phi"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"<"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"-"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , < , - , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"lp"
		- NEIGH  = { asin , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"phi"
		- NEIGH  = { asin , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"asin"
		- NEIGH  = { asin , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"lp"
		- NEIGH  = { asin , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"phi"
		- NEIGH  = { asin , phi , lp , }
		- PARENT = { >= , phi , lp , if , fabs , sinchk , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

111 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { >= , phi , lp , if , fabs , sinchk , }
		- SUCC   = { }

113 :	"lp"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"lam"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"xy"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"y"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"=="
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"&&"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"Q"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"mode"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"=="
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"OBLIQ"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"||"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"Q"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"mode"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"=="
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

113 :	"EQUIT"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"xy"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"x"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"=="
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"xy"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"x"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"<"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"-"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

114 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

115 :	"atan2"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

115 :	"xy"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

115 :	"x"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

115 :	"xy"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

115 :	"y"
		- NEIGH  = { M_HALFPI , x , atan2 , EQUIT , - , y , || , Q , mode , && , == , < , xy , OBLIQ , lam , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

117 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { }

117 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { }

122 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"ortho"
		- NEIGH  = { ortho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

123 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

124 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

124 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

124 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

125 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

125 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

125 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

125 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { <= , M_HALFPI , - , if , phi0 , P , fabs , }

126 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { <= , M_HALFPI , - , if , phi0 , P , fabs , }

126 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { <= , M_HALFPI , - , if , phi0 , P , fabs , }

128 :	"if"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"fabs"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"fabs"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"P"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"phi0"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"-"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"M_HALFPI"
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

128 :	"<="
		- NEIGH  = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { > , if , N_POLE , phi0 , < , S_POLE , mode , fabs , P , Q , }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { ortho_s_inverse , inv , P , }

129 :	"Q"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"mode"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"P"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"phi0"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"<"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"S_POLE"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"N_POLE"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"if"
		- NEIGH  = { phi0 , > , P , fabs , if , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { EQUIT , cos , phi0 , mode , sin , sinph0 , cosph0 , P , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

130 :	"fabs"
		- NEIGH  = { phi0 , > , P , fabs , if , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { EQUIT , cos , phi0 , mode , sin , sinph0 , cosph0 , P , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

130 :	"P"
		- NEIGH  = { phi0 , > , P , fabs , if , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { EQUIT , cos , phi0 , mode , sin , sinph0 , cosph0 , P , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

130 :	"phi0"
		- NEIGH  = { phi0 , > , P , fabs , if , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { EQUIT , cos , phi0 , mode , sin , sinph0 , cosph0 , P , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

130 :	">"
		- NEIGH  = { phi0 , > , P , fabs , if , }
		- PARENT = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { EQUIT , cos , phi0 , mode , sin , sinph0 , cosph0 , P , OBLIQ , Q , }
		- PRED   = { }
		- SUCC   = { }

131 :	"Q"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , phi0 , sinph0 , P , Q , }

131 :	"mode"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , phi0 , sinph0 , P , Q , }

131 :	"OBLIQ"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , phi0 , sinph0 , P , Q , }

132 :	"Q"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

132 :	"sinph0"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

132 :	"sin"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

132 :	"P"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

132 :	"phi0"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

133 :	"Q"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

133 :	"cosph0"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

133 :	"cos"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

133 :	"P"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

133 :	"phi0"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

135 :	"Q"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"mode"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"EQUIT"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { phi0 , > , P , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"P"
		- NEIGH  = { ortho_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { ortho_s_forward , fwd , P , }

136 :	"inv"
		- NEIGH  = { ortho_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { ortho_s_forward , fwd , P , }

136 :	"ortho_s_inverse"
		- NEIGH  = { ortho_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { <= , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { ortho_s_forward , fwd , P , }

137 :	"P"
		- NEIGH  = { ortho_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ortho_s_inverse , inv , P , }
		- SUCC   = { es , P , }

137 :	"fwd"
		- NEIGH  = { ortho_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ortho_s_inverse , inv , P , }
		- SUCC   = { es , P , }

137 :	"ortho_s_forward"
		- NEIGH  = { ortho_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ortho_s_inverse , inv , P , }
		- SUCC   = { es , P , }

138 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ortho_s_forward , fwd , P , }
		- SUCC   = { P , return , }

138 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ortho_s_forward , fwd , P , }
		- SUCC   = { P , return , }

140 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

140 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

