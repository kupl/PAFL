41 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"AITOFF"
		- NEIGH  = { AITOFF , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

43 :	"WINKEL_TRIPEL"
		- NEIGH  = { WINKEL_TRIPEL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"cosphi1"
		- NEIGH  = { cosphi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"aitoff"
		- NEIGH  = { aitoff , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

56 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

56 :	"wintri"
		- NEIGH  = { wintri , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"s_forward"
		- NEIGH  = { s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

66 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

67 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

67 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { d , c , }

68 :	"c"
		- NEIGH  = { d , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { c , * , lp , lam , acos , if , d , != , phi , cos , }

68 :	"d"
		- NEIGH  = { d , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { c , * , lp , lam , acos , if , d , != , phi , cos , }

70 :	"if"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"d"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"acos"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"cos"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"lp"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"phi"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"*"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"cos"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"c"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"*"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"lp"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"lam"
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

70 :	"!="
		- NEIGH  = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- PARENT = { }
		- CHILD  = { c , sin , lp , *= , / , phi , cos , d , y , * , x , xy , }
		- PRED   = { d , c , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

71 :	"xy"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"x"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"*"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"d"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"*"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"cos"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"lp"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"phi"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"*"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"sin"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"c"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"*"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"xy"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"y"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"/"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"sin"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

71 :	"d"
		- NEIGH  = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , y , *= , * , d , xy , }

72 :	"xy"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"y"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"*="
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"d"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"*"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"sin"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"lp"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

72 :	"phi"
		- NEIGH  = { phi , lp , sin , y , *= , * , d , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { c , sin , lp , / , phi , cos , d , y , * , x , xy , }
		- SUCC   = { }

74 :	"xy"
		- NEIGH  = { y , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

74 :	"x"
		- NEIGH  = { y , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

74 :	"xy"
		- NEIGH  = { y , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

74 :	"y"
		- NEIGH  = { y , x , xy , }
		- PARENT = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"if"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , y , * , lp , + , lam , x , xy , }
		- PRED   = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- SUCC   = { xy , return , }

75 :	"Q"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , y , * , lp , + , lam , x , xy , }
		- PRED   = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- SUCC   = { xy , return , }

75 :	"mode"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , y , * , lp , + , lam , x , xy , }
		- PRED   = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- SUCC   = { xy , return , }

75 :	"=="
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , y , * , lp , + , lam , x , xy , }
		- PRED   = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- SUCC   = { xy , return , }

75 :	"WINKEL_TRIPEL"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , y , * , lp , + , lam , x , xy , }
		- PRED   = { c , * , lp , lam , acos , if , d , != , phi , cos , }
		- SUCC   = { xy , return , }

76 :	"xy"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"x"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"xy"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"x"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"+"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"lp"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"lam"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"*"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"Q"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"cosphi1"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

76 :	"*"
		- NEIGH  = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , xy , }

77 :	"xy"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"y"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"xy"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"y"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"+"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"lp"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"phi"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

77 :	"*"
		- NEIGH  = { phi , lp , + , * , y , xy , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , * , lp , + , lam , x , xy , }
		- SUCC   = { }

79 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { }

79 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { }

103 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

103 :	"s_inverse"
		- NEIGH  = { s_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

103 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

103 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

103 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

103 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

103 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

104 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

105 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

105 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { MAXROUND , round , MAXITER , iter , }

106 :	"iter"
		- NEIGH  = { MAXROUND , round , MAXITER , iter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }

106 :	"MAXITER"
		- NEIGH  = { MAXROUND , round , MAXITER , iter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }

106 :	"round"
		- NEIGH  = { MAXROUND , round , MAXITER , iter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }

106 :	"MAXROUND"
		- NEIGH  = { MAXROUND , round , MAXITER , iter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }

107 :	"EPSILON"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"D"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"C"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"f1"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"f2"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"f1p"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"f1l"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"f2p"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"f2l"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"dp"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"dl"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"sl"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"sp"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"cp"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"cl"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"x"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

107 :	"y"
		- NEIGH  = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , MAXITER , iter , }
		- SUCC   = { y , && , EPSILON , x , xy , < , fabs , if , }

109 :	"if"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"fabs"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"xy"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"x"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"<"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"EPSILON"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"&&"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"fabs"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"xy"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"y"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"<"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"EPSILON"
		- NEIGH  = { y , && , EPSILON , x , xy , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { return , lam , phi , lp , }
		- PRED   = { y , cl , cp , sp , sl , dl , f2l , x , f2p , dp , D , f1p , f1l , f2 , C , f1 , EPSILON , }
		- SUCC   = { y , xy , phi , lp , }

109 :	"lp"
		- NEIGH  = { phi , lp , }
		- PARENT = { y , && , EPSILON , x , xy , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lam , lp , }

109 :	"phi"
		- NEIGH  = { phi , lp , }
		- PARENT = { y , && , EPSILON , x , xy , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lam , lp , }

109 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { y , && , EPSILON , x , xy , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , }
		- SUCC   = { lp , return , }

109 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { y , && , EPSILON , x , xy , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , }
		- SUCC   = { lp , return , }

109 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { y , && , EPSILON , x , xy , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

109 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { y , && , EPSILON , x , xy , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

112 :	"lp"
		- NEIGH  = { y , xy , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , && , EPSILON , x , xy , < , fabs , if , }
		- SUCC   = { x , xy , lam , lp , }

112 :	"phi"
		- NEIGH  = { y , xy , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , && , EPSILON , x , xy , < , fabs , if , }
		- SUCC   = { x , xy , lam , lp , }

112 :	"xy"
		- NEIGH  = { y , xy , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , && , EPSILON , x , xy , < , fabs , if , }
		- SUCC   = { x , xy , lam , lp , }

112 :	"y"
		- NEIGH  = { y , xy , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , && , EPSILON , x , xy , < , fabs , if , }
		- SUCC   = { x , xy , lam , lp , }

112 :	"lp"
		- NEIGH  = { x , xy , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , phi , lp , }
		- SUCC   = { iter , }

112 :	"lam"
		- NEIGH  = { x , xy , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , phi , lp , }
		- SUCC   = { iter , }

112 :	"xy"
		- NEIGH  = { x , xy , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , phi , lp , }
		- SUCC   = { iter , }

112 :	"x"
		- NEIGH  = { x , xy , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , phi , lp , }
		- SUCC   = { iter , }

114 :	"iter"
		- NEIGH  = { iter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , xy , lam , lp , }
		- SUCC   = { * , lam , lp , sin , sl , }

116 :	"sl"
		- NEIGH  = { * , lam , lp , sin , sl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { iter , }
		- SUCC   = { * , lam , lp , cos , cl , }

116 :	"sin"
		- NEIGH  = { * , lam , lp , sin , sl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { iter , }
		- SUCC   = { * , lam , lp , cos , cl , }

116 :	"lp"
		- NEIGH  = { * , lam , lp , sin , sl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { iter , }
		- SUCC   = { * , lam , lp , cos , cl , }

116 :	"lam"
		- NEIGH  = { * , lam , lp , sin , sl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { iter , }
		- SUCC   = { * , lam , lp , cos , cl , }

116 :	"*"
		- NEIGH  = { * , lam , lp , sin , sl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { iter , }
		- SUCC   = { * , lam , lp , cos , cl , }

116 :	"cl"
		- NEIGH  = { * , lam , lp , cos , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , sin , sl , }
		- SUCC   = { phi , lp , sin , sp , }

116 :	"cos"
		- NEIGH  = { * , lam , lp , cos , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , sin , sl , }
		- SUCC   = { phi , lp , sin , sp , }

116 :	"lp"
		- NEIGH  = { * , lam , lp , cos , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , sin , sl , }
		- SUCC   = { phi , lp , sin , sp , }

116 :	"lam"
		- NEIGH  = { * , lam , lp , cos , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , sin , sl , }
		- SUCC   = { phi , lp , sin , sp , }

116 :	"*"
		- NEIGH  = { * , lam , lp , cos , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , sin , sl , }
		- SUCC   = { phi , lp , sin , sp , }

117 :	"sp"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , cos , cl , }
		- SUCC   = { phi , lp , cos , cp , }

117 :	"sin"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , cos , cl , }
		- SUCC   = { phi , lp , cos , cp , }

117 :	"lp"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , cos , cl , }
		- SUCC   = { phi , lp , cos , cp , }

117 :	"phi"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , lam , lp , cos , cl , }
		- SUCC   = { phi , lp , cos , cp , }

117 :	"cp"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { cl , * , cp , D , }

117 :	"cos"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { cl , * , cp , D , }

117 :	"lp"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { cl , * , cp , D , }

117 :	"phi"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { cl , * , cp , D , }

118 :	"D"
		- NEIGH  = { cl , * , cp , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { D , - , * , C , }

118 :	"cp"
		- NEIGH  = { cl , * , cp , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { D , - , * , C , }

118 :	"*"
		- NEIGH  = { cl , * , cp , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { D , - , * , C , }

118 :	"cl"
		- NEIGH  = { cl , * , cp , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { D , - , * , C , }

119 :	"C"
		- NEIGH  = { D , - , * , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cl , * , cp , D , }
		- SUCC   = { C , pow , / , acos , D , }

119 :	"-"
		- NEIGH  = { D , - , * , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cl , * , cp , D , }
		- SUCC   = { C , pow , / , acos , D , }

119 :	"D"
		- NEIGH  = { D , - , * , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cl , * , cp , D , }
		- SUCC   = { C , pow , / , acos , D , }

119 :	"*"
		- NEIGH  = { D , - , * , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cl , * , cp , D , }
		- SUCC   = { C , pow , / , acos , D , }

119 :	"D"
		- NEIGH  = { D , - , * , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cl , * , cp , D , }
		- SUCC   = { C , pow , / , acos , D , }

120 :	"D"
		- NEIGH  = { C , pow , / , acos , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { D , - , * , C , }
		- SUCC   = { sl , cp , D , C , * , f1 , }

120 :	"acos"
		- NEIGH  = { C , pow , / , acos , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { D , - , * , C , }
		- SUCC   = { sl , cp , D , C , * , f1 , }

120 :	"D"
		- NEIGH  = { C , pow , / , acos , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { D , - , * , C , }
		- SUCC   = { sl , cp , D , C , * , f1 , }

120 :	"/"
		- NEIGH  = { C , pow , / , acos , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { D , - , * , C , }
		- SUCC   = { sl , cp , D , C , * , f1 , }

120 :	"pow"
		- NEIGH  = { C , pow , / , acos , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { D , - , * , C , }
		- SUCC   = { sl , cp , D , C , * , f1 , }

120 :	"C"
		- NEIGH  = { C , pow , / , acos , D , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { D , - , * , C , }
		- SUCC   = { sl , cp , D , C , * , f1 , }

121 :	"f1"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"*"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"D"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"*"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"C"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"*"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"cp"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"*"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

121 :	"sl"
		- NEIGH  = { sl , cp , D , C , * , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , pow , / , acos , D , }
		- SUCC   = { sp , C , * , D , f2 , }

122 :	"f2"
		- NEIGH  = { sp , C , * , D , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sl , cp , D , C , * , f1 , }
		- SUCC   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }

122 :	"D"
		- NEIGH  = { sp , C , * , D , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sl , cp , D , C , * , f1 , }
		- SUCC   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }

122 :	"*"
		- NEIGH  = { sp , C , * , D , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sl , cp , D , C , * , f1 , }
		- SUCC   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }

122 :	"C"
		- NEIGH  = { sp , C , * , D , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sl , cp , D , C , * , f1 , }
		- SUCC   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }

122 :	"*"
		- NEIGH  = { sp , C , * , D , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sl , cp , D , C , * , f1 , }
		- SUCC   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }

122 :	"sp"
		- NEIGH  = { sp , C , * , D , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sl , cp , D , C , * , f1 , }
		- SUCC   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }

123 :	"f1p"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"*"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"sl"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"*"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"cl"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"*"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"sp"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"*"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"cp"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"/"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"C"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"-"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"D"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"*"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"sp"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"*"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

123 :	"sl"
		- NEIGH  = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , C , * , D , f2 , }
		- SUCC   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }

124 :	"f1l"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"cp"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"cp"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"sl"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"sl"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"/"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"C"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"+"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"D"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"cp"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"cl"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"sp"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"*"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

124 :	"sp"
		- NEIGH  = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , D , C , / , cl , sp , cp , sl , * , f1p , }
		- SUCC   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }

125 :	"f2p"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"sp"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"*"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"sp"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"*"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"cl"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"/"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"C"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"+"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"D"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"*"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"sl"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"*"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"sl"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"*"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

125 :	"cp"
		- NEIGH  = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sp , cl , + , D , C , / , f1l , cp , sl , * , }
		- SUCC   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }

126 :	"f2l"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"sp"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"cp"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"sl"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"/"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"C"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"-"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"D"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"sp"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"cp"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"cp"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"sl"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"*"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

126 :	"cl"
		- NEIGH  = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cp , sl , + , D , C , f2p , / , * , sp , cl , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

127 :	"if"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { f2p , f1l , phi , cosphi1 , f2 , Q , *= , f1p , f2l , + , lp , lam , * , f1 , }
		- PRED   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- SUCC   = { x , xy , -= , f1 , }

127 :	"Q"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { f2p , f1l , phi , cosphi1 , f2 , Q , *= , f1p , f2l , + , lp , lam , * , f1 , }
		- PRED   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- SUCC   = { x , xy , -= , f1 , }

127 :	"mode"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { f2p , f1l , phi , cosphi1 , f2 , Q , *= , f1p , f2l , + , lp , lam , * , f1 , }
		- PRED   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- SUCC   = { x , xy , -= , f1 , }

127 :	"=="
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { f2p , f1l , phi , cosphi1 , f2 , Q , *= , f1p , f2l , + , lp , lam , * , f1 , }
		- PRED   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- SUCC   = { x , xy , -= , f1 , }

127 :	"WINKEL_TRIPEL"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { f2p , f1l , phi , cosphi1 , f2 , Q , *= , f1p , f2l , + , lp , lam , * , f1 , }
		- PRED   = { cl , - , D , C , cp , sl , sp , * , / , f2l , }
		- SUCC   = { x , xy , -= , f1 , }

128 :	"f1"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"*"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"f1"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"+"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"lp"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"lam"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"*"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"Q"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

128 :	"cosphi1"
		- NEIGH  = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , * , + , f2 , }

129 :	"f2"
		- NEIGH  = { phi , lp , * , + , f2 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- SUCC   = { *= , f1p , }

129 :	"*"
		- NEIGH  = { phi , lp , * , + , f2 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- SUCC   = { *= , f1p , }

129 :	"f2"
		- NEIGH  = { phi , lp , * , + , f2 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- SUCC   = { *= , f1p , }

129 :	"+"
		- NEIGH  = { phi , lp , * , + , f2 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- SUCC   = { *= , f1p , }

129 :	"lp"
		- NEIGH  = { phi , lp , * , + , f2 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- SUCC   = { *= , f1p , }

129 :	"phi"
		- NEIGH  = { phi , lp , * , + , f2 , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , + , lam , * , lp , f1 , }
		- SUCC   = { *= , f1p , }

130 :	"f1p"
		- NEIGH  = { *= , f1p , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , + , f2 , }
		- SUCC   = { Q , + , cosphi1 , * , f1l , }

130 :	"*="
		- NEIGH  = { *= , f1p , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , + , f2 , }
		- SUCC   = { Q , + , cosphi1 , * , f1l , }

131 :	"f1l"
		- NEIGH  = { Q , + , cosphi1 , * , f1l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { *= , f1p , }
		- SUCC   = { + , * , f2p , }

131 :	"*"
		- NEIGH  = { Q , + , cosphi1 , * , f1l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { *= , f1p , }
		- SUCC   = { + , * , f2p , }

131 :	"f1l"
		- NEIGH  = { Q , + , cosphi1 , * , f1l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { *= , f1p , }
		- SUCC   = { + , * , f2p , }

131 :	"+"
		- NEIGH  = { Q , + , cosphi1 , * , f1l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { *= , f1p , }
		- SUCC   = { + , * , f2p , }

131 :	"Q"
		- NEIGH  = { Q , + , cosphi1 , * , f1l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { *= , f1p , }
		- SUCC   = { + , * , f2p , }

131 :	"cosphi1"
		- NEIGH  = { Q , + , cosphi1 , * , f1l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { *= , f1p , }
		- SUCC   = { + , * , f2p , }

132 :	"f2p"
		- NEIGH  = { + , * , f2p , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { Q , + , cosphi1 , * , f1l , }
		- SUCC   = { *= , f2l , }

132 :	"*"
		- NEIGH  = { + , * , f2p , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { Q , + , cosphi1 , * , f1l , }
		- SUCC   = { *= , f2l , }

132 :	"f2p"
		- NEIGH  = { + , * , f2p , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { Q , + , cosphi1 , * , f1l , }
		- SUCC   = { *= , f2l , }

132 :	"+"
		- NEIGH  = { + , * , f2p , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { Q , + , cosphi1 , * , f1l , }
		- SUCC   = { *= , f2l , }

133 :	"f2l"
		- NEIGH  = { *= , f2l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { + , * , f2p , }
		- SUCC   = { }

133 :	"*="
		- NEIGH  = { *= , f2l , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { + , * , f2p , }
		- SUCC   = { }

135 :	"f1"
		- NEIGH  = { x , xy , -= , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { y , xy , -= , f2 , }

135 :	"-="
		- NEIGH  = { x , xy , -= , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { y , xy , -= , f2 , }

135 :	"xy"
		- NEIGH  = { x , xy , -= , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { y , xy , -= , f2 , }

135 :	"x"
		- NEIGH  = { x , xy , -= , f1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { y , xy , -= , f2 , }

135 :	"f2"
		- NEIGH  = { y , xy , -= , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , xy , -= , f1 , }
		- SUCC   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }

135 :	"-="
		- NEIGH  = { y , xy , -= , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , xy , -= , f1 , }
		- SUCC   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }

135 :	"xy"
		- NEIGH  = { y , xy , -= , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , xy , -= , f1 , }
		- SUCC   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }

135 :	"y"
		- NEIGH  = { y , xy , -= , f2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , xy , -= , f1 , }
		- SUCC   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }

136 :	"dl"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f2"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"*"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f1p"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"-"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f1"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"*"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f2p"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"/"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"dp"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f1p"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"*"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f2l"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"-"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f2p"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"*"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

136 :	"f1l"
		- NEIGH  = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , xy , -= , f2 , }
		- SUCC   = { f1l , f2 , * , f1 , - , / , f2l , dp , }

137 :	"dp"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"f1"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"*"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"f2l"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"-"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"f2"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"*"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"f1l"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"/"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

137 :	"dp"
		- NEIGH  = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f2l , / , f2p , f1 , - , dp , f1p , * , f1l , f2 , dl , }
		- SUCC   = { M_PI , fmod , dl , }

138 :	"dl"
		- NEIGH  = { M_PI , fmod , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- SUCC   = { dp , -= , phi , lp , }

138 :	"fmod"
		- NEIGH  = { M_PI , fmod , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- SUCC   = { dp , -= , phi , lp , }

138 :	"dl"
		- NEIGH  = { M_PI , fmod , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- SUCC   = { dp , -= , phi , lp , }

138 :	"M_PI"
		- NEIGH  = { M_PI , fmod , dl , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { f1l , f2 , * , f1 , - , / , f2l , dp , }
		- SUCC   = { dp , -= , phi , lp , }

139 :	"lp"
		- NEIGH  = { dp , -= , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , fmod , dl , }
		- SUCC   = { dl , -= , lam , lp , }

139 :	"phi"
		- NEIGH  = { dp , -= , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , fmod , dl , }
		- SUCC   = { dl , -= , lam , lp , }

139 :	"-="
		- NEIGH  = { dp , -= , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , fmod , dl , }
		- SUCC   = { dl , -= , lam , lp , }

139 :	"dp"
		- NEIGH  = { dp , -= , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , fmod , dl , }
		- SUCC   = { dl , -= , lam , lp , }

139 :	"lp"
		- NEIGH  = { dl , -= , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dp , -= , phi , lp , }
		- SUCC   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }

139 :	"lam"
		- NEIGH  = { dl , -= , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dp , -= , phi , lp , }
		- SUCC   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }

139 :	"-="
		- NEIGH  = { dl , -= , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dp , -= , phi , lp , }
		- SUCC   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }

139 :	"dl"
		- NEIGH  = { dl , -= , lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dp , -= , phi , lp , }
		- SUCC   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }

140 :	"while"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"fabs"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"dp"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	">"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"EPSILON"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"||"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"fabs"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"dl"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	">"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"EPSILON"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"&&"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"iter"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"++"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"<"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

140 :	"MAXITER"
		- NEIGH  = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dl , -= , lam , lp , }
		- SUCC   = { > , M_PI_2 , phi , lp , if , }

141 :	"if"
		- NEIGH  = { > , M_PI_2 , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , -= , - , phi , lp , }
		- PRED   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- SUCC   = { M_PI_2 , < , - , phi , lp , if , }

141 :	"lp"
		- NEIGH  = { > , M_PI_2 , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , -= , - , phi , lp , }
		- PRED   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- SUCC   = { M_PI_2 , < , - , phi , lp , if , }

141 :	"phi"
		- NEIGH  = { > , M_PI_2 , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , -= , - , phi , lp , }
		- PRED   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- SUCC   = { M_PI_2 , < , - , phi , lp , if , }

141 :	">"
		- NEIGH  = { > , M_PI_2 , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , -= , - , phi , lp , }
		- PRED   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- SUCC   = { M_PI_2 , < , - , phi , lp , if , }

141 :	"M_PI_2"
		- NEIGH  = { > , M_PI_2 , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , -= , - , phi , lp , }
		- PRED   = { MAXITER , iter , > , && , EPSILON , < , dl , || , ++ , dp , while , fabs , }
		- SUCC   = { M_PI_2 , < , - , phi , lp , if , }

141 :	"lp"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"phi"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"-="
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"*"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"lp"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"phi"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"-"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"M_PI_2"
		- NEIGH  = { M_PI_2 , * , -= , - , phi , lp , }
		- PARENT = { > , M_PI_2 , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"if"
		- NEIGH  = { M_PI_2 , < , - , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , + , -= , phi , lp , }
		- PRED   = { > , M_PI_2 , phi , lp , if , }
		- SUCC   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }

142 :	"lp"
		- NEIGH  = { M_PI_2 , < , - , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , + , -= , phi , lp , }
		- PRED   = { > , M_PI_2 , phi , lp , if , }
		- SUCC   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }

142 :	"phi"
		- NEIGH  = { M_PI_2 , < , - , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , + , -= , phi , lp , }
		- PRED   = { > , M_PI_2 , phi , lp , if , }
		- SUCC   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }

142 :	"<"
		- NEIGH  = { M_PI_2 , < , - , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , + , -= , phi , lp , }
		- PRED   = { > , M_PI_2 , phi , lp , if , }
		- SUCC   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }

142 :	"-"
		- NEIGH  = { M_PI_2 , < , - , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , + , -= , phi , lp , }
		- PRED   = { > , M_PI_2 , phi , lp , if , }
		- SUCC   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }

142 :	"M_PI_2"
		- NEIGH  = { M_PI_2 , < , - , phi , lp , if , }
		- PARENT = { }
		- CHILD  = { M_PI_2 , * , + , -= , phi , lp , }
		- PRED   = { > , M_PI_2 , phi , lp , if , }
		- SUCC   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }

142 :	"lp"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"phi"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"-="
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"*"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"lp"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"phi"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"+"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"M_PI_2"
		- NEIGH  = { M_PI_2 , * , + , -= , phi , lp , }
		- PARENT = { M_PI_2 , < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"if"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"fabs"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"fabs"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"lp"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"phi"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"-"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"M_PI_2"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"<"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"EPSILON"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"&&"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"Q"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"mode"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"=="
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"AITOFF"
		- NEIGH  = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- PARENT = { }
		- CHILD  = { lam , lp , }
		- PRED   = { M_PI_2 , < , - , phi , lp , if , }
		- SUCC   = { * , lp , lam , acos , C , D , != , phi , cos , if , }

143 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

146 :	"if"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"D"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"acos"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"cos"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"lp"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"phi"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"*"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"cos"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"C"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"*"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"lp"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"lam"
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

146 :	"!="
		- NEIGH  = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- PARENT = { }
		- CHILD  = { sin , / , phi , cos , lp , C , D , *= , y , * , x , }
		- PRED   = { AITOFF , M_PI_2 , Q , mode , && , < , EPSILON , - , == , phi , lp , fabs , if , }
		- SUCC   = { == , mode , Q , WINKEL_TRIPEL , if , }

147 :	"x"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"*"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"D"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"*"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"cos"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"lp"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"phi"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"*"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"sin"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"C"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"*"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"y"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"/"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"sin"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

147 :	"D"
		- NEIGH  = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , D , * , *= , y , }

148 :	"y"
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

148 :	"*="
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

148 :	"D"
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

148 :	"*"
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

148 :	"sin"
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

148 :	"lp"
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

148 :	"phi"
		- NEIGH  = { phi , lp , sin , D , * , *= , y , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { sin , / , phi , cos , lp , C , D , y , * , x , }
		- SUCC   = { }

150 :	"x"
		- NEIGH  = { y , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"y"
		- NEIGH  = { y , x , }
		- PARENT = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"if"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , lp , + , y , * , lam , x , }
		- PRED   = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- SUCC   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }

151 :	"Q"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , lp , + , y , * , lam , x , }
		- PRED   = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- SUCC   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }

151 :	"mode"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , lp , + , y , * , lam , x , }
		- PRED   = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- SUCC   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }

151 :	"=="
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , lp , + , y , * , lam , x , }
		- PRED   = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- SUCC   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }

151 :	"WINKEL_TRIPEL"
		- NEIGH  = { == , mode , Q , WINKEL_TRIPEL , if , }
		- PARENT = { }
		- CHILD  = { phi , cosphi1 , Q , lp , + , y , * , lam , x , }
		- PRED   = { * , lp , lam , acos , C , D , != , phi , cos , if , }
		- SUCC   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }

152 :	"x"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"x"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"+"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"lp"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"lam"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"*"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"Q"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"cosphi1"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

152 :	"*"
		- NEIGH  = { cosphi1 , Q , lp , + , * , lam , x , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , + , * , y , }

153 :	"y"
		- NEIGH  = { phi , lp , + , * , y , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , lp , + , * , lam , x , }
		- SUCC   = { }

153 :	"y"
		- NEIGH  = { phi , lp , + , * , y , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , lp , + , * , lam , x , }
		- SUCC   = { }

153 :	"+"
		- NEIGH  = { phi , lp , + , * , y , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , lp , + , * , lam , x , }
		- SUCC   = { }

153 :	"lp"
		- NEIGH  = { phi , lp , + , * , y , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , lp , + , * , lam , x , }
		- SUCC   = { }

153 :	"phi"
		- NEIGH  = { phi , lp , + , * , y , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , lp , + , * , lam , x , }
		- SUCC   = { }

153 :	"*"
		- NEIGH  = { phi , lp , + , * , y , }
		- PARENT = { == , mode , Q , WINKEL_TRIPEL , if , }
		- CHILD  = { }
		- PRED   = { cosphi1 , Q , lp , + , * , lam , x , }
		- SUCC   = { }

156 :	"while"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"fabs"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"xy"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"x"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"-"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"x"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	">"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"EPSILON"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"||"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"fabs"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"xy"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"y"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"-"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"y"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	">"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"EPSILON"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"&&"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"round"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"++"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"<"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

156 :	"MAXROUND"
		- NEIGH  = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , mode , Q , WINKEL_TRIPEL , if , }
		- SUCC   = { MAXROUND , round , && , MAXITER , == , iter , if , }

158 :	"if"
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"iter"
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"=="
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"MAXITER"
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"&&"
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"round"
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"=="
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

158 :	"MAXROUND"
		- NEIGH  = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PRED   = { MAXROUND , ++ , round , > , && , || , - , y , < , xy , EPSILON , x , fabs , while , }
		- SUCC   = { lp , return , }

160 :	"pj_ctx_set_errno"
		- NEIGH  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PARENT = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

160 :	"P"
		- NEIGH  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PARENT = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

160 :	"ctx"
		- NEIGH  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PARENT = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

160 :	"PJD_ERR_NON_CONVERGENT"
		- NEIGH  = { PJD_ERR_NON_CONVERGENT , ctx , P , pj_ctx_set_errno , }
		- PARENT = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

164 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- SUCC   = { }

164 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MAXROUND , round , && , MAXITER , == , iter , if , }
		- SUCC   = { }

168 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"setup"
		- NEIGH  = { setup , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

169 :	"P"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { s_forward , fwd , P , }

169 :	"inv"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { s_forward , fwd , P , }

169 :	"s_inverse"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { s_forward , fwd , P , }

170 :	"P"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { es , P , }

170 :	"fwd"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { es , P , }

170 :	"s_forward"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { es , P , }

171 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_forward , fwd , P , }
		- SUCC   = { P , return , }

171 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_forward , fwd , P , }
		- SUCC   = { P , return , }

172 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

172 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

176 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

176 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

176 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

176 :	"aitoff"
		- NEIGH  = { aitoff , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

177 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

177 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

178 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

178 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

178 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

179 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

180 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { AITOFF , mode , Q , }

180 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { AITOFF , mode , Q , }

180 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { AITOFF , mode , Q , }

182 :	"Q"
		- NEIGH  = { AITOFF , mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

182 :	"mode"
		- NEIGH  = { AITOFF , mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

182 :	"AITOFF"
		- NEIGH  = { AITOFF , mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

183 :	"return"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { AITOFF , mode , Q , }
		- SUCC   = { }

183 :	"setup"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { AITOFF , mode , Q , }
		- SUCC   = { }

183 :	"P"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { AITOFF , mode , Q , }
		- SUCC   = { }

187 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"wintri"
		- NEIGH  = { wintri , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

188 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

189 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

189 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

189 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

190 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

191 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { WINKEL_TRIPEL , mode , Q , }

191 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { WINKEL_TRIPEL , mode , Q , }

191 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { WINKEL_TRIPEL , mode , Q , }

193 :	"Q"
		- NEIGH  = { WINKEL_TRIPEL , mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { i , params , ctx , P , pj_param , if , }

193 :	"mode"
		- NEIGH  = { WINKEL_TRIPEL , mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { i , params , ctx , P , pj_param , if , }

193 :	"WINKEL_TRIPEL"
		- NEIGH  = { WINKEL_TRIPEL , mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { i , params , ctx , P , pj_param , if , }

194 :	"if"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

194 :	"pj_param"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

194 :	"P"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

194 :	"ctx"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

194 :	"P"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

194 :	"params"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

194 :	"i"
		- NEIGH  = { i , params , ctx , P , pj_param , if , }
		- PARENT = { }
		- CHILD  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PRED   = { WINKEL_TRIPEL , mode , Q , }
		- SUCC   = { setup , P , return , }

195 :	"if"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"Q"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"cosphi1"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"cos"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"pj_param"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"P"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"ctx"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"P"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"params"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"f"
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

195 :	"=="
		- NEIGH  = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PRED   = { }
		- SUCC   = { }

196 :	"return"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PARENT = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"pj_default_destructor"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PARENT = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"P"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PARENT = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

196 :	"PJD_ERR_LAT_LARGER_THAN_90"
		- NEIGH  = { PJD_ERR_LAT_LARGER_THAN_90 , P , pj_default_destructor , return , }
		- PARENT = { params , P , pj_param , == , f , cosphi1 , ctx , Q , cos , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"Q"
		- NEIGH  = { cosphi1 , Q , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"cosphi1"
		- NEIGH  = { cosphi1 , Q , }
		- PARENT = { i , params , ctx , P , pj_param , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"return"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , P , pj_param , if , }
		- SUCC   = { }

200 :	"setup"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , P , pj_param , if , }
		- SUCC   = { }

200 :	"P"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , P , pj_param , if , }
		- SUCC   = { }

