26 :	"caseInsensitiveStringCompare"
		- NEIGH  = { caseInsensitiveStringCompare , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"lhs"
		- NEIGH  = { lhs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"rhs"
		- NEIGH  = { rhs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"if"
		- NEIGH  = { != , size , lhs , rhs , if , }
		- PARENT = { }
		- CHILD  = { rhs , < , lhs , size , - , return , }
		- PRED   = { }
		- SUCC   = { for , size , lhs , < , ++ , i , }

28 :	"lhs"
		- NEIGH  = { != , size , lhs , rhs , if , }
		- PARENT = { }
		- CHILD  = { rhs , < , lhs , size , - , return , }
		- PRED   = { }
		- SUCC   = { for , size , lhs , < , ++ , i , }

28 :	"size"
		- NEIGH  = { != , size , lhs , rhs , if , }
		- PARENT = { }
		- CHILD  = { rhs , < , lhs , size , - , return , }
		- PRED   = { }
		- SUCC   = { for , size , lhs , < , ++ , i , }

28 :	"!="
		- NEIGH  = { != , size , lhs , rhs , if , }
		- PARENT = { }
		- CHILD  = { rhs , < , lhs , size , - , return , }
		- PRED   = { }
		- SUCC   = { for , size , lhs , < , ++ , i , }

28 :	"rhs"
		- NEIGH  = { != , size , lhs , rhs , if , }
		- PARENT = { }
		- CHILD  = { rhs , < , lhs , size , - , return , }
		- PRED   = { }
		- SUCC   = { for , size , lhs , < , ++ , i , }

28 :	"size"
		- NEIGH  = { != , size , lhs , rhs , if , }
		- PARENT = { }
		- CHILD  = { rhs , < , lhs , size , - , return , }
		- PRED   = { }
		- SUCC   = { for , size , lhs , < , ++ , i , }

29 :	"return"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"lhs"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"size"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"<"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"rhs"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"size"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"-"
		- NEIGH  = { rhs , < , lhs , size , - , return , }
		- PARENT = { != , size , lhs , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

30 :	"for"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"i"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"i"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"<"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"lhs"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"size"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"++"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

30 :	"i"
		- NEIGH  = { for , size , lhs , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { != , rhs , c2 , std , i , lhs , toupper , if , c1 , }
		- PRED   = { != , size , lhs , rhs , if , }
		- SUCC   = { return , }

31 :	"c1"
		- NEIGH  = { i , lhs , toupper , std , c1 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { i , rhs , toupper , std , c2 , }

31 :	"std"
		- NEIGH  = { i , lhs , toupper , std , c1 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { i , rhs , toupper , std , c2 , }

31 :	"toupper"
		- NEIGH  = { i , lhs , toupper , std , c1 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { i , rhs , toupper , std , c2 , }

31 :	"lhs"
		- NEIGH  = { i , lhs , toupper , std , c1 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { i , rhs , toupper , std , c2 , }

31 :	"i"
		- NEIGH  = { i , lhs , toupper , std , c1 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { i , rhs , toupper , std , c2 , }

32 :	"c2"
		- NEIGH  = { i , rhs , toupper , std , c2 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { i , lhs , toupper , std , c1 , }
		- SUCC   = { != , c2 , c1 , if , }

32 :	"std"
		- NEIGH  = { i , rhs , toupper , std , c2 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { i , lhs , toupper , std , c1 , }
		- SUCC   = { != , c2 , c1 , if , }

32 :	"toupper"
		- NEIGH  = { i , rhs , toupper , std , c2 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { i , lhs , toupper , std , c1 , }
		- SUCC   = { != , c2 , c1 , if , }

32 :	"rhs"
		- NEIGH  = { i , rhs , toupper , std , c2 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { i , lhs , toupper , std , c1 , }
		- SUCC   = { != , c2 , c1 , if , }

32 :	"i"
		- NEIGH  = { i , rhs , toupper , std , c2 , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { }
		- PRED   = { i , lhs , toupper , std , c1 , }
		- SUCC   = { != , c2 , c1 , if , }

33 :	"if"
		- NEIGH  = { != , c2 , c1 , if , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { - , < , c2 , c1 , return , }
		- PRED   = { i , rhs , toupper , std , c2 , }
		- SUCC   = { }

33 :	"c1"
		- NEIGH  = { != , c2 , c1 , if , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { - , < , c2 , c1 , return , }
		- PRED   = { i , rhs , toupper , std , c2 , }
		- SUCC   = { }

33 :	"!="
		- NEIGH  = { != , c2 , c1 , if , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { - , < , c2 , c1 , return , }
		- PRED   = { i , rhs , toupper , std , c2 , }
		- SUCC   = { }

33 :	"c2"
		- NEIGH  = { != , c2 , c1 , if , }
		- PARENT = { for , size , lhs , < , ++ , i , }
		- CHILD  = { - , < , c2 , c1 , return , }
		- PRED   = { i , rhs , toupper , std , c2 , }
		- SUCC   = { }

34 :	"return"
		- NEIGH  = { - , < , c2 , c1 , return , }
		- PARENT = { != , c2 , c1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"c1"
		- NEIGH  = { - , < , c2 , c1 , return , }
		- PARENT = { != , c2 , c1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"<"
		- NEIGH  = { - , < , c2 , c1 , return , }
		- PARENT = { != , c2 , c1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"c2"
		- NEIGH  = { - , < , c2 , c1 , return , }
		- PARENT = { != , c2 , c1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"-"
		- NEIGH  = { - , < , c2 , c1 , return , }
		- PARENT = { != , c2 , c1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , size , lhs , < , ++ , i , }
		- SUCC   = { }

39 :	"isValidGlobPattern"
		- NEIGH  = { isValidGlobPattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"pattern"
		- NEIGH  = { pattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"for"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"std"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"string"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"const_iterator"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"i"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"pattern"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"begin"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"i"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"!="
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"pattern"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"end"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"++"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

41 :	"i"
		- NEIGH  = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- PARENT = { }
		- CHILD  = { || , == , i , * , if , }
		- PRED   = { }
		- SUCC   = { return , }

42 :	"if"
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"*"
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"i"
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"=="
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"||"
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"*"
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"i"
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

42 :	"=="
		- NEIGH  = { || , == , i , * , if , }
		- PARENT = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- CHILD  = { || , * , && , string , end , pattern , != , == , const_iterator , + , std , i , if , j , }
		- PRED   = { }
		- SUCC   = { }

43 :	"std"
		- NEIGH  = { const_iterator , std , i , string , + , j , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , == , && , end , * , pattern , != , j , if , }

43 :	"string"
		- NEIGH  = { const_iterator , std , i , string , + , j , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , == , && , end , * , pattern , != , j , if , }

43 :	"const_iterator"
		- NEIGH  = { const_iterator , std , i , string , + , j , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , == , && , end , * , pattern , != , j , if , }

43 :	"j"
		- NEIGH  = { const_iterator , std , i , string , + , j , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , == , && , end , * , pattern , != , j , if , }

43 :	"i"
		- NEIGH  = { const_iterator , std , i , string , + , j , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , == , && , end , * , pattern , != , j , if , }

43 :	"+"
		- NEIGH  = { const_iterator , std , i , string , + , j , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , == , && , end , * , pattern , != , j , if , }

44 :	"if"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"j"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"!="
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"pattern"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"end"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"&&"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"*"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"j"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"=="
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"||"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"*"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"j"
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

44 :	"=="
		- NEIGH  = { || , == , && , end , * , pattern , != , j , if , }
		- PARENT = { || , == , i , * , if , }
		- CHILD  = { return , }
		- PRED   = { const_iterator , std , i , string , + , j , }
		- SUCC   = { }

45 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , == , && , end , * , pattern , != , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , end , begin , pattern , const_iterator , ++ , std , i , string , for , }
		- SUCC   = { }

52 :	"matchglob"
		- NEIGH  = { matchglob , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"pattern"
		- NEIGH  = { pattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"name"
		- NEIGH  = { name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"*"
		- NEIGH  = { c_str , pattern , p , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { c_str , name , n , * , }

54 :	"p"
		- NEIGH  = { c_str , pattern , p , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { c_str , name , n , * , }

54 :	"pattern"
		- NEIGH  = { c_str , pattern , p , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { c_str , name , n , * , }

54 :	"c_str"
		- NEIGH  = { c_str , pattern , p , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { c_str , name , n , * , }

55 :	"*"
		- NEIGH  = { c_str , name , n , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , pattern , p , * , }
		- SUCC   = { backtrack , > , pair , < , * , stack , std , }

55 :	"n"
		- NEIGH  = { c_str , name , n , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , pattern , p , * , }
		- SUCC   = { backtrack , > , pair , < , * , stack , std , }

55 :	"name"
		- NEIGH  = { c_str , name , n , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , pattern , p , * , }
		- SUCC   = { backtrack , > , pair , < , * , stack , std , }

55 :	"c_str"
		- NEIGH  = { c_str , name , n , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , pattern , p , * , }
		- SUCC   = { backtrack , > , pair , < , * , stack , std , }

56 :	"std"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"stack"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"<"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"std"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"pair"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"<"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"*"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"*"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	">"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	">"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

56 :	"backtrack"
		- NEIGH  = { backtrack , > , pair , < , * , stack , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c_str , name , n , * , }
		- SUCC   = { for , }

58 :	"for"
		- NEIGH  = { for , }
		- PARENT = { }
		- CHILD  = { second , top , empty , n , ++ , == , && , backtrack , != , p , * , pop , while , first , if , matching , }
		- PRED   = { backtrack , > , pair , < , * , stack , std , }
		- SUCC   = { }

59 :	"matching"
		- NEIGH  = { matching , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { matching , && , != , p , * , while , }

60 :	"while"
		- NEIGH  = { matching , && , != , p , * , while , }
		- PARENT = { for , }
		- CHILD  = { p , * , ++ , switch , }
		- PRED   = { matching , }
		- SUCC   = { n , * , == , && , matching , if , }

60 :	"*"
		- NEIGH  = { matching , && , != , p , * , while , }
		- PARENT = { for , }
		- CHILD  = { p , * , ++ , switch , }
		- PRED   = { matching , }
		- SUCC   = { n , * , == , && , matching , if , }

60 :	"p"
		- NEIGH  = { matching , && , != , p , * , while , }
		- PARENT = { for , }
		- CHILD  = { p , * , ++ , switch , }
		- PRED   = { matching , }
		- SUCC   = { n , * , == , && , matching , if , }

60 :	"!="
		- NEIGH  = { matching , && , != , p , * , while , }
		- PARENT = { for , }
		- CHILD  = { p , * , ++ , switch , }
		- PRED   = { matching , }
		- SUCC   = { n , * , == , && , matching , if , }

60 :	"&&"
		- NEIGH  = { matching , && , != , p , * , while , }
		- PARENT = { for , }
		- CHILD  = { p , * , ++ , switch , }
		- PRED   = { matching , }
		- SUCC   = { n , * , == , && , matching , if , }

60 :	"matching"
		- NEIGH  = { matching , && , != , p , * , while , }
		- PARENT = { for , }
		- CHILD  = { p , * , ++ , switch , }
		- PRED   = { matching , }
		- SUCC   = { n , * , == , && , matching , if , }

61 :	"switch"
		- NEIGH  = { p , * , switch , }
		- PARENT = { matching , && , != , p , * , while , }
		- CHILD  = { break , if , p , == , && , != , n , * , while , }
		- PRED   = { }
		- SUCC   = { ++ , p , }

61 :	"*"
		- NEIGH  = { p , * , switch , }
		- PARENT = { matching , && , != , p , * , while , }
		- CHILD  = { break , if , p , == , && , != , n , * , while , }
		- PRED   = { }
		- SUCC   = { ++ , p , }

61 :	"p"
		- NEIGH  = { p , * , switch , }
		- PARENT = { matching , && , != , p , * , while , }
		- CHILD  = { break , if , p , == , && , != , n , * , while , }
		- PRED   = { }
		- SUCC   = { ++ , p , }

64 :	"while"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"*"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"n"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"!="
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"&&"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"*"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"n"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"!="
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

64 :	"p"
		- NEIGH  = { p , && , != , n , * , while , }
		- PARENT = { p , * , switch , }
		- CHILD  = { ++ , n , }
		- PRED   = { }
		- SUCC   = { != , n , * , if , }

65 :	"n"
		- NEIGH  = { ++ , n , }
		- PARENT = { p , && , != , n , * , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"++"
		- NEIGH  = { ++ , n , }
		- PARENT = { p , && , != , n , * , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"if"
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { n , std , push , p , make_pair , backtrack , }
		- PRED   = { p , && , != , n , * , while , }
		- SUCC   = { break , }

67 :	"*"
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { n , std , push , p , make_pair , backtrack , }
		- PRED   = { p , && , != , n , * , while , }
		- SUCC   = { break , }

67 :	"n"
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { n , std , push , p , make_pair , backtrack , }
		- PRED   = { p , && , != , n , * , while , }
		- SUCC   = { break , }

67 :	"!="
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { n , std , push , p , make_pair , backtrack , }
		- PRED   = { p , && , != , n , * , while , }
		- SUCC   = { break , }

69 :	"backtrack"
		- NEIGH  = { n , std , push , p , make_pair , backtrack , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"push"
		- NEIGH  = { n , std , push , p , make_pair , backtrack , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"std"
		- NEIGH  = { n , std , push , p , make_pair , backtrack , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"make_pair"
		- NEIGH  = { n , std , push , p , make_pair , backtrack , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"p"
		- NEIGH  = { n , std , push , p , make_pair , backtrack , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"n"
		- NEIGH  = { n , std , push , p , make_pair , backtrack , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"break"
		- NEIGH  = { break , }
		- PARENT = { p , * , switch , }
		- CHILD  = { }
		- PRED   = { != , n , * , if , }
		- SUCC   = { }

74 :	"if"
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { break , }

74 :	"*"
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { break , }

74 :	"n"
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { break , }

74 :	"!="
		- NEIGH  = { != , n , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { break , }

75 :	"n"
		- NEIGH  = { ++ , n , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"++"
		- NEIGH  = { ++ , n , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

77 :	"matching"
		- NEIGH  = { matching , }
		- PARENT = { != , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

79 :	"break"
		- NEIGH  = { break , }
		- PARENT = { p , * , switch , }
		- CHILD  = { }
		- PRED   = { != , n , * , if , }
		- SUCC   = { }

82 :	"if"
		- NEIGH  = { == , n , p , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { break , }

82 :	"*"
		- NEIGH  = { == , n , p , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { break , }

82 :	"n"
		- NEIGH  = { == , n , p , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { break , }

82 :	"=="
		- NEIGH  = { == , n , p , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { break , }

82 :	"*"
		- NEIGH  = { == , n , p , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { break , }

82 :	"p"
		- NEIGH  = { == , n , p , * , if , }
		- PARENT = { p , * , switch , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { break , }

83 :	"n"
		- NEIGH  = { ++ , n , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"++"
		- NEIGH  = { ++ , n , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

84 :	"if"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"*"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"n"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"=="
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"&&"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"*"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"p"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

84 :	"=="
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { == , n , p , * , if , }
		- CHILD  = { p , * , if , ++ , && , == , n , }
		- PRED   = { }
		- SUCC   = { }

85 :	"n"
		- NEIGH  = { ++ , n , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

85 :	"++"
		- NEIGH  = { ++ , n , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

86 :	"if"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"*"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"n"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"=="
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"&&"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"*"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"p"
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

86 :	"=="
		- NEIGH  = { p , && , == , n , * , if , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { matching , ++ , n , }
		- PRED   = { }
		- SUCC   = { }

87 :	"n"
		- NEIGH  = { ++ , n , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"++"
		- NEIGH  = { ++ , n , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

89 :	"matching"
		- NEIGH  = { matching , }
		- PARENT = { p , && , == , n , * , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

91 :	"break"
		- NEIGH  = { break , }
		- PARENT = { p , * , switch , }
		- CHILD  = { }
		- PRED   = { == , n , p , * , if , }
		- SUCC   = { }

93 :	"p"
		- NEIGH  = { ++ , p , }
		- PARENT = { matching , && , != , p , * , while , }
		- CHILD  = { }
		- PRED   = { p , * , switch , }
		- SUCC   = { }

93 :	"++"
		- NEIGH  = { ++ , p , }
		- PARENT = { matching , && , != , p , * , while , }
		- CHILD  = { }
		- PRED   = { p , * , switch , }
		- SUCC   = { }

97 :	"if"
		- NEIGH  = { n , * , == , && , matching , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { matching , && , != , p , * , while , }
		- SUCC   = { empty , backtrack , if , }

97 :	"matching"
		- NEIGH  = { n , * , == , && , matching , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { matching , && , != , p , * , while , }
		- SUCC   = { empty , backtrack , if , }

97 :	"&&"
		- NEIGH  = { n , * , == , && , matching , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { matching , && , != , p , * , while , }
		- SUCC   = { empty , backtrack , if , }

97 :	"*"
		- NEIGH  = { n , * , == , && , matching , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { matching , && , != , p , * , while , }
		- SUCC   = { empty , backtrack , if , }

97 :	"n"
		- NEIGH  = { n , * , == , && , matching , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { matching , && , != , p , * , while , }
		- SUCC   = { empty , backtrack , if , }

97 :	"=="
		- NEIGH  = { n , * , == , && , matching , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { matching , && , != , p , * , while , }
		- SUCC   = { empty , backtrack , if , }

98 :	"return"
		- NEIGH  = { return , }
		- PARENT = { n , * , == , && , matching , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"if"
		- NEIGH  = { empty , backtrack , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { n , * , == , && , matching , if , }
		- SUCC   = { first , top , backtrack , p , }

102 :	"backtrack"
		- NEIGH  = { empty , backtrack , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { n , * , == , && , matching , if , }
		- SUCC   = { first , top , backtrack , p , }

102 :	"empty"
		- NEIGH  = { empty , backtrack , if , }
		- PARENT = { for , }
		- CHILD  = { return , }
		- PRED   = { n , * , == , && , matching , if , }
		- SUCC   = { first , top , backtrack , p , }

103 :	"return"
		- NEIGH  = { return , }
		- PARENT = { empty , backtrack , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"p"
		- NEIGH  = { first , top , backtrack , p , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { empty , backtrack , if , }
		- SUCC   = { backtrack , second , top , n , }

107 :	"backtrack"
		- NEIGH  = { first , top , backtrack , p , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { empty , backtrack , if , }
		- SUCC   = { backtrack , second , top , n , }

107 :	"top"
		- NEIGH  = { first , top , backtrack , p , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { empty , backtrack , if , }
		- SUCC   = { backtrack , second , top , n , }

107 :	"first"
		- NEIGH  = { first , top , backtrack , p , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { empty , backtrack , if , }
		- SUCC   = { backtrack , second , top , n , }

108 :	"n"
		- NEIGH  = { backtrack , second , top , n , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { first , top , backtrack , p , }
		- SUCC   = { pop , backtrack , }

108 :	"backtrack"
		- NEIGH  = { backtrack , second , top , n , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { first , top , backtrack , p , }
		- SUCC   = { pop , backtrack , }

108 :	"top"
		- NEIGH  = { backtrack , second , top , n , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { first , top , backtrack , p , }
		- SUCC   = { pop , backtrack , }

108 :	"second"
		- NEIGH  = { backtrack , second , top , n , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { first , top , backtrack , p , }
		- SUCC   = { pop , backtrack , }

109 :	"backtrack"
		- NEIGH  = { pop , backtrack , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { backtrack , second , top , n , }
		- SUCC   = { ++ , n , }

109 :	"pop"
		- NEIGH  = { pop , backtrack , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { backtrack , second , top , n , }
		- SUCC   = { ++ , n , }

112 :	"n"
		- NEIGH  = { ++ , n , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { pop , backtrack , }
		- SUCC   = { }

112 :	"++"
		- NEIGH  = { ++ , n , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { pop , backtrack , }
		- SUCC   = { }

