35 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"CWE398"
		- NEIGH  = { CWE398 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"instance"
		- NEIGH  = { instance , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"assertWithSideEffects"
		- NEIGH  = { assertWithSideEffects , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

44 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

44 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

44 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

44 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

44 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { front , list , mTokenizer , tok , * , next , Token , for , }

45 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"for"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"Token"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"*"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"mTokenizer"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"list"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"front"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"tok"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

47 :	"next"
		- NEIGH  = { front , list , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { ! , Token , link , endTok , * , tmp , tok , simpleMatch , != , for , next , if , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

48 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

48 :	"!"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

48 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

48 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

48 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , ! , if , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { link , Token , next , tok , endTok , * , }

49 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , simpleMatch , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

51 :	"Token"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

51 :	"*"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

51 :	"endTok"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

51 :	"tok"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

51 :	"next"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

51 :	"link"
		- NEIGH  = { link , Token , next , tok , endTok , * , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , ! , if , }
		- SUCC   = { endTok , != , tok , tmp , * , next , Token , for , }

52 :	"for"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"Token"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"*"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"tok"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"next"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"!="
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"endTok"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"tmp"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

52 :	"next"
		- NEIGH  = { endTok , != , tok , tmp , * , next , Token , for , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { next , bodyEnd , tokType , Scope , isClassOrStruct , for , isConst , isStatic , tok2 , && , ! , function , * , f , scope , Function , Token , bodyStart , if , functionScope , != , tmp , tok , nestedIn , eFunction , checkVariableAssignment , }
		- PRED   = { link , Token , next , tok , endTok , * , }
		- SUCC   = { endTok , tok , }

53 :	"checkVariableAssignment"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

53 :	"tmp"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

53 :	"tok"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

53 :	"scope"
		- NEIGH  = { tok , scope , tmp , checkVariableAssignment , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eFunction , Token , != , tmp , tokType , if , }

55 :	"if"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

55 :	"tmp"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

55 :	"tokType"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

55 :	"!="
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

55 :	"Token"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

55 :	"eFunction"
		- NEIGH  = { eFunction , Token , != , tmp , tokType , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , scope , tmp , checkVariableAssignment , }
		- SUCC   = { function , tmp , f , * , Function , }

56 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eFunction , Token , != , tmp , tokType , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

58 :	"Function"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

58 :	"*"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

58 :	"f"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

58 :	"tmp"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

58 :	"function"
		- NEIGH  = { function , tmp , f , * , Function , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eFunction , Token , != , tmp , tokType , if , }
		- SUCC   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }

59 :	"if"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"f"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"nestedIn"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"isClassOrStruct"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"&&"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"!"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"f"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"isStatic"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"&&"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"!"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"f"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

59 :	"isConst"
		- NEIGH  = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , name , tmp , f , sideEffectInAssertError , }
		- PRED   = { function , tmp , f , * , Function , }
		- SUCC   = { f , * , functionScope , scope , Scope , }

60 :	"sideEffectInAssertError"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

60 :	"tmp"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

60 :	"f"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

60 :	"name"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

61 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- CHILD  = { }
		- PRED   = { name , tmp , f , sideEffectInAssertError , }
		- SUCC   = { }

63 :	"Scope"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

63 :	"*"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

63 :	"scope"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

63 :	"f"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

63 :	"functionScope"
		- NEIGH  = { f , * , functionScope , scope , Scope , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isConst , isStatic , f , && , isClassOrStruct , nestedIn , ! , if , }
		- SUCC   = { scope , ! , if , }

64 :	"if"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { f , * , functionScope , scope , Scope , }
		- SUCC   = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }

64 :	"!"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { f , * , functionScope , scope , Scope , }
		- SUCC   = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }

64 :	"scope"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { f , * , functionScope , scope , Scope , }
		- SUCC   = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }

64 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"for"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"Token"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"*"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"bodyStart"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"!="
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"bodyEnd"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

66 :	"next"
		- NEIGH  = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { endTok , != , tok , tmp , * , next , Token , for , }
		- CHILD  = { break , name , tmp , next , bodyEnd , rt , for , noReturnInScope , sideEffectInAssertError , previous , isArgument , eIncDecOp , variable , isLocal , isAssignmentOp , - , || , isPointer , bodyStart , if , var , isReference , f , * , ! , scope , Token , != , strAt , Variable , && , tok2 , tokType , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { }

67 :	"if"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"!"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"tok2"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"isAssignmentOp"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"&&"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"tok2"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"tokType"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"!="
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"Token"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

67 :	"eIncDecOp"
		- NEIGH  = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { variable , var , previous , tok2 , * , Variable , }

68 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

70 :	"Variable"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

70 :	"*"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

70 :	"var"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

70 :	"tok2"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

70 :	"previous"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

70 :	"variable"
		- NEIGH  = { variable , var , previous , tok2 , * , Variable , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Token , != , && , isAssignmentOp , tok2 , eIncDecOp , tokType , ! , if , }
		- SUCC   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }

71 :	"if"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"!"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"||"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"isLocal"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"||"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"isArgument"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"&&"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"!"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"isReference"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"&&"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"!"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"var"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

71 :	"isPointer"
		- NEIGH  = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , var , previous , tok2 , * , Variable , }
		- SUCC   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }

72 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

73 :	"if"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"var"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"isArgument"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"&&"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"var"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"isPointer"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"&&"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"tok2"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"strAt"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"-"
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

73 :	"!="
		- NEIGH  = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isPointer , && , isArgument , if , ! , isLocal , || , isReference , var , }
		- SUCC   = { noReturnInScope , }

74 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"noReturnInScope"
		- NEIGH  = { noReturnInScope , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { != , - , strAt , && , isPointer , isArgument , tok2 , var , if , }
		- SUCC   = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }

77 :	"for"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"Token"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"*"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"bodyStart"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"!="
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"bodyEnd"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"rt"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

77 :	"next"
		- NEIGH  = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , != , str , rt , inSameScope , if , }
		- PRED   = { noReturnInScope , }
		- SUCC   = { noReturnInScope , if , }

78 :	"if"
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

78 :	"rt"
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

78 :	"str"
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

78 :	"!="
		- NEIGH  = { != , str , rt , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok2 , rt , inSameScope , if , }

78 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { != , str , rt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

79 :	"if"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

79 :	"inSameScope"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

79 :	"rt"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

79 :	"tok2"
		- NEIGH  = { tok2 , rt , inSameScope , if , }
		- PARENT = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- CHILD  = { break , noReturnInScope , }
		- PRED   = { != , str , rt , if , }
		- SUCC   = { }

80 :	"noReturnInScope"
		- NEIGH  = { noReturnInScope , }
		- PARENT = { tok2 , rt , inSameScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

81 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok2 , rt , inSameScope , if , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , }
		- SUCC   = { }

84 :	"if"
		- NEIGH  = { noReturnInScope , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- SUCC   = { name , tmp , f , sideEffectInAssertError , }

84 :	"noReturnInScope"
		- NEIGH  = { noReturnInScope , if , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , != , scope , rt , bodyStart , * , next , Token , for , }
		- SUCC   = { name , tmp , f , sideEffectInAssertError , }

84 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { noReturnInScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

86 :	"sideEffectInAssertError"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

86 :	"tmp"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

86 :	"f"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

86 :	"name"
		- NEIGH  = { name , tmp , f , sideEffectInAssertError , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { noReturnInScope , if , }
		- SUCC   = { break , }

87 :	"break"
		- NEIGH  = { break , }
		- PARENT = { bodyEnd , != , scope , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { name , tmp , f , sideEffectInAssertError , }
		- SUCC   = { }

90 :	"tok"
		- NEIGH  = { endTok , tok , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { endTok , != , tok , tmp , * , next , Token , for , }
		- SUCC   = { }

90 :	"endTok"
		- NEIGH  = { endTok , tok , }
		- PARENT = { front , list , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { endTok , != , tok , tmp , * , next , Token , for , }
		- SUCC   = { }

96 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"sideEffectInAssertError"
		- NEIGH  = { sideEffectInAssertError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"functionName"
		- NEIGH  = { functionName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"reportError"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"tok"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"Severity"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"warning"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"+"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"functionName"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

100 :	"+"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

105 :	"CWE398"
		- NEIGH  = { CWE398 , functionName , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"assignmentInAssertError"
		- NEIGH  = { assignmentInAssertError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"reportError"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"tok"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"Severity"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"warning"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"+"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"varname"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

112 :	"+"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

117 :	"CWE398"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"checkVariableAssignment"
		- NEIGH  = { checkVariableAssignment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"assignTok"
		- NEIGH  = { assignTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"Scope"
		- NEIGH  = { Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"assertionScope"
		- NEIGH  = { assertionScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

123 :	"if"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"!"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"assignTok"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"isAssignmentOp"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"&&"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"assignTok"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"tokType"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"!="
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"Token"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

123 :	"eIncDecOp"
		- NEIGH  = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { variable , var , assignTok , astOperand1 , * , Variable , }

124 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"Variable"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

126 :	"*"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

126 :	"var"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

126 :	"assignTok"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

126 :	"astOperand1"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

126 :	"variable"
		- NEIGH  = { variable , var , assignTok , astOperand1 , * , Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Token , != , isAssignmentOp , && , assignTok , eIncDecOp , tokType , ! , if , }
		- SUCC   = { ! , var , if , }

127 :	"if"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { variable , var , assignTok , astOperand1 , * , Variable , }
		- SUCC   = { scope , != , var , assertionScope , if , }

127 :	"!"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { variable , var , assignTok , astOperand1 , * , Variable , }
		- SUCC   = { scope , != , var , assertionScope , if , }

127 :	"var"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { variable , var , assignTok , astOperand1 , * , Variable , }
		- SUCC   = { scope , != , var , assertionScope , if , }

128 :	"return"
		- NEIGH  = { return , }
		- PARENT = { ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"if"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

131 :	"assertionScope"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

131 :	"!="
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

131 :	"var"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

131 :	"scope"
		- NEIGH  = { scope , != , var , assertionScope , if , }
		- PARENT = { }
		- CHILD  = { if , == , assertionScope , && , var , != , Scope , s , * , while , scope , }
		- PRED   = { ! , var , if , }
		- SUCC   = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }

132 :	"Scope"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

132 :	"*"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

132 :	"s"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

132 :	"var"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

132 :	"scope"
		- NEIGH  = { var , s , * , scope , Scope , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , && , assertionScope , s , while , }

133 :	"while"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

133 :	"s"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

133 :	"&&"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

133 :	"s"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

133 :	"!="
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

133 :	"assertionScope"
		- NEIGH  = { != , && , assertionScope , s , while , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { nestedIn , s , }
		- PRED   = { var , s , * , scope , Scope , }
		- SUCC   = { == , assertionScope , s , if , }

134 :	"s"
		- NEIGH  = { nestedIn , s , }
		- PARENT = { != , && , assertionScope , s , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"s"
		- NEIGH  = { nestedIn , s , }
		- PARENT = { != , && , assertionScope , s , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"nestedIn"
		- NEIGH  = { nestedIn , s , }
		- PARENT = { != , && , assertionScope , s , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"if"
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

135 :	"s"
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

135 :	"=="
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

135 :	"assertionScope"
		- NEIGH  = { == , assertionScope , s , if , }
		- PARENT = { scope , != , var , assertionScope , if , }
		- CHILD  = { return , }
		- PRED   = { != , && , assertionScope , s , while , }
		- SUCC   = { }

136 :	"return"
		- NEIGH  = { return , }
		- PARENT = { == , assertionScope , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"if"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"assignTok"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"isAssignmentOp"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"||"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"assignTok"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"tokType"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"=="
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"Token"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

140 :	"eIncDecOp"
		- NEIGH  = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- PARENT = { }
		- CHILD  = { name , var , assignTok , assignmentInAssertError , isConst , if , }
		- PRED   = { scope , != , var , assertionScope , if , }
		- SUCC   = { }

141 :	"if"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { name , var , assignTok , assignmentInAssertError , }

141 :	"var"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { name , var , assignTok , assignmentInAssertError , }

141 :	"isConst"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { name , var , assignTok , assignmentInAssertError , }

142 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

144 :	"assignmentInAssertError"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

144 :	"assignTok"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

144 :	"var"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

144 :	"name"
		- NEIGH  = { name , var , assignTok , assignmentInAssertError , }
		- PARENT = { Token , == , || , isAssignmentOp , assignTok , eIncDecOp , tokType , if , }
		- CHILD  = { }
		- PRED   = { isConst , var , if , }
		- SUCC   = { }

149 :	"CheckAssert"
		- NEIGH  = { CheckAssert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"inSameScope"
		- NEIGH  = { inSameScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"returnTok"
		- NEIGH  = { returnTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"assignTok"
		- NEIGH  = { assignTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"return"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"returnTok"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"scope"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"=="
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"assignTok"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"scope"
		- NEIGH  = { assignTok , scope , == , returnTok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

