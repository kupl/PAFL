34 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"instance"
		- NEIGH  = { instance , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"CWE398"
		- NEIGH  = { CWE398 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"CWE571"
		- NEIGH  = { CWE571 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"CWE587"
		- NEIGH  = { CWE587 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"CWE704"
		- NEIGH  = { CWE704 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"isBool"
		- NEIGH  = { isBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"Variable"
		- NEIGH  = { Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"return"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"var"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"&&"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"Token"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"Match"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"var"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"typeEndToken"
		- NEIGH  = { typeEndToken , Token , && , Match , var , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"checkIncrementBoolean"
		- NEIGH  = { checkIncrementBoolean , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"if"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

50 :	"!"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

50 :	"mSettings"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

50 :	"severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

50 :	"isEnabled"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

50 :	"Severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

50 :	"style"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

51 :	"return"
		- NEIGH  = { return , }
		- PARENT = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

53 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

53 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

53 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

53 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

54 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

54 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

54 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

54 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

54 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

54 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

55 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

55 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { str , tok , astParent , == , && , astIsBool , if , }
		- PRED   = { }
		- SUCC   = { }

56 :	"if"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"astIsBool"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"tok"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"&&"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"tok"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"astParent"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"&&"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"tok"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"astParent"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"str"
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

56 :	"=="
		- NEIGH  = { str , tok , astParent , == , && , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , incrementBooleanError , }
		- PRED   = { }
		- SUCC   = { }

57 :	"incrementBooleanError"
		- NEIGH  = { tok , incrementBooleanError , }
		- PARENT = { str , tok , astParent , == , && , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

57 :	"tok"
		- NEIGH  = { tok , incrementBooleanError , }
		- PARENT = { str , tok , astParent , == , && , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"incrementBooleanError"
		- NEIGH  = { incrementBooleanError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"tok"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"style"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"normal"
		- NEIGH  = { Certainty , CWE398 , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

79 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

79 :	"checkBitwiseOnBoolean"
		- NEIGH  = { checkBitwiseOnBoolean , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

81 :	"if"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

81 :	"!"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

81 :	"mSettings"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

81 :	"severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

81 :	"isEnabled"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

81 :	"Severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

81 :	"style"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }

82 :	"return"
		- NEIGH  = { return , }
		- PARENT = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

86 :	"if"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

86 :	"!"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

86 :	"mSettings"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

86 :	"certainty"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

86 :	"isEnabled"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

86 :	"Certainty"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

86 :	"inconclusive"
		- NEIGH  = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

87 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

89 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

89 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

89 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

89 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

89 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Certainty , certainty , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

90 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

90 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

90 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

90 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

90 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

90 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

91 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

91 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , str , == , && , isBinaryOp , tok , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"if"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"tok"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"isBinaryOp"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"&&"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"tok"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"str"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"=="
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"||"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"tok"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"str"
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

92 :	"=="
		- NEIGH  = { || , str , == , && , isBinaryOp , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

93 :	"if"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"astIsBool"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"tok"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"astOperand1"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"||"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"astIsBool"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"tok"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

93 :	"astOperand2"
		- NEIGH  = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- PARENT = { || , str , == , && , isBinaryOp , tok , if , }
		- CHILD  = { bitwiseOnBooleanError , expressionString , tok , expression , string , std , astOperand1 , == , && , nameToken , str , if , astOperand2 , astIsBool , variable , }
		- PRED   = { }
		- SUCC   = { }

94 :	"if"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"tok"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"astOperand2"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"variable"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"&&"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"tok"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"astOperand2"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"variable"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"nameToken"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"=="
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"tok"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

94 :	"astOperand2"
		- NEIGH  = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }

95 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"std"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"string"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"expression"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"astIsBool"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"astOperand1"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"astOperand1"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"expressionString"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

96 :	"expressionString"
		- NEIGH  = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { == , && , nameToken , if , astOperand2 , variable , tok , }
		- SUCC   = { str , expression , == , tok , bitwiseOnBooleanError , }

97 :	"bitwiseOnBooleanError"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

97 :	"tok"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

97 :	"expression"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

97 :	"tok"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

97 :	"str"
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

97 :	"=="
		- NEIGH  = { str , expression , == , tok , bitwiseOnBooleanError , }
		- PARENT = { || , astOperand1 , tok , astIsBool , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , expressionString , astOperand1 , expression , astIsBool , string , std , }
		- SUCC   = { }

104 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"bitwiseOnBooleanError"
		- NEIGH  = { bitwiseOnBooleanError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"op"
		- NEIGH  = { op , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

106 :	"reportError"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

106 :	"tok"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

106 :	"Severity"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

106 :	"style"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"+"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"expression"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"+"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"+"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"op"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"+"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"CWE398"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

109 :	"Certainty"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

109 :	"inconclusive"
		- NEIGH  = { inconclusive , Certainty , CWE398 , op , expression , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"checkComparisonOfBoolWithInt"
		- NEIGH  = { checkComparisonOfBoolWithInt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

118 :	"if"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"!"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"mSettings"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"severity"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"isEnabled"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"Severity"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"warning"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"||"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"!"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"mTokenizer"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

118 :	"isCPP"
		- NEIGH  = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

119 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

121 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

121 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

121 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

121 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , mTokenizer , warning , Severity , isCPP , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

122 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

122 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

122 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

122 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

122 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

122 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

123 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

123 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { varId , && , isBoolean , astOperand2 , left , * , ! , Token , isBinaryOp , isComparisonOp , tok , astOperand1 , || , right , if , }
		- PRED   = { }
		- SUCC   = { }

124 :	"if"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"!"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"tok"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"isComparisonOp"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"||"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"!"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"tok"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

124 :	"isBinaryOp"
		- NEIGH  = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , left , * , Token , }

125 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"Token"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

126 :	"*"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

126 :	"left"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

126 :	"tok"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

126 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , left , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isBinaryOp , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { astOperand2 , tok , right , * , Token , }

127 :	"Token"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

127 :	"*"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

127 :	"right"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

127 :	"tok"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

127 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , right , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , left , * , Token , }
		- SUCC   = { varId , if , right , && , isBoolean , left , }

128 :	"if"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

128 :	"left"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

128 :	"isBoolean"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

128 :	"&&"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

128 :	"right"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

128 :	"varId"
		- NEIGH  = { varId , if , right , && , isBoolean , left , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isBoolean , varId , && , left , str , != , tok , right , if , }
		- PRED   = { astOperand2 , tok , right , * , Token , }
		- SUCC   = { }

129 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

129 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

130 :	"comparisonOfBoolWithInvalidComparator"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"right"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"left"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"str"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

132 :	"if"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

132 :	"left"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

132 :	"varId"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

132 :	"&&"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

132 :	"right"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

132 :	"isBoolean"
		- NEIGH  = { isBoolean , if , right , && , left , varId , }
		- PARENT = { varId , if , right , && , isBoolean , left , }
		- CHILD  = { && , str , != , tok , if , }
		- PRED   = { }
		- SUCC   = { }

133 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

133 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { isBoolean , if , right , && , left , varId , }
		- CHILD  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PRED   = { }
		- SUCC   = { }

134 :	"comparisonOfBoolWithInvalidComparator"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"right"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"left"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"str"
		- NEIGH  = { left , str , right , comparisonOfBoolWithInvalidComparator , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"comparisonOfBoolWithInvalidComparator"
		- NEIGH  = { comparisonOfBoolWithInvalidComparator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"reportError"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"tok"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"Severity"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"warning"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"+"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"expression"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"+"
		- NEIGH  = { expression , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"tokenIsFunctionReturningBool"
		- NEIGH  = { tokenIsFunctionReturningBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

156 :	"Function"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

156 :	"*"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

156 :	"func"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

156 :	"tok"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

156 :	"function"
		- NEIGH  = { tok , function , func , * , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , Token , && , func , Match , if , }

157 :	"if"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

157 :	"func"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

157 :	"&&"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

157 :	"Token"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

157 :	"Match"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

157 :	"tok"
		- NEIGH  = { tok , Token , && , func , Match , if , }
		- PARENT = { }
		- CHILD  = { previous , Match , Token , if , tokenDef , && , func , }
		- PRED   = { tok , function , func , * , Function , }
		- SUCC   = { return , }

158 :	"if"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"func"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"tokenDef"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"&&"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"Token"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"Match"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"func"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"tokenDef"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

158 :	"previous"
		- NEIGH  = { previous , Match , Token , if , tokenDef , && , func , }
		- PARENT = { tok , Token , && , func , Match , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

159 :	"return"
		- NEIGH  = { return , }
		- PARENT = { previous , Match , Token , if , tokenDef , && , func , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

162 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , Token , && , func , Match , if , }
		- SUCC   = { }

165 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

165 :	"checkComparisonOfFuncReturningBool"
		- NEIGH  = { checkComparisonOfFuncReturningBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

167 :	"if"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

167 :	"!"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

167 :	"mSettings"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

167 :	"severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

167 :	"isEnabled"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

167 :	"Severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

167 :	"style"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

168 :	"return"
		- NEIGH  = { return , }
		- PARENT = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

170 :	"if"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

170 :	"!"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

170 :	"mTokenizer"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

170 :	"isCPP"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

171 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , ! , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

173 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

173 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

173 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

173 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

173 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

175 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

175 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

175 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

175 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

175 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

175 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

176 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

176 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , while , next , secondToken , previous , firstIsFunctionReturningBool , * , ! , Token , == , if , str , isComparisonOp , strAt , tok , - , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

177 :	"if"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"!"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"isComparisonOp"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

177 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , tok , firstToken , * , Token , }

178 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , str , isComparisonOp , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"Token"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

179 :	"*"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

179 :	"firstToken"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

179 :	"tok"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

179 :	"previous"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { - , strAt , == , tok , if , }

180 :	"if"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

180 :	"tok"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

180 :	"strAt"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

180 :	"-"
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

180 :	"=="
		- NEIGH  = { - , strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , link , firstToken , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { next , tok , secondToken , * , Token , }

181 :	"firstToken"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

181 :	"firstToken"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

181 :	"link"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

181 :	"previous"
		- NEIGH  = { previous , link , firstToken , }
		- PARENT = { - , strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

183 :	"Token"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

183 :	"*"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

183 :	"secondToken"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

183 :	"tok"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

183 :	"next"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { - , strAt , == , tok , if , }
		- SUCC   = { == , str , secondToken , while , }

184 :	"while"
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

184 :	"secondToken"
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

184 :	"str"
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

184 :	"=="
		- NEIGH  = { == , str , secondToken , while , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { next , secondToken , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }

185 :	"secondToken"
		- NEIGH  = { next , secondToken , }
		- PARENT = { == , str , secondToken , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"secondToken"
		- NEIGH  = { next , secondToken , }
		- PARENT = { == , str , secondToken , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"next"
		- NEIGH  = { next , secondToken , }
		- PARENT = { == , str , secondToken , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"firstIsFunctionReturningBool"
		- NEIGH  = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , secondToken , while , }
		- SUCC   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }

187 :	"tokenIsFunctionReturningBool"
		- NEIGH  = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , secondToken , while , }
		- SUCC   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }

187 :	"firstToken"
		- NEIGH  = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , secondToken , while , }
		- SUCC   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }

188 :	"secondIsFunctionReturningBool"
		- NEIGH  = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- SUCC   = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }

188 :	"tokenIsFunctionReturningBool"
		- NEIGH  = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- SUCC   = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }

188 :	"secondToken"
		- NEIGH  = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstToken , tokenIsFunctionReturningBool , firstIsFunctionReturningBool , }
		- SUCC   = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }

189 :	"if"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

189 :	"firstIsFunctionReturningBool"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

189 :	"&&"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

189 :	"secondIsFunctionReturningBool"
		- NEIGH  = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { firstIsFunctionReturningBool , str , next , secondToken , if , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PRED   = { secondToken , tokenIsFunctionReturningBool , secondIsFunctionReturningBool , }
		- SUCC   = { }

190 :	"comparisonOfTwoFuncsReturningBoolError"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"firstToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"next"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"firstToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"str"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"secondToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

190 :	"str"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

191 :	"if"
		- NEIGH  = { firstIsFunctionReturningBool , if , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { str , secondIsFunctionReturningBool , firstToken , if , next , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

191 :	"firstIsFunctionReturningBool"
		- NEIGH  = { firstIsFunctionReturningBool , if , }
		- PARENT = { && , secondIsFunctionReturningBool , firstIsFunctionReturningBool , if , }
		- CHILD  = { str , secondIsFunctionReturningBool , firstToken , if , next , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

192 :	"comparisonOfFuncReturningBoolError"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"firstToken"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"next"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"firstToken"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

192 :	"str"
		- NEIGH  = { str , next , firstToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

193 :	"if"
		- NEIGH  = { secondIsFunctionReturningBool , if , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

193 :	"secondIsFunctionReturningBool"
		- NEIGH  = { secondIsFunctionReturningBool , if , }
		- PARENT = { firstIsFunctionReturningBool , if , }
		- CHILD  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PRED   = { }
		- SUCC   = { }

194 :	"comparisonOfFuncReturningBoolError"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"secondToken"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"previous"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"secondToken"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

194 :	"str"
		- NEIGH  = { str , previous , secondToken , comparisonOfFuncReturningBoolError , }
		- PARENT = { secondIsFunctionReturningBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"comparisonOfFuncReturningBoolError"
		- NEIGH  = { comparisonOfFuncReturningBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"tok"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"style"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"expression"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"normal"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"comparisonOfTwoFuncsReturningBoolError"
		- NEIGH  = { comparisonOfTwoFuncsReturningBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"expression1"
		- NEIGH  = { expression1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"expression2"
		- NEIGH  = { expression2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"tok"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"style"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"expression1"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"expression2"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"normal"
		- NEIGH  = { Certainty , CWE398 , expression2 , + , Severity , style , normal , expression1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

222 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

222 :	"checkComparisonOfBoolWithBool"
		- NEIGH  = { checkComparisonOfBoolWithBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"if"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

226 :	"!"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

226 :	"mSettings"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

226 :	"certainty"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

226 :	"isEnabled"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

226 :	"Certainty"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

226 :	"experimental"
		- NEIGH  = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

227 :	"return"
		- NEIGH  = { return , }
		- PARENT = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"if"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

229 :	"!"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

229 :	"mSettings"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

229 :	"severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

229 :	"isEnabled"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

229 :	"Severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

229 :	"style"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , Certainty , certainty , isEnabled , mSettings , ! , if , }
		- SUCC   = { mTokenizer , ! , isCPP , if , }

230 :	"return"
		- NEIGH  = { return , }
		- PARENT = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

232 :	"if"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

232 :	"!"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

232 :	"mTokenizer"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

232 :	"isCPP"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

233 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , ! , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

235 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

235 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

235 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

235 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

237 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

237 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

237 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

237 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

237 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

237 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

238 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

238 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { secondToken , secondTokenBool , next , varId , previous , * , ! , Token , == , if , str , firstTokenBool , isComparisonOp , tok , || , firstToken , }
		- PRED   = { }
		- SUCC   = { }

239 :	"if"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"!"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"isComparisonOp"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"||"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"tok"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"str"
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

239 :	"=="
		- NEIGH  = { == , str , isComparisonOp , tok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { firstTokenBool , }

240 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , str , isComparisonOp , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

241 :	"firstTokenBool"
		- NEIGH  = { firstTokenBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { == , str , isComparisonOp , tok , || , ! , if , }
		- SUCC   = { previous , tok , firstToken , * , Token , }

243 :	"Token"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

243 :	"*"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

243 :	"firstToken"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

243 :	"tok"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

243 :	"previous"
		- NEIGH  = { previous , tok , firstToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , }
		- SUCC   = { firstToken , varId , if , }

244 :	"if"
		- NEIGH  = { firstToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , firstToken , isBool , if , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { firstTokenBool , ! , if , }

244 :	"firstToken"
		- NEIGH  = { firstToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , firstToken , isBool , if , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { firstTokenBool , ! , if , }

244 :	"varId"
		- NEIGH  = { firstToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , firstToken , isBool , if , }
		- PRED   = { previous , tok , firstToken , * , Token , }
		- SUCC   = { firstTokenBool , ! , if , }

245 :	"if"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

245 :	"isBool"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

245 :	"firstToken"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

245 :	"variable"
		- NEIGH  = { variable , firstToken , isBool , if , }
		- PARENT = { firstToken , varId , if , }
		- CHILD  = { firstTokenBool , }
		- PRED   = { }
		- SUCC   = { }

246 :	"firstTokenBool"
		- NEIGH  = { firstTokenBool , }
		- PARENT = { variable , firstToken , isBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

249 :	"if"
		- NEIGH  = { firstTokenBool , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { firstToken , varId , if , }
		- SUCC   = { secondTokenBool , }

249 :	"!"
		- NEIGH  = { firstTokenBool , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { firstToken , varId , if , }
		- SUCC   = { secondTokenBool , }

249 :	"firstTokenBool"
		- NEIGH  = { firstTokenBool , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { firstToken , varId , if , }
		- SUCC   = { secondTokenBool , }

250 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { firstTokenBool , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

252 :	"secondTokenBool"
		- NEIGH  = { secondTokenBool , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { firstTokenBool , ! , if , }
		- SUCC   = { next , tok , secondToken , * , Token , }

253 :	"Token"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

253 :	"*"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

253 :	"secondToken"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

253 :	"tok"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

253 :	"next"
		- NEIGH  = { next , tok , secondToken , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondTokenBool , }
		- SUCC   = { secondToken , varId , if , }

254 :	"if"
		- NEIGH  = { secondToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , secondToken , isBool , if , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { secondTokenBool , if , }

254 :	"secondToken"
		- NEIGH  = { secondToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , secondToken , isBool , if , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { secondTokenBool , if , }

254 :	"varId"
		- NEIGH  = { secondToken , varId , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { variable , secondToken , isBool , if , }
		- PRED   = { next , tok , secondToken , * , Token , }
		- SUCC   = { secondTokenBool , if , }

255 :	"if"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

255 :	"isBool"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

255 :	"secondToken"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

255 :	"variable"
		- NEIGH  = { variable , secondToken , isBool , if , }
		- PARENT = { secondToken , varId , if , }
		- CHILD  = { secondTokenBool , }
		- PRED   = { }
		- SUCC   = { }

256 :	"secondTokenBool"
		- NEIGH  = { secondTokenBool , }
		- PARENT = { variable , secondToken , isBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"if"
		- NEIGH  = { secondTokenBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PRED   = { secondToken , varId , if , }
		- SUCC   = { }

259 :	"secondTokenBool"
		- NEIGH  = { secondTokenBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PRED   = { secondToken , varId , if , }
		- SUCC   = { }

260 :	"comparisonOfBoolWithBoolError"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"firstToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"next"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"secondToken"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"str"
		- NEIGH  = { str , next , secondToken , firstToken , comparisonOfBoolWithBoolError , }
		- PARENT = { secondTokenBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"comparisonOfBoolWithBoolError"
		- NEIGH  = { comparisonOfBoolWithBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"expression"
		- NEIGH  = { expression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"tok"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

268 :	"style"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"expression"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

270 :	"+"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"normal"
		- NEIGH  = { Certainty , CWE398 , expression , + , Severity , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

276 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

276 :	"checkAssignBoolToPointer"
		- NEIGH  = { checkAssignBoolToPointer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

278 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

278 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

278 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

278 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

278 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

279 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

279 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

279 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

279 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

279 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

279 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

280 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

280 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PRED   = { }
		- SUCC   = { }

281 :	"if"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"str"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"=="
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"astIsPointer"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"astOperand1"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"astIsBool"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

281 :	"astOperand2"
		- NEIGH  = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToPointerError , }
		- PRED   = { }
		- SUCC   = { }

282 :	"assignBoolToPointerError"
		- NEIGH  = { tok , assignBoolToPointerError , }
		- PARENT = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

282 :	"tok"
		- NEIGH  = { tok , assignBoolToPointerError , }
		- PARENT = { astIsBool , astOperand1 , == , && , str , tok , astOperand2 , astIsPointer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"assignBoolToPointerError"
		- NEIGH  = { assignBoolToPointerError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

290 :	"reportError"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

290 :	"tok"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

290 :	"Severity"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

290 :	"error"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

291 :	"CWE587"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

291 :	"Certainty"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

291 :	"normal"
		- NEIGH  = { Certainty , error , CWE587 , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

296 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

296 :	"checkComparisonOfBoolExpressionWithInt"
		- NEIGH  = { checkComparisonOfBoolExpressionWithInt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

298 :	"if"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

298 :	"!"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

298 :	"mSettings"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

298 :	"severity"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

298 :	"isEnabled"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

298 :	"Severity"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

298 :	"warning"
		- NEIGH  = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

299 :	"return"
		- NEIGH  = { return , }
		- PARENT = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

301 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

301 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

301 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

301 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

301 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warning , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

303 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

303 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

303 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

303 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

303 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

303 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

304 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

304 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { maxval , * , mSettings , Value , isName , intvalue , numInRhs , && , ValueFlow , getValueGE , isOp , || , Token , == , astOperand1 , astIsBool , boolExpr , getValueLE , ! , Match , isComparisonOp , tok , minval , numTok , if , }
		- PRED   = { }
		- SUCC   = { }

305 :	"if"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

305 :	"!"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

305 :	"tok"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

305 :	"isComparisonOp"
		- NEIGH  = { isComparisonOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { numTok , * , Token , }

306 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isComparisonOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

308 :	"Token"
		- NEIGH  = { numTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , ! , if , }
		- SUCC   = { boolExpr , * , Token , }

308 :	"*"
		- NEIGH  = { numTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , ! , if , }
		- SUCC   = { boolExpr , * , Token , }

308 :	"numTok"
		- NEIGH  = { numTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , ! , if , }
		- SUCC   = { boolExpr , * , Token , }

309 :	"Token"
		- NEIGH  = { boolExpr , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , * , Token , }
		- SUCC   = { numInRhs , }

309 :	"*"
		- NEIGH  = { boolExpr , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , * , Token , }
		- SUCC   = { numInRhs , }

309 :	"boolExpr"
		- NEIGH  = { boolExpr , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , * , Token , }
		- SUCC   = { numInRhs , }

310 :	"numInRhs"
		- NEIGH  = { numInRhs , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { boolExpr , * , Token , }
		- SUCC   = { astOperand1 , tok , astIsBool , if , }

311 :	"if"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

311 :	"astIsBool"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

311 :	"tok"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

311 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astIsBool , numInRhs , if , astOperand2 , numTok , astOperand1 , tok , boolExpr , }
		- PRED   = { numInRhs , }
		- SUCC   = { boolExpr , numTok , || , ! , if , }

312 :	"boolExpr"
		- NEIGH  = { astOperand1 , tok , boolExpr , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , numTok , }

312 :	"tok"
		- NEIGH  = { astOperand1 , tok , boolExpr , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , numTok , }

312 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , boolExpr , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , tok , numTok , }

313 :	"numTok"
		- NEIGH  = { astOperand2 , tok , numTok , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

313 :	"tok"
		- NEIGH  = { astOperand2 , tok , numTok , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

313 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , numTok , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

314 :	"numInRhs"
		- NEIGH  = { numInRhs , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , numTok , }
		- SUCC   = { }

315 :	"if"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

315 :	"astIsBool"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

315 :	"tok"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

315 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , astIsBool , if , }
		- PARENT = { astOperand1 , tok , astIsBool , if , }
		- CHILD  = { continue , numInRhs , astOperand1 , numTok , astOperand2 , tok , boolExpr , }
		- PRED   = { }
		- SUCC   = { }

316 :	"boolExpr"
		- NEIGH  = { astOperand2 , tok , boolExpr , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , numTok , }

316 :	"tok"
		- NEIGH  = { astOperand2 , tok , boolExpr , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , numTok , }

316 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , boolExpr , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , numTok , }

317 :	"numTok"
		- NEIGH  = { tok , astOperand1 , numTok , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

317 :	"tok"
		- NEIGH  = { tok , astOperand1 , numTok , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

317 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , numTok , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { astOperand2 , tok , boolExpr , }
		- SUCC   = { numInRhs , }

318 :	"numInRhs"
		- NEIGH  = { numInRhs , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , numTok , }
		- SUCC   = { }

320 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand2 , tok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

323 :	"if"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

323 :	"!"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

323 :	"numTok"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

323 :	"||"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

323 :	"!"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

323 :	"boolExpr"
		- NEIGH  = { boolExpr , numTok , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , tok , astIsBool , if , }
		- SUCC   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }

324 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { boolExpr , numTok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

326 :	"if"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"boolExpr"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"isOp"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"&&"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"numTok"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"isName"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"&&"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"Token"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"Match"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

326 :	"tok"
		- NEIGH  = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { boolExpr , numTok , || , ! , if , }
		- SUCC   = { numTok , astIsBool , if , }

329 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

331 :	"if"
		- NEIGH  = { numTok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- SUCC   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }

331 :	"astIsBool"
		- NEIGH  = { numTok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- SUCC   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }

331 :	"numTok"
		- NEIGH  = { numTok , astIsBool , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Match , isName , if , numTok , Token , isOp , && , boolExpr , }
		- SUCC   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }

332 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { numTok , astIsBool , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

334 :	"ValueFlow"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

334 :	"Value"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

334 :	"*"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

334 :	"minval"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

334 :	"numTok"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

334 :	"getValueLE"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

334 :	"mSettings"
		- NEIGH  = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { numTok , astIsBool , if , }
		- SUCC   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }

335 :	"if"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

335 :	"minval"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

335 :	"&&"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

335 :	"minval"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

335 :	"intvalue"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

335 :	"=="
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

335 :	"&&"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

336 :	"numInRhs"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

336 :	"Token"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

336 :	"Match"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

336 :	"tok"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

337 :	"Token"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

337 :	"Match"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

337 :	"tok"
		- NEIGH  = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { minval , }
		- PRED   = { mSettings , numTok , getValueLE , * , minval , Value , ValueFlow , }
		- SUCC   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }

338 :	"minval"
		- NEIGH  = { minval , }
		- PARENT = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

340 :	"ValueFlow"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

340 :	"Value"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

340 :	"*"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

340 :	"maxval"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

340 :	"numTok"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

340 :	"getValueGE"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

340 :	"mSettings"
		- NEIGH  = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , numInRhs , && , == , intvalue , Match , minval , if , }
		- SUCC   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }

341 :	"if"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

341 :	"maxval"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

341 :	"&&"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

341 :	"maxval"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

341 :	"intvalue"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

341 :	"=="
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

341 :	"&&"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

342 :	"numInRhs"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

342 :	"Token"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

342 :	"Match"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

342 :	"tok"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

343 :	"Token"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

343 :	"Match"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

343 :	"tok"
		- NEIGH  = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { maxval , }
		- PRED   = { mSettings , getValueGE , numTok , maxval , * , Value , ValueFlow , }
		- SUCC   = { maxval , || , minval , if , }

344 :	"maxval"
		- NEIGH  = { maxval , }
		- PARENT = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

346 :	"if"
		- NEIGH  = { maxval , || , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PRED   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- SUCC   = { }

346 :	"minval"
		- NEIGH  = { maxval , || , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PRED   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- SUCC   = { }

346 :	"||"
		- NEIGH  = { maxval , || , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PRED   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- SUCC   = { }

346 :	"maxval"
		- NEIGH  = { maxval , || , minval , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , comparisonOfBoolExpressionWithIntError , > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PRED   = { Match , Token , numInRhs , && , == , intvalue , tok , maxval , if , }
		- SUCC   = { }

347 :	"not0or1"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"minval"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"&&"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"minval"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"intvalue"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"<"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"||"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"maxval"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"&&"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"maxval"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	"intvalue"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

347 :	">"
		- NEIGH  = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }

348 :	"comparisonOfBoolExpressionWithIntError"
		- NEIGH  = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- SUCC   = { }

348 :	"tok"
		- NEIGH  = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- SUCC   = { }

348 :	"not0or1"
		- NEIGH  = { not0or1 , tok , comparisonOfBoolExpressionWithIntError , }
		- PARENT = { maxval , || , minval , if , }
		- CHILD  = { }
		- PRED   = { > , maxval , || , && , minval , < , intvalue , not0or1 , }
		- SUCC   = { }

354 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

354 :	"comparisonOfBoolExpressionWithIntError"
		- NEIGH  = { comparisonOfBoolExpressionWithIntError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

354 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

354 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

354 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

354 :	"not0or1"
		- NEIGH  = { not0or1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

356 :	"if"
		- NEIGH  = { not0or1 , if , }
		- PARENT = { }
		- CHILD  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

356 :	"not0or1"
		- NEIGH  = { not0or1 , if , }
		- PARENT = { }
		- CHILD  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

357 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

357 :	"tok"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

357 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

357 :	"warning"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"normal"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"reportError"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"tok"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"Severity"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"warning"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"CWE398"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"Certainty"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"normal"
		- NEIGH  = { Certainty , CWE398 , normal , warning , tok , Severity , reportError , }
		- PARENT = { not0or1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"pointerArithBool"
		- NEIGH  = { pointerArithBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

367 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

367 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

367 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

367 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

367 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

369 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , next , tok , scope , * , eFor , isLoopScope , && , classDef , ! , Token , astOperand2 , eIf , Scope , != , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

369 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , next , tok , scope , * , eFor , isLoopScope , && , classDef , ! , Token , astOperand2 , eIf , Scope , != , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

369 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , next , tok , scope , * , eFor , isLoopScope , && , classDef , ! , Token , astOperand2 , eIf , Scope , != , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

369 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , next , tok , scope , * , eFor , isLoopScope , && , classDef , ! , Token , astOperand2 , eIf , Scope , != , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

369 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , next , tok , scope , * , eFor , isLoopScope , && , classDef , ! , Token , astOperand2 , eIf , Scope , != , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

369 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { pointerArithBoolCond , == , next , tok , scope , * , eFor , isLoopScope , && , classDef , ! , Token , astOperand2 , eIf , Scope , != , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

370 :	"if"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"scope"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"type"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"!="
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"Scope"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"eIf"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"&&"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"!"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"scope"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

370 :	"isLoopScope"
		- NEIGH  = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand2 , scope , classDef , tok , * , next , Token , }

371 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

372 :	"Token"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

372 :	"*"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

372 :	"tok"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

372 :	"scope"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

372 :	"classDef"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

372 :	"next"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

372 :	"astOperand2"
		- NEIGH  = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { isLoopScope , && , eIf , Scope , != , type , scope , ! , if , }
		- SUCC   = { eFor , == , type , Scope , scope , if , }

373 :	"if"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

373 :	"scope"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

373 :	"type"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

373 :	"=="
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

373 :	"Scope"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

373 :	"eFor"
		- NEIGH  = { eFor , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , if , tokAt , scope , Token , eDo , classDef , type , findsimplematch , Scope , tok , }
		- PRED   = { astOperand2 , scope , classDef , tok , * , next , Token , }
		- SUCC   = { tok , pointerArithBoolCond , }

374 :	"tok"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

374 :	"Token"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

374 :	"findsimplematch"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

374 :	"scope"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

374 :	"classDef"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

374 :	"tokAt"
		- NEIGH  = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , if , }

375 :	"if"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand2 , tok , }
		- PRED   = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- SUCC   = { tok , if , }

375 :	"tok"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand2 , tok , }
		- PRED   = { tokAt , scope , Token , classDef , findsimplematch , tok , }
		- SUCC   = { tok , if , }

376 :	"tok"
		- NEIGH  = { astOperand2 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

376 :	"tok"
		- NEIGH  = { astOperand2 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

376 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

377 :	"if"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand1 , tok , }
		- PRED   = { tok , if , }
		- SUCC   = { }

377 :	"tok"
		- NEIGH  = { tok , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { astOperand1 , tok , }
		- PRED   = { tok , if , }
		- SUCC   = { }

378 :	"tok"
		- NEIGH  = { astOperand1 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

378 :	"tok"
		- NEIGH  = { astOperand1 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

378 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , }
		- PARENT = { tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

379 :	"if"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

379 :	"scope"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

379 :	"type"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

379 :	"=="
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

379 :	"Scope"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

379 :	"eDo"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { eFor , == , type , Scope , scope , if , }
		- CHILD  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { }

380 :	"tok"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"scope"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"bodyEnd"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"tokAt"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"scope"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"bodyEnd"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"tokAt"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"astOperand2"
		- NEIGH  = { tokAt , astOperand2 , bodyEnd , scope , tok , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

382 :	"pointerArithBoolCond"
		- NEIGH  = { tok , pointerArithBoolCond , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eFor , == , type , Scope , scope , if , }
		- SUCC   = { }

382 :	"tok"
		- NEIGH  = { tok , pointerArithBoolCond , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eFor , == , type , Scope , scope , if , }
		- SUCC   = { }

386 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

386 :	"pointerArithBoolCond"
		- NEIGH  = { pointerArithBoolCond , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

386 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

386 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

386 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

388 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

388 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

388 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

389 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

390 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

390 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

390 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

390 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , return , astOperand2 , pointerArithBoolCond , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { && , str , != , tok , if , }

391 :	"pointerArithBoolCond"
		- NEIGH  = { astOperand1 , tok , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , pointerArithBoolCond , }

391 :	"tok"
		- NEIGH  = { astOperand1 , tok , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , pointerArithBoolCond , }

391 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , pointerArithBoolCond , }

392 :	"pointerArithBoolCond"
		- NEIGH  = { tok , astOperand2 , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , pointerArithBoolCond , }
		- SUCC   = { return , }

392 :	"tok"
		- NEIGH  = { tok , astOperand2 , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , pointerArithBoolCond , }
		- SUCC   = { return , }

392 :	"astOperand2"
		- NEIGH  = { tok , astOperand2 , pointerArithBoolCond , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , tok , pointerArithBoolCond , }
		- SUCC   = { return , }

393 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , astOperand2 , pointerArithBoolCond , }
		- SUCC   = { }

395 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

395 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }

396 :	"return"
		- NEIGH  = { return , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

398 :	"if"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

398 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

398 :	"isBinaryOp"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

398 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"astOperand1"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"isName"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

399 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"astOperand1"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"variable"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

400 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"astOperand1"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"variable"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"isPointer"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

401 :	"&&"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"tok"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"astOperand2"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

402 :	"isNumber"
		- NEIGH  = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { tok , pointerArithBoolError , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { }

403 :	"pointerArithBoolError"
		- NEIGH  = { tok , pointerArithBoolError , }
		- PARENT = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

403 :	"tok"
		- NEIGH  = { tok , pointerArithBoolError , }
		- PARENT = { isNumber , variable , astOperand1 , isPointer , && , isName , isBinaryOp , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

406 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

406 :	"pointerArithBoolError"
		- NEIGH  = { pointerArithBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

406 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

406 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

406 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

408 :	"reportError"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

408 :	"tok"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"Severity"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"error"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

412 :	"CWE571"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

412 :	"Certainty"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

412 :	"normal"
		- NEIGH  = { Certainty , CWE571 , error , normal , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

415 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

415 :	"checkAssignBoolToFloat"
		- NEIGH  = { checkAssignBoolToFloat , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

417 :	"if"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

417 :	"!"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

417 :	"mTokenizer"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

417 :	"isCPP"
		- NEIGH  = { mTokenizer , ! , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { style , Severity , severity , isEnabled , mSettings , ! , if , }

418 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , ! , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

419 :	"if"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

419 :	"!"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

419 :	"mSettings"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

419 :	"severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

419 :	"isEnabled"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

419 :	"Severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

419 :	"style"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { mTokenizer , ! , isCPP , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

420 :	"return"
		- NEIGH  = { return , }
		- PARENT = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

421 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

421 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

421 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

421 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

421 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

422 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

422 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

422 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

422 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

422 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

422 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

423 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

423 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

424 :	"if"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"str"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"=="
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"astIsFloat"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"astOperand1"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"&&"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"astIsBool"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

424 :	"astOperand2"
		- NEIGH  = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignBoolToFloatError , }
		- PRED   = { }
		- SUCC   = { }

425 :	"assignBoolToFloatError"
		- NEIGH  = { tok , assignBoolToFloatError , }
		- PARENT = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

425 :	"tok"
		- NEIGH  = { tok , assignBoolToFloatError , }
		- PARENT = { astIsBool , astOperand1 , astIsFloat , == , && , str , tok , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

431 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

431 :	"assignBoolToFloatError"
		- NEIGH  = { assignBoolToFloatError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

431 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

431 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

431 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

433 :	"reportError"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

433 :	"tok"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

433 :	"Severity"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

433 :	"style"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"CWE704"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"Certainty"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

434 :	"normal"
		- NEIGH  = { Certainty , Severity , CWE704 , style , normal , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

437 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

437 :	"returnValueOfFunctionReturningBool"
		- NEIGH  = { returnValueOfFunctionReturningBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

439 :	"if"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

439 :	"!"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

439 :	"mSettings"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

439 :	"severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

439 :	"isEnabled"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

439 :	"Severity"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

439 :	"style"
		- NEIGH  = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

440 :	"return"
		- NEIGH  = { return , }
		- PARENT = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

442 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

442 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

442 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

442 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

442 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { style , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

444 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

444 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

444 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

444 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

444 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

444 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , retDef , Match , != , for , ! , Token , && , tok , function , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

445 :	"if"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"!"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"scope"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"function"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"&&"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"Token"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"Match"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"scope"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"function"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

445 :	"retDef"
		- NEIGH  = { retDef , Match , Token , && , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

446 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { retDef , Match , Token , && , function , scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

448 :	"for"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"Token"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"*"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"bodyStart"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"&&"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"!="
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"bodyEnd"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

448 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , tok , findLambdaEndToken , tok2 , * , Token , }
		- PRED   = { retDef , Match , Token , && , function , scope , ! , if , }
		- SUCC   = { }

450 :	"Token"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

450 :	"*"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

450 :	"tok2"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

450 :	"findLambdaEndToken"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

450 :	"tok"
		- NEIGH  = { tok , findLambdaEndToken , tok2 , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , if , }

451 :	"if"
		- NEIGH  = { tok2 , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isClassOrStruct , && , scope , if , tok2 , tok , }
		- PRED   = { tok , findLambdaEndToken , tok2 , * , Token , }
		- SUCC   = { }

451 :	"tok2"
		- NEIGH  = { tok2 , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isClassOrStruct , && , scope , if , tok2 , tok , }
		- PRED   = { tok , findLambdaEndToken , tok2 , * , Token , }
		- SUCC   = { }

452 :	"tok"
		- NEIGH  = { tok2 , tok , }
		- PARENT = { tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

452 :	"tok2"
		- NEIGH  = { tok2 , tok , }
		- PARENT = { tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"if"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

453 :	"tok"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

453 :	"scope"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

453 :	"&&"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

453 :	"tok"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

453 :	"scope"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

453 :	"isClassOrStruct"
		- NEIGH  = { isClassOrStruct , && , scope , tok , if , }
		- PARENT = { tok2 , if , }
		- CHILD  = { Match , getValueGE , - , || , bodyEnd , astOperand1 , && , mSettings , simpleMatch , ! , Token , if , tok , getValueLE , scope , }
		- PRED   = { }
		- SUCC   = { }

454 :	"tok"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

454 :	"tok"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

454 :	"scope"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

454 :	"bodyEnd"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"if"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"Token"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"simpleMatch"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

455 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"getValueGE"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"mSettings"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"||"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"getValueLE"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"-"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"mSettings"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

456 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"!"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"&&"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"Token"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"Match"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"tok"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

457 :	"astOperand1"
		- NEIGH  = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- PARENT = { isClassOrStruct , && , scope , tok , if , }
		- CHILD  = { tok , returnValueBoolError , }
		- PRED   = { }
		- SUCC   = { }

458 :	"returnValueBoolError"
		- NEIGH  = { tok , returnValueBoolError , }
		- PARENT = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

458 :	"tok"
		- NEIGH  = { tok , returnValueBoolError , }
		- PARENT = { Match , || , - , getValueLE , getValueGE , astOperand1 , && , tok , mSettings , simpleMatch , ! , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"CheckBool"
		- NEIGH  = { CheckBool , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"returnValueBoolError"
		- NEIGH  = { returnValueBoolError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

465 :	"reportError"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

465 :	"tok"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

465 :	"Severity"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

465 :	"style"
		- NEIGH  = { style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

