34 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"CWE398"
		- NEIGH  = { CWE398 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"CWE758"
		- NEIGH  = { CWE758 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"Check64BitPortability"
		- NEIGH  = { Check64BitPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"instance"
		- NEIGH  = { instance , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"Check64BitPortability"
		- NEIGH  = { Check64BitPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"pointerassignment"
		- NEIGH  = { pointerassignment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"if"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

44 :	"!"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

44 :	"mSettings"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

44 :	"severity"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

44 :	"isEnabled"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

44 :	"Severity"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

44 :	"portability"
		- NEIGH  = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

45 :	"return"
		- NEIGH  = { return , }
		- PARENT = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

47 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

47 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

47 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

47 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , Severity , severity , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

50 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , bodyStart , != , for , || , - , tok , strAt , * , scope , hasBody , token , bodyEnd , == , function , retPointer , Token , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

50 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , bodyStart , != , for , || , - , tok , strAt , * , scope , hasBody , token , bodyEnd , == , function , retPointer , Token , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

50 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , bodyStart , != , for , || , - , tok , strAt , * , scope , hasBody , token , bodyEnd , == , function , retPointer , Token , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

50 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , bodyStart , != , for , || , - , tok , strAt , * , scope , hasBody , token , bodyEnd , == , function , retPointer , Token , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

50 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , bodyStart , != , for , || , - , tok , strAt , * , scope , hasBody , token , bodyEnd , == , function , retPointer , Token , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

50 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , bodyStart , != , for , || , - , tok , strAt , * , scope , hasBody , token , bodyEnd , == , function , retPointer , Token , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

51 :	"if"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"scope"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"function"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"=="
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"||"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"!"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"scope"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"function"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

51 :	"hasBody"
		- NEIGH  = { hasBody , || , == , function , scope , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { retPointer , }

52 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { hasBody , || , == , function , scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"retPointer"
		- NEIGH  = { retPointer , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { hasBody , || , == , function , scope , ! , if , }
		- SUCC   = { == , - , token , strAt , function , scope , if , }

55 :	"if"
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

55 :	"scope"
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

55 :	"function"
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

55 :	"token"
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

55 :	"strAt"
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

55 :	"-"
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

55 :	"=="
		- NEIGH  = { == , - , token , strAt , function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { previous , token , function , retPointer , scope , Match , if , Token , }
		- PRED   = { retPointer , }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

56 :	"retPointer"
		- NEIGH  = { retPointer , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

57 :	"if"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

57 :	"Token"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

57 :	"Match"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

57 :	"scope"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

57 :	"function"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

57 :	"token"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

57 :	"previous"
		- NEIGH  = { previous , token , function , scope , Token , Match , if , }
		- PARENT = { == , - , token , strAt , function , scope , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

60 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { previous , token , function , scope , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

62 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

62 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { pointer , retPointer , >= , && , returnType , * , ValueType , isNumber , || , valueType , == , astOperand1 , if , str , typeScope , tok , != , ! , }
		- PRED   = { == , - , token , strAt , function , scope , if , }
		- SUCC   = { }

64 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PRED   = { }
		- SUCC   = { str , != , tok , if , }

64 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PRED   = { }
		- SUCC   = { str , != , tok , if , }

64 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PRED   = { }
		- SUCC   = { str , != , tok , if , }

64 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PRED   = { }
		- SUCC   = { str , != , tok , if , }

65 :	"if"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"tok"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"scope"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"type"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"=="
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"Scope"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"ScopeType"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"eFunction"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"||"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"tok"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"scope"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"type"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"=="
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"Scope"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"ScopeType"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

65 :	"eLambda"
		- NEIGH  = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { }

66 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"link"
		- NEIGH  = { link , tok , }
		- PARENT = { || , eLambda , eFunction , ScopeType , scope , == , type , Scope , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"if"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { isNumber , || , astOperand1 , tok , ! , if , }

69 :	"tok"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { isNumber , || , astOperand1 , tok , ! , if , }

69 :	"str"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { isNumber , || , astOperand1 , tok , ! , if , }

69 :	"!="
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { isNumber , || , astOperand1 , tok , ! , if , }

70 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

72 :	"if"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"!"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"tok"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"astOperand1"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"||"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"tok"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"astOperand1"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

72 :	"isNumber"
		- NEIGH  = { isNumber , || , astOperand1 , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { valueType , tok , returnType , astOperand1 , * , ValueType , }

73 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isNumber , || , astOperand1 , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"ValueType"
		- NEIGH  = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isNumber , || , astOperand1 , tok , ! , if , }
		- SUCC   = { returnType , ! , if , }

75 :	"*"
		- NEIGH  = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isNumber , || , astOperand1 , tok , ! , if , }
		- SUCC   = { returnType , ! , if , }

75 :	"returnType"
		- NEIGH  = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isNumber , || , astOperand1 , tok , ! , if , }
		- SUCC   = { returnType , ! , if , }

75 :	"tok"
		- NEIGH  = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isNumber , || , astOperand1 , tok , ! , if , }
		- SUCC   = { returnType , ! , if , }

75 :	"astOperand1"
		- NEIGH  = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isNumber , || , astOperand1 , tok , ! , if , }
		- SUCC   = { returnType , ! , if , }

75 :	"valueType"
		- NEIGH  = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isNumber , || , astOperand1 , tok , ! , if , }
		- SUCC   = { returnType , ! , if , }

76 :	"if"
		- NEIGH  = { returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- SUCC   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }

76 :	"!"
		- NEIGH  = { returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- SUCC   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }

76 :	"returnType"
		- NEIGH  = { returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , returnType , astOperand1 , * , ValueType , }
		- SUCC   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }

77 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { returnType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

79 :	"if"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"retPointer"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"&&"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"!"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"returnType"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"typeScope"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"&&"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"returnType"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"pointer"
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

79 :	"=="
		- NEIGH  = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnIntegerError , }
		- PRED   = { returnType , ! , if , }
		- SUCC   = { >= , pointer , && , retPointer , returnType , ! , if , }

80 :	"returnIntegerError"
		- NEIGH  = { tok , returnIntegerError , }
		- PARENT = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

80 :	"tok"
		- NEIGH  = { tok , returnIntegerError , }
		- PARENT = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

82 :	"if"
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

82 :	"!"
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

82 :	"retPointer"
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

82 :	"&&"
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

82 :	"returnType"
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

82 :	"pointer"
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

82 :	">="
		- NEIGH  = { >= , pointer , && , retPointer , returnType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , returnPointerError , }
		- PRED   = { pointer , typeScope , returnType , if , ! , == , && , retPointer , }
		- SUCC   = { }

83 :	"returnPointerError"
		- NEIGH  = { tok , returnPointerError , }
		- PARENT = { >= , pointer , && , retPointer , returnType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"tok"
		- NEIGH  = { tok , returnPointerError , }
		- PARENT = { >= , pointer , && , retPointer , returnType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- SUCC   = { }

88 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- SUCC   = { }

88 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- SUCC   = { }

88 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- SUCC   = { }

88 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- SUCC   = { }

88 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- SUCC   = { }

89 :	"for"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"Token"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"*"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"bodyStart"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"&&"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"!="
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"bodyEnd"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

89 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { CHAR , isIntegral , == , empty , isNumber , originalTypeName , && , >= , pointer , tok , type , || , * , valueType , INT , ! , astOperand1 , lhstype , ValueType , <= , if , str , rhstype , astOperand2 , != , Type , }
		- PRED   = { }
		- SUCC   = { }

90 :	"if"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }

90 :	"tok"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }

90 :	"str"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }

90 :	"!="
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }

91 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"ValueType"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"*"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"lhstype"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"tok"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"astOperand1"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"tok"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"astOperand1"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

93 :	"valueType"
		- NEIGH  = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }

94 :	"ValueType"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"*"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"rhstype"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"tok"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"astOperand2"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"tok"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"astOperand2"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

94 :	"valueType"
		- NEIGH  = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , tok , astOperand1 , * , lhstype , ValueType , }
		- SUCC   = { rhstype , lhstype , || , ! , if , }

95 :	"if"
		- NEIGH  = { rhstype , lhstype , || , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- SUCC   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }

95 :	"!"
		- NEIGH  = { rhstype , lhstype , || , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- SUCC   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }

95 :	"lhstype"
		- NEIGH  = { rhstype , lhstype , || , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- SUCC   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }

95 :	"||"
		- NEIGH  = { rhstype , lhstype , || , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- SUCC   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }

95 :	"!"
		- NEIGH  = { rhstype , lhstype , || , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- SUCC   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }

95 :	"rhstype"
		- NEIGH  = { rhstype , lhstype , || , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , valueType , rhstype , tok , * , ValueType , }
		- SUCC   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }

96 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { rhstype , lhstype , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

99 :	"if"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

99 :	"lhstype"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

99 :	"pointer"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

99 :	">="
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

99 :	"&&"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

100 :	"!"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

100 :	"tok"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

100 :	"astOperand2"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

100 :	"isNumber"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

100 :	"&&"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

101 :	"rhstype"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

101 :	"pointer"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

101 :	"=="
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

101 :	"&&"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

102 :	"rhstype"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

102 :	"originalTypeName"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

102 :	"empty"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

102 :	"&&"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

103 :	"rhstype"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

103 :	"type"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

103 :	"=="
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

103 :	"ValueType"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

103 :	"Type"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

103 :	"INT"
		- NEIGH  = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentIntegerToAddressError , }
		- PRED   = { rhstype , lhstype , || , ! , if , }
		- SUCC   = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }

104 :	"assignmentIntegerToAddressError"
		- NEIGH  = { tok , assignmentIntegerToAddressError , }
		- PARENT = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"tok"
		- NEIGH  = { tok , assignmentIntegerToAddressError , }
		- PARENT = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"if"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

107 :	"rhstype"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

107 :	"pointer"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

107 :	">="
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

107 :	"&&"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

108 :	"lhstype"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

108 :	"pointer"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

108 :	"=="
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

108 :	"&&"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

109 :	"lhstype"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

109 :	"originalTypeName"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

109 :	"empty"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

109 :	"&&"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

110 :	"lhstype"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

110 :	"isIntegral"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

110 :	"&&"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	"lhstype"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	"type"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	">="
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	"ValueType"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	"Type"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	"CHAR"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

111 :	"&&"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

112 :	"lhstype"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

112 :	"type"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

112 :	"<="
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

112 :	"ValueType"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

112 :	"Type"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

112 :	"INT"
		- NEIGH  = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , assignmentAddressToIntegerError , }
		- PRED   = { ValueType , type , empty , rhstype , tok , originalTypeName , && , >= , isNumber , pointer , == , lhstype , Type , astOperand2 , INT , ! , if , }
		- SUCC   = { }

113 :	"assignmentAddressToIntegerError"
		- NEIGH  = { tok , assignmentAddressToIntegerError , }
		- PARENT = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

113 :	"tok"
		- NEIGH  = { tok , assignmentAddressToIntegerError , }
		- PARENT = { INT , <= , CHAR , Type , ValueType , && , >= , originalTypeName , lhstype , type , empty , pointer , == , if , isIntegral , rhstype , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

118 :	"Check64BitPortability"
		- NEIGH  = { Check64BitPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

118 :	"assignmentAddressToIntegerError"
		- NEIGH  = { assignmentAddressToIntegerError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

118 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

118 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

118 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"reportError"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"tok"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"Severity"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"portability"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"CWE758"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"Certainty"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"normal"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"Check64BitPortability"
		- NEIGH  = { Check64BitPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"assignmentIntegerToAddressError"
		- NEIGH  = { assignmentIntegerToAddressError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"reportError"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"tok"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"Severity"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"portability"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

137 :	"CWE758"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

137 :	"Certainty"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

137 :	"normal"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"Check64BitPortability"
		- NEIGH  = { Check64BitPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"returnPointerError"
		- NEIGH  = { returnPointerError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

140 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"reportError"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"tok"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"Severity"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

142 :	"portability"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"CWE758"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"Certainty"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"normal"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"Check64BitPortability"
		- NEIGH  = { Check64BitPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"returnIntegerError"
		- NEIGH  = { returnIntegerError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

153 :	"reportError"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

153 :	"tok"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

153 :	"Severity"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

153 :	"portability"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"CWE758"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"Certainty"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"normal"
		- NEIGH  = { Certainty , Severity , CWE758 , normal , portability , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

