7 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

7 :	"stere"
		- NEIGH  = { stere , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

8 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

8 :	"ups"
		- NEIGH  = { ups , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

15 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

16 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

21 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

22 :	"phits"
		- NEIGH  = { phits , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"sinX1"
		- NEIGH  = { sinX1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

24 :	"cosX1"
		- NEIGH  = { cosX1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

25 :	"akm1"
		- NEIGH  = { akm1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"ssfn_"
		- NEIGH  = { ssfn_ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"phit"
		- NEIGH  = { phit , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"sinphi"
		- NEIGH  = { sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"eccen"
		- NEIGH  = { eccen , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"sinphi"
		- NEIGH  = { eccen , *= , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }

38 :	"*="
		- NEIGH  = { eccen , *= , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }

38 :	"eccen"
		- NEIGH  = { eccen , *= , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }

39 :	"return"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

39 :	"tan"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

39 :	"*"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

39 :	"M_HALFPI"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

39 :	"+"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

39 :	"phit"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

39 :	"*"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"pow"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"-"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"sinphi"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"/"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"+"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"sinphi"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"*"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

40 :	"eccen"
		- NEIGH  = { / , sinphi , phit , * , eccen , M_HALFPI , - , pow , return , tan , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eccen , *= , sinphi , }
		- SUCC   = { }

44 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"e_forward"
		- NEIGH  = { e_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

45 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

45 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

46 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

46 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }

47 :	"coslam"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

47 :	"sinlam"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

47 :	"sinX"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

47 :	"cosX"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

47 :	"X"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

47 :	"A"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

47 :	"sinphi"
		- NEIGH  = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , lp , cos , coslam , }

49 :	"coslam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

49 :	"cos"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

49 :	"lp"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

49 :	"lam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , A , X , cosX , sinlam , sinX , coslam , }
		- SUCC   = { lam , sin , lp , sinlam , }

50 :	"sinlam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

50 :	"sin"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

50 :	"lp"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

50 :	"lam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { phi , lp , sin , sinphi , }

51 :	"sinphi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

51 :	"sin"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

51 :	"lp"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

51 :	"phi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { EQUIT , || , == , mode , OBLIQ , Q , if , }

52 :	"if"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"Q"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"mode"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"=="
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"OBLIQ"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"||"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"Q"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"mode"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"=="
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

52 :	"EQUIT"
		- NEIGH  = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- PARENT = { }
		- CHILD  = { cos , M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , cosX , phi , }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { mode , Q , switch , }

53 :	"sinX"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"sin"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"X"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"*"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"atan"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"ssfn_"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"lp"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"phi"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"sinphi"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"P"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"e"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"-"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

53 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { X , cos , cosX , }

54 :	"cosX"
		- NEIGH  = { X , cos , cosX , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- SUCC   = { }

54 :	"cos"
		- NEIGH  = { X , cos , cosX , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- SUCC   = { }

54 :	"X"
		- NEIGH  = { X , cos , cosX , }
		- PARENT = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , e , P , ssfn_ , * , X , sinX , sin , sinphi , lp , atan , phi , }
		- SUCC   = { }

57 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { e , P , N_POLE , sinphi , phi , lp , S_POLE , xmul , break , * , EQUIT , Q , xy , - , y , pj_tsfn , sinX1 , + , coslam , OBLIQ , cosX1 , A , if , sinX , / , x , akm1 , == , cosX , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { sinlam , * , x , xy , }

57 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { e , P , N_POLE , sinphi , phi , lp , S_POLE , xmul , break , * , EQUIT , Q , xy , - , y , pj_tsfn , sinX1 , + , coslam , OBLIQ , cosX1 , A , if , sinX , / , x , akm1 , == , cosX , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { sinlam , * , x , xy , }

57 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { e , P , N_POLE , sinphi , phi , lp , S_POLE , xmul , break , * , EQUIT , Q , xy , - , y , pj_tsfn , sinX1 , + , coslam , OBLIQ , cosX1 , A , if , sinX , / , x , akm1 , == , cosX , }
		- PRED   = { EQUIT , || , == , mode , OBLIQ , Q , if , }
		- SUCC   = { sinlam , * , x , xy , }

58 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }

59 :	"A"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"Q"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"akm1"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"/"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"Q"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"cosX1"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"*"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"+"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"Q"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"sinX1"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"*"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"sinX"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

59 :	"+"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

60 :	"Q"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

60 :	"cosX1"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

60 :	"*"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

60 :	"cosX"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

60 :	"*"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

60 :	"coslam"
		- NEIGH  = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }

61 :	"xy"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"y"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"A"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"*"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"Q"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"cosX1"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"*"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"sinX"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"-"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"Q"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"sinX1"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"*"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"cosX"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"*"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

61 :	"coslam"
		- NEIGH  = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX , sinX1 , + , * , cosX1 , sinX , / , akm1 , Q , A , }
		- SUCC   = { xmul , }

62 :	"xmul"
		- NEIGH  = { xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosX , sinX1 , - , sinX , cosX1 , Q , A , * , y , coslam , xy , }
		- SUCC   = { EQUIT , }

64 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xmul , }
		- SUCC   = { == , * , cosX , coslam , + , if , }

66 :	"if"
		- NEIGH  = { == , * , cosX , coslam , + , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { sinX , cosX , + , / , akm1 , coslam , Q , A , xy , HUGE_VAL , * , y , }
		- PRED   = { EQUIT , }
		- SUCC   = { cosX , * , x , xy , A , xmul , }

66 :	"+"
		- NEIGH  = { == , * , cosX , coslam , + , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { sinX , cosX , + , / , akm1 , coslam , Q , A , xy , HUGE_VAL , * , y , }
		- PRED   = { EQUIT , }
		- SUCC   = { cosX , * , x , xy , A , xmul , }

66 :	"cosX"
		- NEIGH  = { == , * , cosX , coslam , + , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { sinX , cosX , + , / , akm1 , coslam , Q , A , xy , HUGE_VAL , * , y , }
		- PRED   = { EQUIT , }
		- SUCC   = { cosX , * , x , xy , A , xmul , }

66 :	"*"
		- NEIGH  = { == , * , cosX , coslam , + , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { sinX , cosX , + , / , akm1 , coslam , Q , A , xy , HUGE_VAL , * , y , }
		- PRED   = { EQUIT , }
		- SUCC   = { cosX , * , x , xy , A , xmul , }

66 :	"coslam"
		- NEIGH  = { == , * , cosX , coslam , + , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { sinX , cosX , + , / , akm1 , coslam , Q , A , xy , HUGE_VAL , * , y , }
		- PRED   = { EQUIT , }
		- SUCC   = { cosX , * , x , xy , A , xmul , }

66 :	"=="
		- NEIGH  = { == , * , cosX , coslam , + , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { sinX , cosX , + , / , akm1 , coslam , Q , A , xy , HUGE_VAL , * , y , }
		- PRED   = { EQUIT , }
		- SUCC   = { cosX , * , x , xy , A , xmul , }

67 :	"xy"
		- NEIGH  = { HUGE_VAL , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"y"
		- NEIGH  = { HUGE_VAL , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"HUGE_VAL"
		- NEIGH  = { HUGE_VAL , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"A"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"Q"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"akm1"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"/"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"+"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"cosX"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"*"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

69 :	"coslam"
		- NEIGH  = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sinX , A , * , y , xy , }

70 :	"xy"
		- NEIGH  = { sinX , A , * , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- SUCC   = { }

70 :	"y"
		- NEIGH  = { sinX , A , * , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- SUCC   = { }

70 :	"A"
		- NEIGH  = { sinX , A , * , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- SUCC   = { }

70 :	"*"
		- NEIGH  = { sinX , A , * , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- SUCC   = { }

70 :	"sinX"
		- NEIGH  = { sinX , A , * , y , xy , }
		- PARENT = { == , * , cosX , coslam , + , if , }
		- CHILD  = { }
		- PRED   = { coslam , * , cosX , + , / , akm1 , Q , A , }
		- SUCC   = { }

72 :	"xmul"
		- NEIGH  = { cosX , * , x , xy , A , xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , * , cosX , coslam , + , if , }
		- SUCC   = { break , }

73 :	"xy"
		- NEIGH  = { cosX , * , x , xy , A , xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , * , cosX , coslam , + , if , }
		- SUCC   = { break , }

73 :	"x"
		- NEIGH  = { cosX , * , x , xy , A , xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , * , cosX , coslam , + , if , }
		- SUCC   = { break , }

73 :	"A"
		- NEIGH  = { cosX , * , x , xy , A , xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , * , cosX , coslam , + , if , }
		- SUCC   = { break , }

73 :	"*"
		- NEIGH  = { cosX , * , x , xy , A , xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , * , cosX , coslam , + , if , }
		- SUCC   = { break , }

73 :	"cosX"
		- NEIGH  = { cosX , * , x , xy , A , xmul , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , * , cosX , coslam , + , if , }
		- SUCC   = { break , }

74 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosX , * , x , xy , A , xmul , }
		- SUCC   = { S_POLE , }

76 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , phi , lp , }

77 :	"lp"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { - , coslam , }

77 :	"phi"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { - , coslam , }

77 :	"-"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { - , coslam , }

77 :	"lp"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { - , coslam , }

77 :	"phi"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { - , coslam , }

78 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , phi , lp , }
		- SUCC   = { - , sinphi , }

78 :	"-"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , phi , lp , }
		- SUCC   = { - , sinphi , }

78 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , phi , lp , }
		- SUCC   = { - , sinphi , }

79 :	"sinphi"
		- NEIGH  = { - , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { N_POLE , }

79 :	"-"
		- NEIGH  = { - , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { N_POLE , }

79 :	"sinphi"
		- NEIGH  = { - , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { N_POLE , }

81 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , sinphi , }
		- SUCC   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }

82 :	"xy"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"x"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"Q"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"akm1"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"*"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"pj_tsfn"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"lp"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"phi"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"sinphi"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"P"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

82 :	"e"
		- NEIGH  = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , y , * , x , coslam , xy , }

83 :	"xy"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

83 :	"y"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

83 :	"-"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

83 :	"xy"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

83 :	"x"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

83 :	"*"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

83 :	"coslam"
		- NEIGH  = { - , y , * , x , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , phi , sinphi , lp , akm1 , Q , pj_tsfn , * , x , xy , }
		- SUCC   = { break , }

84 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , coslam , xy , }
		- SUCC   = { }

87 :	"xy"
		- NEIGH  = { sinlam , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

87 :	"x"
		- NEIGH  = { sinlam , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

87 :	"xy"
		- NEIGH  = { sinlam , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

87 :	"x"
		- NEIGH  = { sinlam , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

87 :	"*"
		- NEIGH  = { sinlam , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

87 :	"sinlam"
		- NEIGH  = { sinlam , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { xy , return , }

88 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinlam , * , x , xy , }
		- SUCC   = { }

88 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinlam , * , x , xy , }
		- SUCC   = { }

92 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

92 :	"s_forward"
		- NEIGH  = { s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

92 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

92 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

92 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

92 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

92 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

93 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

94 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

94 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { sinlam , coslam , cosphi , sinphi , }

95 :	"sinphi"
		- NEIGH  = { sinlam , coslam , cosphi , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

95 :	"cosphi"
		- NEIGH  = { sinlam , coslam , cosphi , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

95 :	"coslam"
		- NEIGH  = { sinlam , coslam , cosphi , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

95 :	"sinlam"
		- NEIGH  = { sinlam , coslam , cosphi , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi , lp , sin , sinphi , }

97 :	"sinphi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinlam , coslam , cosphi , sinphi , }
		- SUCC   = { phi , lp , cos , cosphi , }

97 :	"sin"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinlam , coslam , cosphi , sinphi , }
		- SUCC   = { phi , lp , cos , cosphi , }

97 :	"lp"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinlam , coslam , cosphi , sinphi , }
		- SUCC   = { phi , lp , cos , cosphi , }

97 :	"phi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinlam , coslam , cosphi , sinphi , }
		- SUCC   = { phi , lp , cos , cosphi , }

98 :	"cosphi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

98 :	"cos"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

98 :	"lp"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

98 :	"phi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { lam , lp , cos , coslam , }

99 :	"coslam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { lam , sin , lp , sinlam , }

99 :	"cos"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { lam , sin , lp , sinlam , }

99 :	"lp"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { lam , sin , lp , sinlam , }

99 :	"lam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { lam , sin , lp , sinlam , }

100 :	"sinlam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { mode , Q , switch , }

100 :	"sin"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { mode , Q , switch , }

100 :	"lp"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { mode , Q , switch , }

100 :	"lam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { mode , Q , switch , }

102 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { tan , fabs , S_POLE , lp , N_POLE , == , phi , mode , / , akm1 , M_FORTPI , x , sinX1 , break , sinlam , opaque , P , M_HALFPI , > , pj_opaque , cosX1 , sinphi , coslam , OBLIQ , y , oblcon , - , Q , xy , cosphi , < , *= , * , static_cast , EQUIT , if , <= , + , }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { xy , return , }

102 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { tan , fabs , S_POLE , lp , N_POLE , == , phi , mode , / , akm1 , M_FORTPI , x , sinX1 , break , sinlam , opaque , P , M_HALFPI , > , pj_opaque , cosX1 , sinphi , coslam , OBLIQ , y , oblcon , - , Q , xy , cosphi , < , *= , * , static_cast , EQUIT , if , <= , + , }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { xy , return , }

102 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { tan , fabs , S_POLE , lp , N_POLE , == , phi , mode , / , akm1 , M_FORTPI , x , sinX1 , break , sinlam , opaque , P , M_HALFPI , > , pj_opaque , cosX1 , sinphi , coslam , OBLIQ , y , oblcon , - , Q , xy , cosphi , < , *= , * , static_cast , EQUIT , if , <= , + , }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { xy , return , }

103 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { cosphi , + , * , y , coslam , xy , }

104 :	"xy"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

104 :	"y"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

104 :	"+"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

104 :	"cosphi"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

104 :	"*"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

104 :	"coslam"
		- NEIGH  = { cosphi , + , * , y , coslam , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { oblcon , }

105 :	"oblcon"
		- NEIGH  = { oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosphi , + , * , y , coslam , xy , }
		- SUCC   = { OBLIQ , }

106 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { oblcon , }
		- SUCC   = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }

107 :	"xy"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"y"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"+"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"static_cast"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"<"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"pj_opaque"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"*"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	">"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"P"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"opaque"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"sinX1"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"*"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"sinphi"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"+"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"static_cast"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"<"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"pj_opaque"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"*"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	">"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"P"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"opaque"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"cosX1"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"*"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"cosphi"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"*"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

107 :	"coslam"
		- NEIGH  = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { <= , y , xy , if , oblcon , }

108 :	"oblcon"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- SUCC   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }

109 :	"if"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- SUCC   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }

109 :	"xy"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- SUCC   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }

109 :	"y"
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- SUCC   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }

109 :	"<="
		- NEIGH  = { <= , y , xy , if , oblcon , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { coslam , cosX1 , sinphi , opaque , P , > , sinX1 , pj_opaque , cosphi , xy , < , + , static_cast , * , y , }
		- SUCC   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }

110 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

110 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

110 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

111 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

111 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { <= , y , xy , if , oblcon , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

113 :	"xy"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"x"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"xy"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"y"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"Q"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"akm1"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"/"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"xy"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"y"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"*"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"cosphi"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"*"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

113 :	"sinlam"
		- NEIGH  = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , y , xy , if , oblcon , }
		- SUCC   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }

114 :	"xy"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"y"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"*="
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"Q"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"mode"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"=="
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"EQUIT"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

114 :	"sinphi"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"static_cast"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"<"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"pj_opaque"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"*"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	">"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"P"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"opaque"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"cosX1"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"*"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"sinphi"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"-"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"static_cast"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"<"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"pj_opaque"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"*"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	">"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"P"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"opaque"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"sinX1"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"*"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"cosphi"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"*"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

115 :	"coslam"
		- NEIGH  = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinlam , cosphi , / , akm1 , Q , * , y , x , xy , }
		- SUCC   = { break , }

116 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinX1 , P , > , * , static_cast , pj_opaque , cosX1 , sinphi , cosphi , xy , < , EQUIT , opaque , == , mode , coslam , Q , *= , - , y , }
		- SUCC   = { N_POLE , }

117 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , coslam , }

118 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , phi , lp , }

118 :	"-"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , phi , lp , }

118 :	"coslam"
		- NEIGH  = { - , coslam , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { - , phi , lp , }

119 :	"lp"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { S_POLE , }

119 :	"phi"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { S_POLE , }

119 :	"-"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { S_POLE , }

119 :	"lp"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { S_POLE , }

119 :	"phi"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , coslam , }
		- SUCC   = { S_POLE , }

121 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , phi , lp , }
		- SUCC   = { < , M_HALFPI , - , phi , lp , fabs , if , }

122 :	"if"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

122 :	"fabs"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

122 :	"lp"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

122 :	"phi"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

122 :	"-"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

122 :	"M_HALFPI"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

122 :	"<"
		- NEIGH  = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { S_POLE , }
		- SUCC   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }

123 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

123 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

123 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

124 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

124 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

126 :	"xy"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"x"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"sinlam"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"*"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"xy"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"y"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"Q"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"akm1"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"*"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"tan"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"M_FORTPI"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"+"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"*"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"lp"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

126 :	"phi"
		- NEIGH  = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , phi , lp , fabs , if , }
		- SUCC   = { coslam , *= , y , xy , }

127 :	"xy"
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- SUCC   = { break , }

127 :	"y"
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- SUCC   = { break , }

127 :	"*="
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- SUCC   = { break , }

127 :	"coslam"
		- NEIGH  = { coslam , *= , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , + , M_FORTPI , tan , x , akm1 , Q , sinlam , y , * , xy , }
		- SUCC   = { break , }

128 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { coslam , *= , y , xy , }
		- SUCC   = { }

130 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

130 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

134 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"e_inverse"
		- NEIGH  = { e_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

134 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

135 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

136 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

136 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }

137 :	"cosphi"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

137 :	"sinphi"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

137 :	"tp"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

137 :	"phi_l"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

137 :	"rho"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

137 :	"halfe"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

137 :	"halfpi"
		- NEIGH  = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { i , }

138 :	"i"
		- NEIGH  = { i , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi_l , rho , tp , halfpi , halfe , sinphi , cosphi , }
		- SUCC   = { y , x , xy , hypot , rho , }

140 :	"rho"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , }
		- SUCC   = { mode , Q , switch , }

140 :	"hypot"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , }
		- SUCC   = { mode , Q , switch , }

140 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , }
		- SUCC   = { mode , Q , switch , }

140 :	"x"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , }
		- SUCC   = { mode , Q , switch , }

140 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , }
		- SUCC   = { mode , Q , switch , }

140 :	"y"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , }
		- SUCC   = { mode , Q , switch , }

142 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { / , S_POLE , N_POLE , break , e , P , halfpi , sinX1 , halfe , sin , y , * , EQUIT , *= , phi_l , + , tan , == , if , sinphi , OBLIQ , cosX1 , x , atan , akm1 , atan2 , cos , - , xy , Q , M_HALFPI , tp , cosphi , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { -- , i , for , }

142 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { / , S_POLE , N_POLE , break , e , P , halfpi , sinX1 , halfe , sin , y , * , EQUIT , *= , phi_l , + , tan , == , if , sinphi , OBLIQ , cosX1 , x , atan , akm1 , atan2 , cos , - , xy , Q , M_HALFPI , tp , cosphi , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { -- , i , for , }

142 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { / , S_POLE , N_POLE , break , e , P , halfpi , sinX1 , halfe , sin , y , * , EQUIT , *= , phi_l , + , tan , == , if , sinphi , OBLIQ , cosX1 , x , atan , akm1 , atan2 , cos , - , xy , Q , M_HALFPI , tp , cosphi , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { -- , i , for , }

143 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { EQUIT , }

144 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }

145 :	"cosphi"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"cos"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"tp"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"*"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"atan2"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"rho"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"*"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"Q"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"cosX1"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"Q"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

145 :	"akm1"
		- NEIGH  = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { sin , tp , sinphi , }

146 :	"sinphi"
		- NEIGH  = { sin , tp , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- SUCC   = { == , rho , if , }

146 :	"sin"
		- NEIGH  = { sin , tp , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- SUCC   = { == , rho , if , }

146 :	"tp"
		- NEIGH  = { sin , tp , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosX1 , rho , akm1 , atan2 , * , cos , Q , tp , cosphi , }
		- SUCC   = { == , rho , if , }

147 :	"if"
		- NEIGH  = { == , rho , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PRED   = { sin , tp , sinphi , }
		- SUCC   = { + , * , M_HALFPI , phi_l , tan , tp , }

147 :	"rho"
		- NEIGH  = { == , rho , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PRED   = { sin , tp , sinphi , }
		- SUCC   = { + , * , M_HALFPI , phi_l , tan , tp , }

147 :	"=="
		- NEIGH  = { == , rho , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PRED   = { sin , tp , sinphi , }
		- SUCC   = { + , * , M_HALFPI , phi_l , tan , tp , }

148 :	"phi_l"
		- NEIGH  = { sinX1 , * , cosphi , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"asin"
		- NEIGH  = { sinX1 , * , cosphi , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"cosphi"
		- NEIGH  = { sinX1 , * , cosphi , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"*"
		- NEIGH  = { sinX1 , * , cosphi , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"Q"
		- NEIGH  = { sinX1 , * , cosphi , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

148 :	"sinX1"
		- NEIGH  = { sinX1 , * , cosphi , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"phi_l"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"asin"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"cosphi"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"*"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"Q"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"sinX1"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"+"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"xy"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"y"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"*"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"sinphi"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"*"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"Q"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"cosX1"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"/"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

150 :	"rho"
		- NEIGH  = { rho , / , sinphi , cosX1 , cosphi , xy , + , sinX1 , y , * , asin , Q , phi_l , }
		- PARENT = { == , rho , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

152 :	"tp"
		- NEIGH  = { + , * , M_HALFPI , phi_l , tan , tp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , rho , if , }
		- SUCC   = { sinphi , *= , x , xy , }

152 :	"tan"
		- NEIGH  = { + , * , M_HALFPI , phi_l , tan , tp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , rho , if , }
		- SUCC   = { sinphi , *= , x , xy , }

152 :	"*"
		- NEIGH  = { + , * , M_HALFPI , phi_l , tan , tp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , rho , if , }
		- SUCC   = { sinphi , *= , x , xy , }

152 :	"M_HALFPI"
		- NEIGH  = { + , * , M_HALFPI , phi_l , tan , tp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , rho , if , }
		- SUCC   = { sinphi , *= , x , xy , }

152 :	"+"
		- NEIGH  = { + , * , M_HALFPI , phi_l , tan , tp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , rho , if , }
		- SUCC   = { sinphi , *= , x , xy , }

152 :	"phi_l"
		- NEIGH  = { + , * , M_HALFPI , phi_l , tan , tp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , rho , if , }
		- SUCC   = { sinphi , *= , x , xy , }

153 :	"xy"
		- NEIGH  = { sinphi , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , M_HALFPI , phi_l , tan , tp , }
		- SUCC   = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }

153 :	"x"
		- NEIGH  = { sinphi , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , M_HALFPI , phi_l , tan , tp , }
		- SUCC   = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }

153 :	"*="
		- NEIGH  = { sinphi , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , M_HALFPI , phi_l , tan , tp , }
		- SUCC   = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }

153 :	"sinphi"
		- NEIGH  = { sinphi , *= , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , M_HALFPI , phi_l , tan , tp , }
		- SUCC   = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }

154 :	"xy"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"y"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"rho"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"*"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"Q"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"cosX1"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"*"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"cosphi"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"-"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"xy"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"y"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"*"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"Q"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"sinX1"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"*"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

154 :	"sinphi"
		- NEIGH  = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , *= , x , xy , }
		- SUCC   = { M_HALFPI , halfpi , }

155 :	"halfpi"
		- NEIGH  = { M_HALFPI , halfpi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- SUCC   = { e , * , P , halfe , }

155 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , halfpi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sinphi , sinX1 , - , cosphi , cosX1 , Q , rho , * , y , xy , }
		- SUCC   = { e , * , P , halfe , }

156 :	"halfe"
		- NEIGH  = { e , * , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , halfpi , }
		- SUCC   = { break , }

156 :	"*"
		- NEIGH  = { e , * , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , halfpi , }
		- SUCC   = { break , }

156 :	"P"
		- NEIGH  = { e , * , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , halfpi , }
		- SUCC   = { break , }

156 :	"e"
		- NEIGH  = { e , * , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , halfpi , }
		- SUCC   = { break , }

157 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , * , P , halfe , }
		- SUCC   = { N_POLE , }

158 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , y , xy , }

159 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

159 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

159 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

159 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

159 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

161 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }

162 :	"phi_l"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"M_HALFPI"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"-"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"*"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"atan"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"tp"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"-"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"rho"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"/"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"Q"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

162 :	"akm1"
		- NEIGH  = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { M_HALFPI , - , halfpi , }

163 :	"halfpi"
		- NEIGH  = { M_HALFPI , - , halfpi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- SUCC   = { * , e , - , P , halfe , }

163 :	"-"
		- NEIGH  = { M_HALFPI , - , halfpi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- SUCC   = { * , e , - , P , halfe , }

163 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , halfpi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , rho , Q , tp , * , akm1 , phi_l , - , M_HALFPI , atan , }
		- SUCC   = { * , e , - , P , halfe , }

164 :	"halfe"
		- NEIGH  = { * , e , - , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , halfpi , }
		- SUCC   = { break , }

164 :	"-"
		- NEIGH  = { * , e , - , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , halfpi , }
		- SUCC   = { break , }

164 :	"*"
		- NEIGH  = { * , e , - , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , halfpi , }
		- SUCC   = { break , }

164 :	"P"
		- NEIGH  = { * , e , - , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , halfpi , }
		- SUCC   = { break , }

164 :	"e"
		- NEIGH  = { * , e , - , P , halfe , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , halfpi , }
		- SUCC   = { break , }

165 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , e , - , P , halfe , }
		- SUCC   = { }

168 :	"for"
		- NEIGH  = { -- , i , for , }
		- PARENT = { }
		- CHILD  = { < , fabs , halfe , - , / , + , halfpi , tp , phi , pow , phi_l , P , e , if , sin , * , atan , lp , sinphi , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }

168 :	"i"
		- NEIGH  = { -- , i , for , }
		- PARENT = { }
		- CHILD  = { < , fabs , halfe , - , / , + , halfpi , tp , phi , pow , phi_l , P , e , if , sin , * , atan , lp , sinphi , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }

168 :	"i"
		- NEIGH  = { -- , i , for , }
		- PARENT = { }
		- CHILD  = { < , fabs , halfe , - , / , + , halfpi , tp , phi , pow , phi_l , P , e , if , sin , * , atan , lp , sinphi , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }

168 :	"--"
		- NEIGH  = { -- , i , for , }
		- PARENT = { }
		- CHILD  = { < , fabs , halfe , - , / , + , halfpi , tp , phi , pow , phi_l , P , e , if , sin , * , atan , lp , sinphi , }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }

169 :	"sinphi"
		- NEIGH  = { phi_l , e , sin , * , P , sinphi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }

169 :	"P"
		- NEIGH  = { phi_l , e , sin , * , P , sinphi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }

169 :	"e"
		- NEIGH  = { phi_l , e , sin , * , P , sinphi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }

169 :	"*"
		- NEIGH  = { phi_l , e , sin , * , P , sinphi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }

169 :	"sin"
		- NEIGH  = { phi_l , e , sin , * , P , sinphi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }

169 :	"phi_l"
		- NEIGH  = { phi_l , e , sin , * , P , sinphi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }

170 :	"lp"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"phi"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"*"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"atan"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"tp"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"*"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"pow"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"+"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"sinphi"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"/"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"-"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"sinphi"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"halfe"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"-"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

170 :	"halfpi"
		- NEIGH  = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { phi_l , e , sin , * , P , sinphi , }
		- SUCC   = { < , phi , lp , - , phi_l , fabs , if , }

171 :	"if"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

171 :	"fabs"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

171 :	"phi_l"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

171 :	"-"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

171 :	"lp"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

171 :	"phi"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

171 :	"<"
		- NEIGH  = { < , phi , lp , - , phi_l , fabs , if , }
		- PARENT = { -- , i , for , }
		- CHILD  = { atan2 , return , y , x , xy , lam , lp , && , S_POLE , == , mode , Q , if , }
		- PRED   = { + , - , pow , halfpi , tp , halfe , sinphi , lp , atan , * , / , phi , }
		- SUCC   = { phi , lp , phi_l , }

172 :	"if"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { - , phi , lp , }
		- PRED   = { }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

172 :	"Q"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { - , phi , lp , }
		- PRED   = { }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

172 :	"mode"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { - , phi , lp , }
		- PRED   = { }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

172 :	"=="
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { - , phi , lp , }
		- PRED   = { }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

172 :	"S_POLE"
		- NEIGH  = { S_POLE , == , mode , Q , if , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { - , phi , lp , }
		- PRED   = { }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

173 :	"lp"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

173 :	"phi"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

173 :	"-"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

173 :	"lp"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

173 :	"phi"
		- NEIGH  = { - , phi , lp , }
		- PARENT = { S_POLE , == , mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

174 :	"lp"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"lam"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"x"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"=="
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"&&"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"y"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"=="
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"atan2"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"x"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

174 :	"y"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { S_POLE , == , mode , Q , if , }
		- SUCC   = { lp , return , }

175 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { atan2 , y , && , == , x , xy , lam , lp , }
		- SUCC   = { }

175 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { < , phi , lp , - , phi_l , fabs , if , }
		- CHILD  = { }
		- PRED   = { atan2 , y , && , == , x , xy , lam , lp , }
		- SUCC   = { }

177 :	"phi_l"
		- NEIGH  = { phi , lp , phi_l , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { < , phi , lp , - , phi_l , fabs , if , }
		- SUCC   = { }

177 :	"lp"
		- NEIGH  = { phi , lp , phi_l , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { < , phi , lp , - , phi_l , fabs , if , }
		- SUCC   = { }

177 :	"phi"
		- NEIGH  = { phi , lp , phi_l , }
		- PARENT = { -- , i , for , }
		- CHILD  = { }
		- PRED   = { < , phi , lp , - , phi_l , fabs , if , }
		- SUCC   = { }

180 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { -- , i , for , }
		- SUCC   = { lp , return , }

180 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { -- , i , for , }
		- SUCC   = { lp , return , }

180 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { -- , i , for , }
		- SUCC   = { lp , return , }

181 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

181 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

185 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"s_inverse"
		- NEIGH  = { s_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

186 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

186 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

187 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

187 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { cosc , rh , sinc , c , }

188 :	"c"
		- NEIGH  = { cosc , rh , sinc , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }

188 :	"rh"
		- NEIGH  = { cosc , rh , sinc , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }

188 :	"sinc"
		- NEIGH  = { cosc , rh , sinc , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }

188 :	"cosc"
		- NEIGH  = { cosc , rh , sinc , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }

190 :	"sinc"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"sin"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"c"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"*"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"atan"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"rh"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"hypot"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"xy"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"x"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"xy"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"y"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"/"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"Q"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

190 :	"akm1"
		- NEIGH  = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosc , rh , sinc , c , }
		- SUCC   = { c , cos , cosc , }

191 :	"cosc"
		- NEIGH  = { c , cos , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- SUCC   = { lam , lp , }

191 :	"cos"
		- NEIGH  = { c , cos , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- SUCC   = { lam , lp , }

191 :	"c"
		- NEIGH  = { c , cos , cosc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , / , akm1 , x , xy , atan , rh , y , hypot , sinc , * , sin , c , }
		- SUCC   = { lam , lp , }

192 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c , cos , cosc , }
		- SUCC   = { mode , Q , switch , }

192 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { c , cos , cosc , }
		- SUCC   = { mode , Q , switch , }

194 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { atan2 , && , == , N_POLE , phi , lp , break , opaque , P , > , EQUIT , static_cast , * , pj_opaque , sinX1 , c , != , < , - , xy , x , rh , S_POLE , || , OBLIQ , cosc , fabs , y , sin , lam , if , <= , }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

194 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { atan2 , && , == , N_POLE , phi , lp , break , opaque , P , > , EQUIT , static_cast , * , pj_opaque , sinX1 , c , != , < , - , xy , x , rh , S_POLE , || , OBLIQ , cosc , fabs , y , sin , lam , if , <= , }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

194 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { atan2 , && , == , N_POLE , phi , lp , break , opaque , P , > , EQUIT , static_cast , * , pj_opaque , sinX1 , c , != , < , - , xy , x , rh , S_POLE , || , OBLIQ , cosc , fabs , y , sin , lam , if , <= , }
		- PRED   = { lam , lp , }
		- SUCC   = { lp , return , }

195 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { <= , rh , fabs , if , }

196 :	"if"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PRED   = { EQUIT , }
		- SUCC   = { xy , x , || , != , cosc , if , }

196 :	"fabs"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PRED   = { EQUIT , }
		- SUCC   = { xy , x , || , != , cosc , if , }

196 :	"rh"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PRED   = { EQUIT , }
		- SUCC   = { xy , x , || , != , cosc , if , }

196 :	"<="
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PRED   = { EQUIT , }
		- SUCC   = { xy , x , || , != , cosc , if , }

197 :	"lp"
		- NEIGH  = { phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"phi"
		- NEIGH  = { phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"lp"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"phi"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"asin"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"xy"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"y"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"*"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"sinc"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"/"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

199 :	"rh"
		- NEIGH  = { rh , sinc , * , y , xy , asin , / , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

200 :	"if"
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

200 :	"cosc"
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

200 :	"!="
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

200 :	"||"
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

200 :	"xy"
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

200 :	"x"
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

200 :	"!="
		- NEIGH  = { xy , x , || , != , cosc , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

201 :	"lp"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"lam"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"atan2"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"xy"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"x"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"*"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"sinc"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"cosc"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"*"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"rh"
		- NEIGH  = { rh , cosc , sinc , * , x , xy , lam , atan2 , lp , }
		- PARENT = { xy , x , || , != , cosc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

202 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { xy , x , || , != , cosc , if , }
		- SUCC   = { OBLIQ , }

203 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { <= , rh , fabs , if , }

204 :	"if"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { / , sinc , rh , y , + , sinX1 , * , cosX1 , cosc , xy , < , P , asin , static_cast , phi0 , > , opaque , phi , pj_opaque , lp , }
		- PRED   = { OBLIQ , }
		- SUCC   = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }

204 :	"fabs"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { / , sinc , rh , y , + , sinX1 , * , cosX1 , cosc , xy , < , P , asin , static_cast , phi0 , > , opaque , phi , pj_opaque , lp , }
		- PRED   = { OBLIQ , }
		- SUCC   = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }

204 :	"rh"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { / , sinc , rh , y , + , sinX1 , * , cosX1 , cosc , xy , < , P , asin , static_cast , phi0 , > , opaque , phi , pj_opaque , lp , }
		- PRED   = { OBLIQ , }
		- SUCC   = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }

204 :	"<="
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { / , sinc , rh , y , + , sinX1 , * , cosX1 , cosc , xy , < , P , asin , static_cast , phi0 , > , opaque , phi , pj_opaque , lp , }
		- PRED   = { OBLIQ , }
		- SUCC   = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }

205 :	"lp"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"phi"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"P"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"phi0"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"lp"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"phi"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"asin"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"cosc"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"static_cast"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"<"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"pj_opaque"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	">"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"P"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"opaque"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"sinX1"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"+"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"xy"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"y"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"sinc"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"static_cast"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"<"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"pj_opaque"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	">"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"P"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"opaque"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"cosX1"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"/"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"rh"
		- NEIGH  = { / , sinc , rh , y , + , sinX1 , phi , opaque , asin , P , static_cast , cosX1 , cosc , * , xy , < , > , pj_opaque , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"if"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"c"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"cosc"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"-"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"static_cast"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"<"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"pj_opaque"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"*"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	">"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"P"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"opaque"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"sinX1"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"*"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"sin"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"lp"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"phi"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"!="
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"||"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"xy"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"x"
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

208 :	"!="
		- NEIGH  = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

209 :	"lp"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"lam"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"atan2"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"xy"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"x"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"*"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"sinc"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"*"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"static_cast"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"<"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"pj_opaque"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"*"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	">"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"P"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"opaque"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"cosX1"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"c"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"*"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

209 :	"rh"
		- NEIGH  = { rh , c , cosX1 , opaque , P , > , xy , < , static_cast , sinc , * , x , lp , lam , atan2 , pj_opaque , }
		- PARENT = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { x , != , lp , phi , opaque , P , > , pj_opaque , xy , < , sin , if , static_cast , || , - , * , cosc , sinX1 , c , }
		- SUCC   = { N_POLE , }

211 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { - , y , xy , }

212 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

212 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

212 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

212 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

212 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { S_POLE , }

214 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , y , xy , }
		- SUCC   = { <= , rh , fabs , if , }

215 :	"if"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosc , - , S_POLE , == , mode , Q , asin , phi0 , P , phi , lp , }
		- PRED   = { S_POLE , }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

215 :	"fabs"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosc , - , S_POLE , == , mode , Q , asin , phi0 , P , phi , lp , }
		- PRED   = { S_POLE , }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

215 :	"rh"
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosc , - , S_POLE , == , mode , Q , asin , phi0 , P , phi , lp , }
		- PRED   = { S_POLE , }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

215 :	"<="
		- NEIGH  = { <= , rh , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosc , - , S_POLE , == , mode , Q , asin , phi0 , P , phi , lp , }
		- PRED   = { S_POLE , }
		- SUCC   = { atan2 , y , && , == , x , xy , lam , lp , }

216 :	"lp"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"phi"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"P"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"phi0"
		- NEIGH  = { phi0 , P , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"lp"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"phi"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"asin"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"Q"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"mode"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"=="
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"S_POLE"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"-"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"cosc"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"cosc"
		- NEIGH  = { cosc , - , S_POLE , == , mode , Q , asin , phi , lp , }
		- PARENT = { <= , rh , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

219 :	"lp"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"lam"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"x"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"=="
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"&&"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"y"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"=="
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"atan2"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"x"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"xy"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

219 :	"y"
		- NEIGH  = { atan2 , y , && , == , x , xy , lam , lp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { <= , rh , fabs , if , }
		- SUCC   = { break , }

220 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { atan2 , y , && , == , x , xy , lam , lp , }
		- SUCC   = { }

222 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

222 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

226 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"setup"
		- NEIGH  = { setup , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

227 :	"t"
		- NEIGH  = { t , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

228 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

228 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }

230 :	"if"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"fabs"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"t"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"fabs"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"P"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"phi0"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"-"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"M_HALFPI"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

230 :	"<"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- PARENT = { }
		- CHILD  = { > , t , N_POLE , phi0 , EQUIT , < , S_POLE , mode , OBLIQ , P , Q , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { fabs , phits , Q , }

231 :	"Q"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"mode"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"P"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"phi0"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"<"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"S_POLE"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"N_POLE"
		- NEIGH  = { N_POLE , phi0 , < , S_POLE , mode , P , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"Q"
		- NEIGH  = { EQUIT , > , t , mode , OBLIQ , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"mode"
		- NEIGH  = { EQUIT , > , t , mode , OBLIQ , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"t"
		- NEIGH  = { EQUIT , > , t , mode , OBLIQ , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	">"
		- NEIGH  = { EQUIT , > , t , mode , OBLIQ , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"OBLIQ"
		- NEIGH  = { EQUIT , > , t , mode , OBLIQ , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"EQUIT"
		- NEIGH  = { EQUIT , > , t , mode , OBLIQ , Q , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"Q"
		- NEIGH  = { fabs , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- SUCC   = { != , es , P , if , }

234 :	"phits"
		- NEIGH  = { fabs , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- SUCC   = { != , es , P , if , }

234 :	"fabs"
		- NEIGH  = { fabs , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- SUCC   = { != , es , P , if , }

234 :	"Q"
		- NEIGH  = { fabs , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- SUCC   = { != , es , P , if , }

234 :	"phits"
		- NEIGH  = { fabs , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , M_HALFPI , - , if , phi0 , fabs , P , t , }
		- SUCC   = { != , es , P , if , }

236 :	"if"
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , s_inverse , e_forward , inv , P , fwd , Q , switch , e_inverse , mode , X , }
		- PRED   = { fabs , phits , Q , }
		- SUCC   = { P , return , }

236 :	"P"
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , s_inverse , e_forward , inv , P , fwd , Q , switch , e_inverse , mode , X , }
		- PRED   = { fabs , phits , Q , }
		- SUCC   = { P , return , }

236 :	"es"
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , s_inverse , e_forward , inv , P , fwd , Q , switch , e_inverse , mode , X , }
		- PRED   = { fabs , phits , Q , }
		- SUCC   = { P , return , }

236 :	"!="
		- NEIGH  = { != , es , P , if , }
		- PARENT = { }
		- CHILD  = { s_forward , s_inverse , e_forward , inv , P , fwd , Q , switch , e_inverse , mode , X , }
		- PRED   = { fabs , phits , Q , }
		- SUCC   = { P , return , }

237 :	"X"
		- NEIGH  = { X , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mode , Q , switch , }

239 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cosX1 , sinX1 , sqrt , / , cos , phi0 , atan , akm1 , EQUIT , *= , * , e , k0 , ssfn_ , P , sin , t , OBLIQ , fabs , phits , M_HALFPI , X , break , Q , - , < , N_POLE , if , S_POLE , }
		- PRED   = { X , }
		- SUCC   = { e_inverse , inv , P , }

239 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cosX1 , sinX1 , sqrt , / , cos , phi0 , atan , akm1 , EQUIT , *= , * , e , k0 , ssfn_ , P , sin , t , OBLIQ , fabs , phits , M_HALFPI , X , break , Q , - , < , N_POLE , if , S_POLE , }
		- PRED   = { X , }
		- SUCC   = { e_inverse , inv , P , }

239 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { cosX1 , sinX1 , sqrt , / , cos , phi0 , atan , akm1 , EQUIT , *= , * , e , k0 , ssfn_ , P , sin , t , OBLIQ , fabs , phits , M_HALFPI , X , break , Q , - , < , N_POLE , if , S_POLE , }
		- PRED   = { X , }
		- SUCC   = { e_inverse , inv , P , }

240 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { S_POLE , }

241 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , Q , < , phits , fabs , if , }

242 :	"if"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

242 :	"fabs"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

242 :	"Q"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

242 :	"phits"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

242 :	"-"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

242 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

242 :	"<"
		- NEIGH  = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { /= , sin , t , pj_tsfn , phits , cos , P , e , *= , / , + , k0 , sqrt , * , - , Q , pow , akm1 , }
		- PRED   = { S_POLE , }
		- SUCC   = { break , }

243 :	"Q"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

243 :	"akm1"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

243 :	"*"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

243 :	"P"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

243 :	"k0"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

243 :	"/"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"sqrt"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"pow"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"+"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"P"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"e"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"+"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"P"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"e"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"*"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"pow"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"-"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"P"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"e"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"-"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"P"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

244 :	"e"
		- NEIGH  = { e , / , + , k0 , * , P , - , pow , akm1 , sqrt , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

246 :	"Q"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

246 :	"akm1"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

246 :	"cos"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

246 :	"Q"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

246 :	"phits"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

246 :	"/"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"pj_tsfn"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"Q"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"phits"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"t"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"sin"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"Q"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"phits"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"P"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

247 :	"e"
		- NEIGH  = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { e , P , *= , t , }

248 :	"t"
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- SUCC   = { * , t , akm1 , - , Q , sqrt , /= , }

248 :	"*="
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- SUCC   = { * , t , akm1 , - , Q , sqrt , /= , }

248 :	"P"
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- SUCC   = { * , t , akm1 , - , Q , sqrt , /= , }

248 :	"e"
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { P , e , sin , pj_tsfn , phits , t , cos , / , akm1 , Q , }
		- SUCC   = { * , t , akm1 , - , Q , sqrt , /= , }

249 :	"Q"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"akm1"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"/="
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"sqrt"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"-"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"t"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"*"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

249 :	"t"
		- NEIGH  = { * , t , akm1 , - , Q , sqrt , /= , }
		- PARENT = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { }

251 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , - , Q , < , phits , fabs , if , }
		- SUCC   = { EQUIT , }

252 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { OBLIQ , }

253 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { phi0 , P , sin , t , }

254 :	"t"
		- NEIGH  = { phi0 , P , sin , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }

254 :	"sin"
		- NEIGH  = { phi0 , P , sin , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }

254 :	"P"
		- NEIGH  = { phi0 , P , sin , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }

254 :	"phi0"
		- NEIGH  = { phi0 , P , sin , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }

255 :	"X"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"*"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"atan"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"ssfn_"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"P"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"phi0"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"t"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"P"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"e"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"-"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

255 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , P , sin , t , }
		- SUCC   = { e , P , *= , t , }

256 :	"t"
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- SUCC   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }

256 :	"*="
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- SUCC   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }

256 :	"P"
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- SUCC   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }

256 :	"e"
		- NEIGH  = { e , P , *= , t , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , e , t , phi0 , P , atan , ssfn_ , * , - , X , }
		- SUCC   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }

257 :	"Q"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"akm1"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"*"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"P"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"k0"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"*"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"cos"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"P"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"phi0"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"/"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"sqrt"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"-"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"t"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"*"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

257 :	"t"
		- NEIGH  = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { e , P , *= , t , }
		- SUCC   = { X , sin , sinX1 , Q , }

258 :	"Q"
		- NEIGH  = { X , sin , sinX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- SUCC   = { cos , X , cosX1 , Q , }

258 :	"sinX1"
		- NEIGH  = { X , sin , sinX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- SUCC   = { cos , X , cosX1 , Q , }

258 :	"sin"
		- NEIGH  = { X , sin , sinX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- SUCC   = { cos , X , cosX1 , Q , }

258 :	"X"
		- NEIGH  = { X , sin , sinX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { t , / , cos , phi0 , k0 , * , P , - , akm1 , sqrt , Q , }
		- SUCC   = { cos , X , cosX1 , Q , }

259 :	"Q"
		- NEIGH  = { cos , X , cosX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { X , sin , sinX1 , Q , }
		- SUCC   = { break , }

259 :	"cosX1"
		- NEIGH  = { cos , X , cosX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { X , sin , sinX1 , Q , }
		- SUCC   = { break , }

259 :	"cos"
		- NEIGH  = { cos , X , cosX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { X , sin , sinX1 , Q , }
		- SUCC   = { break , }

259 :	"X"
		- NEIGH  = { cos , X , cosX1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { X , sin , sinX1 , Q , }
		- SUCC   = { break , }

260 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cos , X , cosX1 , Q , }
		- SUCC   = { }

262 :	"P"
		- NEIGH  = { e_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { e_forward , fwd , P , }

262 :	"inv"
		- NEIGH  = { e_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { e_forward , fwd , P , }

262 :	"e_inverse"
		- NEIGH  = { e_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { e_forward , fwd , P , }

263 :	"P"
		- NEIGH  = { e_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { e_inverse , inv , P , }
		- SUCC   = { }

263 :	"fwd"
		- NEIGH  = { e_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { e_inverse , inv , P , }
		- SUCC   = { }

263 :	"e_forward"
		- NEIGH  = { e_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { e_inverse , inv , P , }
		- SUCC   = { }

265 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { M_FORTPI , tan , / , >= , Q , - , phits , fabs , opaque , break , phi0 , akm1 , * , static_cast , EQUIT , N_POLE , cos , sin , M_HALFPI , > , P , k0 , < , sinX1 , cosX1 , pj_opaque , S_POLE , OBLIQ , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

265 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { M_FORTPI , tan , / , >= , Q , - , phits , fabs , opaque , break , phi0 , akm1 , * , static_cast , EQUIT , N_POLE , cos , sin , M_HALFPI , > , P , k0 , < , sinX1 , cosX1 , pj_opaque , S_POLE , OBLIQ , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

265 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { M_FORTPI , tan , / , >= , Q , - , phits , fabs , opaque , break , phi0 , akm1 , * , static_cast , EQUIT , N_POLE , cos , sin , M_HALFPI , > , P , k0 , < , sinX1 , cosX1 , pj_opaque , S_POLE , OBLIQ , }
		- PRED   = { }
		- SUCC   = { s_inverse , inv , P , }

266 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }

267 :	"static_cast"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"<"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"pj_opaque"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"*"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	">"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"P"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"opaque"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"sinX1"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"sin"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"P"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

267 :	"phi0"
		- NEIGH  = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }

268 :	"static_cast"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"<"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"pj_opaque"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"*"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	">"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"P"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"opaque"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"cosX1"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"cos"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"P"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

268 :	"phi0"
		- NEIGH  = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { sin , opaque , P , > , < , * , sinX1 , pj_opaque , phi0 , static_cast , }
		- SUCC   = { EQUIT , }

270 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cosX1 , opaque , P , cos , > , < , * , pj_opaque , phi0 , static_cast , }
		- SUCC   = { k0 , * , P , akm1 , Q , }

271 :	"Q"
		- NEIGH  = { k0 , * , P , akm1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

271 :	"akm1"
		- NEIGH  = { k0 , * , P , akm1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

271 :	"*"
		- NEIGH  = { k0 , * , P , akm1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

271 :	"P"
		- NEIGH  = { k0 , * , P , akm1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

271 :	"k0"
		- NEIGH  = { k0 , * , P , akm1 , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { break , }

272 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { k0 , * , P , akm1 , Q , }
		- SUCC   = { S_POLE , }

273 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { N_POLE , }

274 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }

275 :	"Q"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	"akm1"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	"fabs"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	"Q"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	"phits"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	"-"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	"M_HALFPI"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

275 :	">="
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"cos"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"Q"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"phits"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"/"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"tan"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"M_FORTPI"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"-"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"*"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"Q"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

276 :	"phits"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

277 :	"*"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

277 :	"P"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

277 :	"k0"
		- NEIGH  = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { break , }

278 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { k0 , * , M_FORTPI , / , cos , fabs , phits , M_HALFPI , P , tan , >= , akm1 , - , Q , }
		- SUCC   = { }

281 :	"P"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { s_forward , fwd , P , }

281 :	"inv"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { s_forward , fwd , P , }

281 :	"s_inverse"
		- NEIGH  = { s_inverse , inv , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { s_forward , fwd , P , }

282 :	"P"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { }

282 :	"fwd"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { }

282 :	"s_forward"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { != , es , P , if , }
		- CHILD  = { }
		- PRED   = { s_inverse , inv , P , }
		- SUCC   = { }

284 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , es , P , if , }
		- SUCC   = { }

284 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , es , P , if , }
		- SUCC   = { }

288 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"stere"
		- NEIGH  = { stere , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

289 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

289 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

290 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

290 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

290 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

291 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

291 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

291 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

291 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }

292 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }

292 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }

294 :	"Q"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"phits"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"pj_param"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"P"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"ctx"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"P"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"params"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

294 :	"i"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"pj_param"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"P"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"ctx"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"P"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"params"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"f"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

295 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { setup , P , return , }

297 :	"return"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- SUCC   = { }

297 :	"setup"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- SUCC   = { }

297 :	"P"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_HALFPI , f , i , params , Q , ctx , pj_param , phits , P , }
		- SUCC   = { }

301 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

301 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

301 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

301 :	"ups"
		- NEIGH  = { ups , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

302 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

302 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

303 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

303 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

303 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

304 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

304 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

304 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

304 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

305 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }

305 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }

305 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }

308 :	"P"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"phi0"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"pj_param"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"P"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"ctx"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"P"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"params"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"i"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"-"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

308 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { == , es , P , if , }

309 :	"if"
		- NEIGH  = { == , es , P , if , }
		- PARENT = { }
		- CHILD  = { pj_default_destructor , ENOMEM , return , PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PRED   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- SUCC   = { k0 , P , }

309 :	"P"
		- NEIGH  = { == , es , P , if , }
		- PARENT = { }
		- CHILD  = { pj_default_destructor , ENOMEM , return , PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PRED   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- SUCC   = { k0 , P , }

309 :	"es"
		- NEIGH  = { == , es , P , if , }
		- PARENT = { }
		- CHILD  = { pj_default_destructor , ENOMEM , return , PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PRED   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- SUCC   = { k0 , P , }

309 :	"=="
		- NEIGH  = { == , es , P , if , }
		- PARENT = { }
		- CHILD  = { pj_default_destructor , ENOMEM , return , PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PRED   = { M_HALFPI , - , i , params , ctx , pj_param , phi0 , P , }
		- SUCC   = { k0 , P , }

310 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ENOMEM , P , pj_default_destructor , return , }

310 :	"P"
		- NEIGH  = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ENOMEM , P , pj_default_destructor , return , }

310 :	"PJD_ERR_ELLIPSOID_USE_REQUIRED"
		- NEIGH  = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ENOMEM , P , pj_default_destructor , return , }

311 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- SUCC   = { }

311 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- SUCC   = { }

311 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- SUCC   = { }

311 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { == , es , P , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_ELLIPSOID_USE_REQUIRED , P , proj_errno_set , }
		- SUCC   = { }

313 :	"P"
		- NEIGH  = { k0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , es , P , if , }
		- SUCC   = { x0 , P , }

313 :	"k0"
		- NEIGH  = { k0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , es , P , if , }
		- SUCC   = { x0 , P , }

314 :	"P"
		- NEIGH  = { x0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { k0 , P , }
		- SUCC   = { y0 , P , }

314 :	"x0"
		- NEIGH  = { x0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { k0 , P , }
		- SUCC   = { y0 , P , }

315 :	"P"
		- NEIGH  = { y0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x0 , P , }
		- SUCC   = { M_HALFPI , phits , Q , }

315 :	"y0"
		- NEIGH  = { y0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x0 , P , }
		- SUCC   = { M_HALFPI , phits , Q , }

316 :	"Q"
		- NEIGH  = { M_HALFPI , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y0 , P , }
		- SUCC   = { lam0 , P , }

316 :	"phits"
		- NEIGH  = { M_HALFPI , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y0 , P , }
		- SUCC   = { lam0 , P , }

316 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , phits , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y0 , P , }
		- SUCC   = { lam0 , P , }

317 :	"P"
		- NEIGH  = { lam0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_HALFPI , phits , Q , }
		- SUCC   = { setup , P , return , }

317 :	"lam0"
		- NEIGH  = { lam0 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_HALFPI , phits , Q , }
		- SUCC   = { setup , P , return , }

319 :	"return"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam0 , P , }
		- SUCC   = { }

319 :	"setup"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam0 , P , }
		- SUCC   = { }

319 :	"P"
		- NEIGH  = { setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam0 , P , }
		- SUCC   = { }

