32 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

33 :	"phi1"
		- NEIGH  = { phi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"ctgphi1"
		- NEIGH  = { ctgphi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"sinphi1"
		- NEIGH  = { sinphi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"cosphi1"
		- NEIGH  = { cosphi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"en"
		- NEIGH  = { en , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"ccon"
		- NEIGH  = { ccon , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"forward"
		- NEIGH  = { forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

47 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

48 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

48 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { r , }

49 :	"r"
		- NEIGH  = { r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }

51 :	"r"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"Q"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"ctgphi1"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"-"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"tan"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"lp"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"phi"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"-"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"Q"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

51 :	"phi1"
		- NEIGH  = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , }
		- SUCC   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }

52 :	"xy"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"x"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"r"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"*"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"sin"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"lp"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"lam"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"*"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"Q"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

52 :	"sinphi1"
		- NEIGH  = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , phi , lp , tan , - , ctgphi1 , Q , r , }
		- SUCC   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }

53 :	"xy"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"y"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"Q"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"ctgphi1"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"-"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"r"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"*"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"cos"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"lp"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"lam"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"*"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"Q"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

53 :	"sinphi1"
		- NEIGH  = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , lp , sin , lam , r , * , x , xy , }
		- SUCC   = { xy , return , }

55 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- SUCC   = { }

55 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , lp , cos , lam , r , - , Q , xy , ctgphi1 , * , y , }
		- SUCC   = { }

59 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"inverse"
		- NEIGH  = { inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

60 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

61 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

61 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , Q , ctgphi1 , y , xy , }

63 :	"xy"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

63 :	"y"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

63 :	"Q"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

63 :	"ctgphi1"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

63 :	"-"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

63 :	"xy"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

63 :	"y"
		- NEIGH  = { - , Q , ctgphi1 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }

64 :	"lp"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"phi"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"Q"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"phi1"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"-"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"atan"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"hypot"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"xy"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"x"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"xy"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"y"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"-"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"Q"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

64 :	"ctgphi1"
		- NEIGH  = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , Q , ctgphi1 , y , xy , }
		- SUCC   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }

65 :	"lp"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"lam"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"atan2"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"xy"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"x"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"xy"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"y"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"/"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"Q"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

65 :	"sinphi1"
		- NEIGH  = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { x , ctgphi1 , xy , y , hypot , phi1 , Q , - , phi , atan , lp , }
		- SUCC   = { lp , return , }

67 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- SUCC   = { }

67 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , Q , / , y , x , xy , lam , atan2 , lp , }
		- SUCC   = { }

71 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"destructor"
		- NEIGH  = { destructor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"errlev"
		- NEIGH  = { errlev , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

72 :	"if"
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

72 :	"=="
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

72 :	"P"
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

73 :	"return"
		- NEIGH  = { return , }
		- PARENT = { P , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"if"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

75 :	"=="
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

75 :	"P"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

75 :	"opaque"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }

76 :	"return"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"pj_default_destructor"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"P"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"errlev"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"pj_dealloc"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"static_cast"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"<"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"pj_opaque"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"*"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	">"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"P"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"opaque"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

78 :	"en"
		- NEIGH  = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

79 :	"return"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

79 :	"pj_default_destructor"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

79 :	"P"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

79 :	"errlev"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , pj_opaque , static_cast , < , pj_dealloc , }
		- SUCC   = { }

83 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"ccon"
		- NEIGH  = { ccon , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

85 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

85 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

86 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

86 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

86 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

87 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

88 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

88 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

89 :	"P"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { params , Q , ctx , pj_param , f , phi1 , P , }

89 :	"destructor"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { params , Q , ctx , pj_param , f , phi1 , P , }

89 :	"destructor"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { params , Q , ctx , pj_param , f , phi1 , P , }

91 :	"Q"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"phi1"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"pj_param"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"P"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"ctx"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"P"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"params"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

91 :	"f"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { Q , < , fabs , phi1 , if , }

92 :	"if"
		- NEIGH  = { Q , < , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

92 :	"fabs"
		- NEIGH  = { Q , < , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

92 :	"Q"
		- NEIGH  = { Q , < , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

92 :	"phi1"
		- NEIGH  = { Q , < , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

92 :	"<"
		- NEIGH  = { Q , < , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

93 :	"return"
		- NEIGH  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PARENT = { Q , < , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"destructor"
		- NEIGH  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PARENT = { Q , < , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"P"
		- NEIGH  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PARENT = { Q , < , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"PJD_ERR_LAT1_IS_ZERO"
		- NEIGH  = { PJD_ERR_LAT1_IS_ZERO , destructor , P , return , }
		- PARENT = { Q , < , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

95 :	"if"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

95 :	"!"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

95 :	"Q"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

95 :	"en"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

95 :	"pj_enfn"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

95 :	"P"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

95 :	"es"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , destructor , P , return , }
		- PRED   = { Q , < , fabs , phi1 , if , }
		- SUCC   = { phi1 , sin , sinphi1 , Q , }

96 :	"return"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"destructor"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"P"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"ENOMEM"
		- NEIGH  = { ENOMEM , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"Q"
		- NEIGH  = { phi1 , sin , sinphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { phi1 , cos , cosphi1 , Q , }

98 :	"sinphi1"
		- NEIGH  = { phi1 , sin , sinphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { phi1 , cos , cosphi1 , Q , }

98 :	"sin"
		- NEIGH  = { phi1 , sin , sinphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { phi1 , cos , cosphi1 , Q , }

98 :	"Q"
		- NEIGH  = { phi1 , sin , sinphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { phi1 , cos , cosphi1 , Q , }

98 :	"phi1"
		- NEIGH  = { phi1 , sin , sinphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { phi1 , cos , cosphi1 , Q , }

99 :	"Q"
		- NEIGH  = { phi1 , cos , cosphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , sin , sinphi1 , Q , }
		- SUCC   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }

99 :	"cosphi1"
		- NEIGH  = { phi1 , cos , cosphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , sin , sinphi1 , Q , }
		- SUCC   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }

99 :	"cos"
		- NEIGH  = { phi1 , cos , cosphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , sin , sinphi1 , Q , }
		- SUCC   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }

99 :	"Q"
		- NEIGH  = { phi1 , cos , cosphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , sin , sinphi1 , Q , }
		- SUCC   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }

99 :	"phi1"
		- NEIGH  = { phi1 , cos , cosphi1 , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , sin , sinphi1 , Q , }
		- SUCC   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }

100 :	"Q"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

100 :	"ctgphi1"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

100 :	"Q"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

100 :	"cosphi1"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

100 :	"/"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

100 :	"Q"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

100 :	"sinphi1"
		- NEIGH  = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi1 , cos , cosphi1 , Q , }
		- SUCC   = { inverse , inv , P , }

103 :	"P"
		- NEIGH  = { inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- SUCC   = { forward , fwd , P , }

103 :	"inv"
		- NEIGH  = { inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- SUCC   = { forward , fwd , P , }

103 :	"inverse"
		- NEIGH  = { inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi1 , cosphi1 , ctgphi1 , / , Q , }
		- SUCC   = { forward , fwd , P , }

104 :	"P"
		- NEIGH  = { forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inverse , inv , P , }
		- SUCC   = { P , return , }

104 :	"fwd"
		- NEIGH  = { forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inverse , inv , P , }
		- SUCC   = { P , return , }

104 :	"forward"
		- NEIGH  = { forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inverse , inv , P , }
		- SUCC   = { P , return , }

106 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forward , fwd , P , }
		- SUCC   = { }

106 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forward , fwd , P , }
		- SUCC   = { }

