45 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

45 :	"instance"
		- NEIGH  = { instance , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"CWE128"
		- NEIGH  = { CWE128 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"CWE131"
		- NEIGH  = { CWE131 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"CWE197"
		- NEIGH  = { CWE197 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

51 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

51 :	"CWE362"
		- NEIGH  = { CWE362 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"CWE369"
		- NEIGH  = { CWE369 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"CWE398"
		- NEIGH  = { CWE398 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"CWE475"
		- NEIGH  = { CWE475 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"CWE482"
		- NEIGH  = { CWE482 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

56 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

56 :	"CWE561"
		- NEIGH  = { CWE561 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

57 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

57 :	"CWE563"
		- NEIGH  = { CWE563 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

58 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

58 :	"CWE570"
		- NEIGH  = { CWE570 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

59 :	"CWE571"
		- NEIGH  = { CWE571 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

60 :	"CWE672"
		- NEIGH  = { CWE672 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"CWE628"
		- NEIGH  = { CWE628 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

62 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

62 :	"CWE683"
		- NEIGH  = { CWE683 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

63 :	"CWE686"
		- NEIGH  = { CWE686 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"CWE704"
		- NEIGH  = { CWE704 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"CWE758"
		- NEIGH  = { CWE758 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

66 :	"CWE768"
		- NEIGH  = { CWE768 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"CWE"
		- NEIGH  = { CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"CWE783"
		- NEIGH  = { CWE783 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

81 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

81 :	"checkCastIntToCharAndBack"
		- NEIGH  = { checkCastIntToCharAndBack , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

83 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

83 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

83 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

83 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

83 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

84 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

86 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

86 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

86 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

86 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

86 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

87 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , * , scope , vars , tok , > , map , string , Token , != , for , < , std , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

87 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , * , scope , vars , tok , > , map , string , Token , != , for , < , std , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

87 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , * , scope , vars , tok , > , map , string , Token , != , for , < , std , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

87 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , * , scope , vars , tok , > , map , string , Token , != , for , < , std , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

87 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , * , scope , vars , tok , > , map , string , Token , != , for , < , std , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

87 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , * , scope , vars , tok , > , map , string , Token , != , for , < , std , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

88 :	"std"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

88 :	"map"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

88 :	"<"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

88 :	"std"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

88 :	"string"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

88 :	">"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

88 :	"vars"
		- NEIGH  = { vars , > , string , < , map , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

89 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

89 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , ! , Match , if , }
		- PRED   = { vars , > , string , < , map , std , }
		- SUCC   = { }

91 :	"if"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

91 :	"!"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

91 :	"Token"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

91 :	"Match"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

91 :	"tok"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , Match , if , }

92 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { }

93 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { }

93 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { }

93 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { }

94 :	"Variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

94 :	"*"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

94 :	"var"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

94 :	"tok"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

94 :	"variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

95 :	"if"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"str"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"=="
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"!"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

95 :	"isSigned"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

96 :	"vars"
		- NEIGH  = { strAt , varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"tok"
		- NEIGH  = { strAt , varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"varId"
		- NEIGH  = { strAt , varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"tok"
		- NEIGH  = { strAt , varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

96 :	"strAt"
		- NEIGH  = { strAt , varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

98 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

98 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

98 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

98 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

99 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , tok , * , var , Variable , }

99 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , tok , * , var , Variable , }

99 :	"tokAt"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , tok , * , var , Variable , }

100 :	"Variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

100 :	"*"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

100 :	"var"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

100 :	"tok"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

100 :	"variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

101 :	"if"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"str"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"=="
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"!"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

101 :	"isSigned"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

102 :	"checkCastIntToCharAndBackError"
		- NEIGH  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"tok"
		- NEIGH  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"tok"
		- NEIGH  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"strAt"
		- NEIGH  = { tok , strAt , checkCastIntToCharAndBackError , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

104 :	"if"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"mTokenizer"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"isCPP"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"&&"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"Token"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"Match"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"tok"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"||"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"Token"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"Match"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

104 :	"tok"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , Match , isCPP , mTokenizer , Token , ! , str , if , variable , tokAt , var , == , && , isSigned , tok , Variable , typeEndToken , * , }
		- PRED   = { }
		- SUCC   = { }

105 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , tok , * , var , Variable , }

105 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , tok , * , var , Variable , }

105 :	"tokAt"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , tok , * , var , Variable , }

106 :	"Variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

106 :	"*"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

106 :	"var"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

106 :	"tok"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

106 :	"variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

107 :	"if"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"str"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"=="
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"!"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

107 :	"isSigned"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { tok , checkCastIntToCharAndBackError , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

108 :	"checkCastIntToCharAndBackError"
		- NEIGH  = { tok , checkCastIntToCharAndBackError , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

108 :	"tok"
		- NEIGH  = { tok , checkCastIntToCharAndBackError , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

110 :	"if"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"mTokenizer"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"isCPP"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"&&"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"Token"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"Match"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"tok"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"||"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"Token"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"Match"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

110 :	"tok"
		- NEIGH  = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { Match , if , str , Token , ! , var , variable , isSigned , Variable , tok , typeEndToken , * , == , && , }
		- PRED   = { }
		- SUCC   = { }

111 :	"Variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

111 :	"*"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

111 :	"var"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

111 :	"tok"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

111 :	"variable"
		- NEIGH  = { variable , tok , * , var , Variable , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { typeEndToken , str , isSigned , == , && , var , ! , if , }

112 :	"if"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"str"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"=="
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"&&"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"!"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"var"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"typeEndToken"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

112 :	"isSigned"
		- NEIGH  = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { varId , tok , vars , }
		- PRED   = { variable , tok , * , var , Variable , }
		- SUCC   = { }

113 :	"vars"
		- NEIGH  = { varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

113 :	"tok"
		- NEIGH  = { varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

113 :	"varId"
		- NEIGH  = { varId , tok , vars , }
		- PARENT = { typeEndToken , str , isSigned , == , && , var , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { end , != , tok , Token , find , vars , Match , varId , if , }
		- PRED   = { }
		- SUCC   = { }

115 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { end , != , tok , Token , find , vars , Match , varId , if , }
		- PRED   = { }
		- SUCC   = { }

115 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { end , != , tok , Token , find , vars , Match , varId , if , }
		- PRED   = { }
		- SUCC   = { }

115 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { || , Match , isCPP , Token , && , tok , mTokenizer , if , }
		- CHILD  = { end , != , tok , Token , find , vars , Match , varId , if , }
		- PRED   = { }
		- SUCC   = { }

116 :	"if"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"vars"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"find"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"tok"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"varId"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"!="
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"vars"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

116 :	"end"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { }
		- SUCC   = { }

117 :	"checkCastIntToCharAndBackError"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

117 :	"tok"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

117 :	"vars"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

117 :	"tok"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

117 :	"varId"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

119 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { end , varId , find , vars , if , tokAt , != , tok , }
		- PRED   = { }
		- SUCC   = { }

119 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { end , varId , find , vars , if , tokAt , != , tok , }
		- PRED   = { }
		- SUCC   = { }

119 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { end , varId , find , vars , if , tokAt , != , tok , }
		- PRED   = { }
		- SUCC   = { }

119 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { end , varId , find , vars , if , tokAt , != , tok , }
		- PRED   = { }
		- SUCC   = { }

120 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , != , tok , find , vars , varId , if , }

120 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , != , tok , find , vars , varId , if , }

120 :	"tokAt"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , != , tok , find , vars , varId , if , }

121 :	"if"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"vars"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"find"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"tok"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"varId"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"!="
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"vars"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

121 :	"end"
		- NEIGH  = { end , != , tok , find , vars , varId , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

122 :	"checkCastIntToCharAndBackError"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"tok"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"vars"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"tok"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"varId"
		- NEIGH  = { varId , vars , tok , checkCastIntToCharAndBackError , }
		- PARENT = { end , != , tok , find , vars , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"checkCastIntToCharAndBackError"
		- NEIGH  = { checkCastIntToCharAndBackError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"strFunctionName"
		- NEIGH  = { strFunctionName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"reportError"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

132 :	"tok"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

133 :	"Severity"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

133 :	"warning"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"+"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"strFunctionName"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"+"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"CWE197"
		- NEIGH  = { strFunctionName , + , warning , tok , Severity , CWE197 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

149 :	"clarifyCalculation"
		- NEIGH  = { clarifyCalculation , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

151 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

151 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

151 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

151 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

151 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

151 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

152 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

154 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

154 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

154 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

154 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

154 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

155 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

155 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

155 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

155 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

155 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

155 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

156 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

156 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { next , * , && , if , str , isArithmeticalOp , tok2 , astOperand1 , || , eBitOp , tokType , isCalculation , for , != , tok , Token , ! , }
		- PRED   = { }
		- SUCC   = { }

158 :	"if"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"tok"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"str"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"!="
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"||"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"!"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"tok"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"astOperand1"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"||"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"!"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"tok"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"astOperand1"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

158 :	"isCalculation"
		- NEIGH  = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }

159 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

160 :	"if"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"!"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"tok"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"astOperand1"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"isArithmeticalOp"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"&&"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"tok"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"astOperand1"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"tokType"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"!="
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"Token"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

160 :	"eBitOp"
		- NEIGH  = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , || , str , isCalculation , != , tok , ! , if , }
		- SUCC   = { tok , astOperand1 , tok2 , * , Token , }

161 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

164 :	"Token"
		- NEIGH  = { tok , astOperand1 , tok2 , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- SUCC   = { tok2 , next , for , }

164 :	"*"
		- NEIGH  = { tok , astOperand1 , tok2 , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- SUCC   = { tok2 , next , for , }

164 :	"tok2"
		- NEIGH  = { tok , astOperand1 , tok2 , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- SUCC   = { tok2 , next , for , }

164 :	"tok"
		- NEIGH  = { tok , astOperand1 , tok2 , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- SUCC   = { tok2 , next , for , }

164 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , tok2 , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { eBitOp , Token , && , isArithmeticalOp , astOperand1 , != , tok , tokType , ! , if , }
		- SUCC   = { tok2 , next , for , }

165 :	"for"
		- NEIGH  = { tok2 , next , for , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { tok , astOperand1 , tok2 , * , Token , }
		- SUCC   = { }

165 :	"tok2"
		- NEIGH  = { tok2 , next , for , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { tok , astOperand1 , tok2 , * , Token , }
		- SUCC   = { }

165 :	"tok2"
		- NEIGH  = { tok2 , next , for , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { tok , astOperand1 , tok2 , * , Token , }
		- SUCC   = { }

165 :	"tok2"
		- NEIGH  = { tok2 , next , for , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { tok , astOperand1 , tok2 , * , Token , }
		- SUCC   = { }

165 :	"next"
		- NEIGH  = { tok2 , next , for , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { tok , astOperand1 , tok2 , * , Token , }
		- SUCC   = { }

166 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok2 , next , for , }
		- CHILD  = { == , str , if , link , tok2 , }
		- PRED   = { }
		- SUCC   = { }

166 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok2 , next , for , }
		- CHILD  = { == , str , if , link , tok2 , }
		- PRED   = { }
		- SUCC   = { }

166 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok2 , next , for , }
		- CHILD  = { == , str , if , link , tok2 , }
		- PRED   = { }
		- SUCC   = { }

166 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok2 , next , for , }
		- CHILD  = { == , str , if , link , tok2 , }
		- PRED   = { }
		- SUCC   = { }

167 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

167 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

167 :	"link"
		- NEIGH  = { link , tok2 , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { == , str , tok2 , if , break , }
		- PRED   = { }
		- SUCC   = { }

168 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { == , str , tok2 , if , break , }
		- PRED   = { }
		- SUCC   = { }

168 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { == , str , tok2 , if , break , }
		- PRED   = { }
		- SUCC   = { }

168 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { == , str , tok2 , if , break , }
		- PRED   = { }
		- SUCC   = { }

169 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

170 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , str , tok , astOperand1 , clarifyCalculationError , }
		- PRED   = { }
		- SUCC   = { }

170 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , str , tok , astOperand1 , clarifyCalculationError , }
		- PRED   = { }
		- SUCC   = { }

170 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , str , tok , astOperand1 , clarifyCalculationError , }
		- PRED   = { }
		- SUCC   = { }

170 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , str , tok , astOperand1 , clarifyCalculationError , }
		- PRED   = { }
		- SUCC   = { }

171 :	"clarifyCalculationError"
		- NEIGH  = { str , tok , astOperand1 , clarifyCalculationError , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

171 :	"tok"
		- NEIGH  = { str , tok , astOperand1 , clarifyCalculationError , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

171 :	"tok"
		- NEIGH  = { str , tok , astOperand1 , clarifyCalculationError , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

171 :	"astOperand1"
		- NEIGH  = { str , tok , astOperand1 , clarifyCalculationError , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

171 :	"str"
		- NEIGH  = { str , tok , astOperand1 , clarifyCalculationError , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

172 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { str , tok , astOperand1 , clarifyCalculationError , }
		- SUCC   = { }

179 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"clarifyCalculationError"
		- NEIGH  = { clarifyCalculationError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

179 :	"op"
		- NEIGH  = { op , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

182 :	"std"
		- NEIGH  = { op , + , calc , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { op , + , s1 , string , std , }

182 :	"string"
		- NEIGH  = { op , + , calc , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { op , + , s1 , string , std , }

182 :	"calc"
		- NEIGH  = { op , + , calc , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { op , + , s1 , string , std , }

182 :	"+"
		- NEIGH  = { op , + , calc , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { op , + , s1 , string , std , }

182 :	"op"
		- NEIGH  = { op , + , calc , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { op , + , s1 , string , std , }

182 :	"+"
		- NEIGH  = { op , + , calc , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { op , + , s1 , string , std , }

185 :	"std"
		- NEIGH  = { op , + , s1 , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , calc , string , std , }
		- SUCC   = { op , + , string , s2 , std , }

185 :	"string"
		- NEIGH  = { op , + , s1 , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , calc , string , std , }
		- SUCC   = { op , + , string , s2 , std , }

185 :	"s1"
		- NEIGH  = { op , + , s1 , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , calc , string , std , }
		- SUCC   = { op , + , string , s2 , std , }

185 :	"+"
		- NEIGH  = { op , + , s1 , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , calc , string , std , }
		- SUCC   = { op , + , string , s2 , std , }

185 :	"op"
		- NEIGH  = { op , + , s1 , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , calc , string , std , }
		- SUCC   = { op , + , string , s2 , std , }

185 :	"+"
		- NEIGH  = { op , + , s1 , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , calc , string , std , }
		- SUCC   = { op , + , string , s2 , std , }

188 :	"std"
		- NEIGH  = { op , + , string , s2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , s1 , string , std , }
		- SUCC   = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }

188 :	"string"
		- NEIGH  = { op , + , string , s2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , s1 , string , std , }
		- SUCC   = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }

188 :	"s2"
		- NEIGH  = { op , + , string , s2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , s1 , string , std , }
		- SUCC   = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }

188 :	"+"
		- NEIGH  = { op , + , string , s2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , s1 , string , std , }
		- SUCC   = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }

188 :	"op"
		- NEIGH  = { op , + , string , s2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , s1 , string , std , }
		- SUCC   = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }

188 :	"+"
		- NEIGH  = { op , + , string , s2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , s1 , string , std , }
		- SUCC   = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }

190 :	"reportError"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

190 :	"tok"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

191 :	"Severity"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

191 :	"style"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

193 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

193 :	"op"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

193 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"calc"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"s1"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"s2"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"+"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

195 :	"CWE783"
		- NEIGH  = { s2 , CWE783 , calc , op , + , Severity , style , s1 , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , string , s2 , std , }
		- SUCC   = { }

201 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"clarifyStatement"
		- NEIGH  = { clarifyStatement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

203 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

203 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

203 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

203 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

203 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

203 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

204 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

206 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

206 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

206 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

206 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

207 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

207 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

207 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

207 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

207 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

207 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

208 :	"for"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"Token"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"*"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"bodyStart"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"&&"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"!="
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"bodyEnd"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

208 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { astOperand1 , && , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

209 :	"if"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

209 :	"Token"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

209 :	"Match"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

209 :	"tok"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

209 :	"&&"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

209 :	"tok"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

209 :	"astOperand1"
		- NEIGH  = { astOperand1 , && , tok , Token , Match , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astParent , Token , ! , str , if , tok2 , == , && , while , previous , tok , * , }
		- PRED   = { }
		- SUCC   = { }

210 :	"Token"
		- NEIGH  = { previous , tok , tok2 , * , Token , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , str , && , tok2 , while , }

210 :	"*"
		- NEIGH  = { previous , tok , tok2 , * , Token , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , str , && , tok2 , while , }

210 :	"tok2"
		- NEIGH  = { previous , tok , tok2 , * , Token , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , str , && , tok2 , while , }

210 :	"tok"
		- NEIGH  = { previous , tok , tok2 , * , Token , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , str , && , tok2 , while , }

210 :	"previous"
		- NEIGH  = { previous , tok , tok2 , * , Token , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , str , && , tok2 , while , }

212 :	"while"
		- NEIGH  = { == , str , && , tok2 , while , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { previous , tok2 , }
		- PRED   = { previous , tok , tok2 , * , Token , }
		- SUCC   = { Match , Token , if , ! , astParent , && , tok2 , }

212 :	"tok2"
		- NEIGH  = { == , str , && , tok2 , while , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { previous , tok2 , }
		- PRED   = { previous , tok , tok2 , * , Token , }
		- SUCC   = { Match , Token , if , ! , astParent , && , tok2 , }

212 :	"&&"
		- NEIGH  = { == , str , && , tok2 , while , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { previous , tok2 , }
		- PRED   = { previous , tok , tok2 , * , Token , }
		- SUCC   = { Match , Token , if , ! , astParent , && , tok2 , }

212 :	"tok2"
		- NEIGH  = { == , str , && , tok2 , while , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { previous , tok2 , }
		- PRED   = { previous , tok , tok2 , * , Token , }
		- SUCC   = { Match , Token , if , ! , astParent , && , tok2 , }

212 :	"str"
		- NEIGH  = { == , str , && , tok2 , while , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { previous , tok2 , }
		- PRED   = { previous , tok , tok2 , * , Token , }
		- SUCC   = { Match , Token , if , ! , astParent , && , tok2 , }

212 :	"=="
		- NEIGH  = { == , str , && , tok2 , while , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { previous , tok2 , }
		- PRED   = { previous , tok , tok2 , * , Token , }
		- SUCC   = { Match , Token , if , ! , astParent , && , tok2 , }

213 :	"tok2"
		- NEIGH  = { previous , tok2 , }
		- PARENT = { == , str , && , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"tok2"
		- NEIGH  = { previous , tok2 , }
		- PARENT = { == , str , && , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

213 :	"previous"
		- NEIGH  = { previous , tok2 , }
		- PARENT = { == , str , && , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"if"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"tok2"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"&&"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"!"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"tok2"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"astParent"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"&&"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"Token"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"Match"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

215 :	"tok2"
		- NEIGH  = { Match , Token , if , ! , astParent , && , tok2 , }
		- PARENT = { astOperand1 , && , tok , Token , Match , if , }
		- CHILD  = { Match , if , tok , Token , astOperand1 , tok2 , }
		- PRED   = { == , str , && , tok2 , while , }
		- SUCC   = { }

216 :	"tok2"
		- NEIGH  = { tok , astOperand1 , tok2 , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

216 :	"tok"
		- NEIGH  = { tok , astOperand1 , tok2 , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

216 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , tok2 , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

217 :	"if"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { tok2 , clarifyStatementError , }
		- PRED   = { tok , astOperand1 , tok2 , }
		- SUCC   = { }

217 :	"Token"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { tok2 , clarifyStatementError , }
		- PRED   = { tok , astOperand1 , tok2 , }
		- SUCC   = { }

217 :	"Match"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { tok2 , clarifyStatementError , }
		- PRED   = { tok , astOperand1 , tok2 , }
		- SUCC   = { }

217 :	"tok2"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { Match , Token , if , ! , astParent , && , tok2 , }
		- CHILD  = { tok2 , clarifyStatementError , }
		- PRED   = { tok , astOperand1 , tok2 , }
		- SUCC   = { }

218 :	"clarifyStatementError"
		- NEIGH  = { tok2 , clarifyStatementError , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

218 :	"tok2"
		- NEIGH  = { tok2 , clarifyStatementError , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"clarifyStatementError"
		- NEIGH  = { clarifyStatementError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

227 :	"reportError"
		- NEIGH  = { CWE783 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

227 :	"tok"
		- NEIGH  = { CWE783 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

227 :	"Severity"
		- NEIGH  = { CWE783 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

227 :	"warning"
		- NEIGH  = { CWE783 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"CWE783"
		- NEIGH  = { CWE783 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"checkSuspiciousSemicolon"
		- NEIGH  = { checkSuspiciousSemicolon , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

237 :	"if"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"!"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"mSettings"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"inconclusive"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"||"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"!"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"mSettings"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"isEnabled"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"Settings"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

237 :	"WARNING"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

238 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

240 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

240 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

240 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

240 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

240 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

243 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

243 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

243 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

243 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

243 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

243 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

244 :	"if"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"type"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"=="
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"Scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"eIf"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"||"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"type"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"=="
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"Scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"eElse"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"||"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"type"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"=="
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"Scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"eWhile"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"||"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"type"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"=="
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"Scope"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

244 :	"eFor"
		- NEIGH  = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PRED   = { }
		- SUCC   = { }

247 :	"if"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

247 :	"Token"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

247 :	"simpleMatch"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

247 :	"scope"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

247 :	"bodyStart"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

247 :	"&&"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"scope"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"bodyStart"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"previous"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"linenr"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"=="
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"scope"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"bodyStart"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"tokAt"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

248 :	"linenr"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"&&"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"scope"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"bodyStart"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"linenr"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"+"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	">="
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"scope"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"bodyStart"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"tokAt"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

249 :	"linenr"
		- NEIGH  = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- PARENT = { eWhile , || , eFor , eElse , eIf , == , type , Scope , scope , if , }
		- CHILD  = { classDef , scope , suspiciousSemicolonError , }
		- PRED   = { }
		- SUCC   = { }

250 :	"suspiciousSemicolonError"
		- NEIGH  = { classDef , scope , suspiciousSemicolonError , }
		- PARENT = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

250 :	"scope"
		- NEIGH  = { classDef , scope , suspiciousSemicolonError , }
		- PARENT = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

250 :	"classDef"
		- NEIGH  = { classDef , scope , suspiciousSemicolonError , }
		- PARENT = { == , >= , && , bodyStart , scope , tokAt , linenr , previous , simpleMatch , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"suspiciousSemicolonError"
		- NEIGH  = { suspiciousSemicolonError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

256 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

258 :	"reportError"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

258 :	"tok"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

258 :	"Severity"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

258 :	"warning"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"+"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"tok"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"tok"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"str"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"std"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"string"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"+"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"CWE398"
		- NEIGH  = { string , std , CWE398 , str , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"warningOldStylePointerCast"
		- NEIGH  = { warningOldStylePointerCast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

269 :	"if"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"!"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"mSettings"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"isEnabled"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"Settings"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"STYLE"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"||"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"!"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"mTokenizer"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

269 :	"isCPP"
		- NEIGH  = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

270 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

272 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

272 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

272 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

272 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mTokenizer , || , Settings , isCPP , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

273 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , && , * , scope , if , bodyEnd , for , != , function , tok , isConstructor , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

273 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , && , * , scope , if , bodyEnd , for , != , function , tok , isConstructor , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

273 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , && , * , scope , if , bodyEnd , for , != , function , tok , isConstructor , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

273 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , && , * , scope , if , bodyEnd , for , != , function , tok , isConstructor , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

273 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , && , * , scope , if , bodyEnd , for , != , function , tok , isConstructor , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

273 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { next , && , * , scope , if , bodyEnd , for , != , function , tok , isConstructor , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

274 :	"Token"
		- NEIGH  = { tok , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { && , function , scope , isConstructor , if , }

274 :	"*"
		- NEIGH  = { tok , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { && , function , scope , isConstructor , if , }

274 :	"tok"
		- NEIGH  = { tok , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { && , function , scope , isConstructor , if , }

275 :	"if"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

275 :	"scope"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

275 :	"function"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

275 :	"&&"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

275 :	"scope"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

275 :	"function"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

275 :	"isConstructor"
		- NEIGH  = { && , function , scope , isConstructor , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { bodyStart , scope , classDef , tok , }
		- PRED   = { tok , * , Token , }
		- SUCC   = { scope , && , bodyEnd , != , tok , next , for , }

276 :	"tok"
		- NEIGH  = { scope , classDef , tok , }
		- PARENT = { && , function , scope , isConstructor , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

276 :	"scope"
		- NEIGH  = { scope , classDef , tok , }
		- PARENT = { && , function , scope , isConstructor , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

276 :	"classDef"
		- NEIGH  = { scope , classDef , tok , }
		- PARENT = { && , function , scope , isConstructor , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

278 :	"tok"
		- NEIGH  = { bodyStart , scope , tok , }
		- PARENT = { && , function , scope , isConstructor , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

278 :	"scope"
		- NEIGH  = { bodyStart , scope , tok , }
		- PARENT = { && , function , scope , isConstructor , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

278 :	"bodyStart"
		- NEIGH  = { bodyStart , scope , tok , }
		- PARENT = { && , function , scope , isConstructor , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

279 :	"for"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"&&"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"!="
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"scope"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"bodyEnd"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

279 :	"next"
		- NEIGH  = { scope , && , bodyEnd , != , tok , next , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { type , intvalue , && , tokAt , == , front , tok , strAt , typeTok , * , hasKnownIntValue , while , p , next , values , ! , Token , if , Match , }
		- PRED   = { && , function , scope , isConstructor , if , }
		- SUCC   = { }

281 :	"if"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , next , Match , Token , while , }

281 :	"!"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , next , Match , Token , while , }

281 :	"Token"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , next , Match , Token , while , }

281 :	"Match"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , next , Match , Token , while , }

281 :	"tok"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , next , Match , Token , while , }

282 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

285 :	"while"
		- NEIGH  = { tok , next , Match , Token , while , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { next , tok , typeTok , * , Token , }

285 :	"Token"
		- NEIGH  = { tok , next , Match , Token , while , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { next , tok , typeTok , * , Token , }

285 :	"Match"
		- NEIGH  = { tok , next , Match , Token , while , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { next , tok , typeTok , * , Token , }

285 :	"tok"
		- NEIGH  = { tok , next , Match , Token , while , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { next , tok , typeTok , * , Token , }

285 :	"next"
		- NEIGH  = { tok , next , Match , Token , while , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { next , tok , typeTok , * , Token , }

286 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { tok , next , Match , Token , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

286 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { tok , next , Match , Token , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

286 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { tok , next , Match , Token , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

287 :	"Token"
		- NEIGH  = { next , tok , typeTok , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { tok , next , Match , Token , while , }
		- SUCC   = { strAt , == , tok , if , }

287 :	"*"
		- NEIGH  = { next , tok , typeTok , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { tok , next , Match , Token , while , }
		- SUCC   = { strAt , == , tok , if , }

287 :	"typeTok"
		- NEIGH  = { next , tok , typeTok , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { tok , next , Match , Token , while , }
		- SUCC   = { strAt , == , tok , if , }

287 :	"tok"
		- NEIGH  = { next , tok , typeTok , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { tok , next , Match , Token , while , }
		- SUCC   = { strAt , == , tok , if , }

287 :	"next"
		- NEIGH  = { next , tok , typeTok , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { tok , next , Match , Token , while , }
		- SUCC   = { strAt , == , tok , if , }

289 :	"if"
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { next , tok , typeTok , * , Token , }
		- SUCC   = { tok , tokAt , p , * , Token , }

289 :	"tok"
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { next , tok , typeTok , * , Token , }
		- SUCC   = { tok , tokAt , p , * , Token , }

289 :	"strAt"
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { next , tok , typeTok , * , Token , }
		- SUCC   = { tok , tokAt , p , * , Token , }

289 :	"=="
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { next , tok , }
		- PRED   = { next , tok , typeTok , * , Token , }
		- SUCC   = { tok , tokAt , p , * , Token , }

290 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

290 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

290 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

292 :	"Token"
		- NEIGH  = { tok , tokAt , p , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }

292 :	"*"
		- NEIGH  = { tok , tokAt , p , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }

292 :	"p"
		- NEIGH  = { tok , tokAt , p , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }

292 :	"tok"
		- NEIGH  = { tok , tokAt , p , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }

292 :	"tokAt"
		- NEIGH  = { tok , tokAt , p , * , Token , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }

293 :	"if"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"p"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"hasKnownIntValue"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"&&"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"p"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"values"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"front"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"intvalue"
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

293 :	"=="
		- NEIGH  = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , tokAt , p , * , Token , }
		- SUCC   = { type , typeTok , if , }

294 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

297 :	"if"
		- NEIGH  = { type , typeTok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { tok , cstyleCastError , }
		- PRED   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- SUCC   = { }

297 :	"typeTok"
		- NEIGH  = { type , typeTok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { tok , cstyleCastError , }
		- PRED   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- SUCC   = { }

297 :	"type"
		- NEIGH  = { type , typeTok , if , }
		- PARENT = { scope , && , bodyEnd , != , tok , next , for , }
		- CHILD  = { tok , cstyleCastError , }
		- PRED   = { intvalue , == , front , && , p , values , hasKnownIntValue , if , }
		- SUCC   = { }

298 :	"cstyleCastError"
		- NEIGH  = { tok , cstyleCastError , }
		- PARENT = { type , typeTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

298 :	"tok"
		- NEIGH  = { tok , cstyleCastError , }
		- PARENT = { type , typeTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

303 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

303 :	"cstyleCastError"
		- NEIGH  = { cstyleCastError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

303 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

303 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

303 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

305 :	"reportError"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

305 :	"tok"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

305 :	"Severity"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

305 :	"style"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

310 :	"CWE398"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

317 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

317 :	"invalidPointerCast"
		- NEIGH  = { invalidPointerCast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

319 :	"if"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

319 :	"!"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

319 :	"mSettings"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

319 :	"isEnabled"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

319 :	"Settings"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

319 :	"PORTABILITY"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

320 :	"return"
		- NEIGH  = { return , }
		- PARENT = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

322 :	"printInconclusive"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

322 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

322 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

323 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

323 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

323 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

323 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

323 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

324 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

324 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

324 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

324 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

324 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

324 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

325 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

325 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , CHAR , BOOL , Type , >= , && , type , || , pointer , toType , fromType , valueType , tok , ValueType , Match , Token , ! , if , != , fromTok , toTok , * , }
		- PRED   = { }
		- SUCC   = { }

326 :	"Token"
		- NEIGH  = { toTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fromTok , * , Token , }

326 :	"*"
		- NEIGH  = { toTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fromTok , * , Token , }

326 :	"toTok"
		- NEIGH  = { toTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fromTok , * , Token , }

327 :	"Token"
		- NEIGH  = { fromTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { toTok , * , Token , }
		- SUCC   = { tok , Token , Match , if , }

327 :	"*"
		- NEIGH  = { fromTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { toTok , * , Token , }
		- SUCC   = { tok , Token , Match , if , }

327 :	"fromTok"
		- NEIGH  = { fromTok , * , Token , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { toTok , * , Token , }
		- SUCC   = { tok , Token , Match , if , }

329 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { simpleMatch , Token , if , astOperand1 , && , fromTok , linkAt , tok , toTok , }
		- PRED   = { fromTok , * , Token , }
		- SUCC   = { fromTok , ! , if , }

329 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { simpleMatch , Token , if , astOperand1 , && , fromTok , linkAt , tok , toTok , }
		- PRED   = { fromTok , * , Token , }
		- SUCC   = { fromTok , ! , if , }

329 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { simpleMatch , Token , if , astOperand1 , && , fromTok , linkAt , tok , toTok , }
		- PRED   = { fromTok , * , Token , }
		- SUCC   = { fromTok , ! , if , }

329 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { simpleMatch , Token , if , astOperand1 , && , fromTok , linkAt , tok , toTok , }
		- PRED   = { fromTok , * , Token , }
		- SUCC   = { fromTok , ! , if , }

330 :	"toTok"
		- NEIGH  = { tok , toTok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , fromTok , }

330 :	"tok"
		- NEIGH  = { tok , toTok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , fromTok , }

331 :	"fromTok"
		- NEIGH  = { astOperand1 , tok , fromTok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , toTok , }
		- SUCC   = { }

331 :	"tok"
		- NEIGH  = { astOperand1 , tok , fromTok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , toTok , }
		- SUCC   = { }

331 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , fromTok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , toTok , }
		- SUCC   = { }

332 :	"if"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

332 :	"Token"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

332 :	"simpleMatch"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

332 :	"tok"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

332 :	"&&"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

332 :	"tok"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

332 :	"linkAt"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astOperand2 , next , fromTok , linkAt , tok , toTok , }
		- PRED   = { }
		- SUCC   = { }

333 :	"toTok"
		- NEIGH  = { next , linkAt , tok , toTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , toTok , fromTok , }

333 :	"tok"
		- NEIGH  = { next , linkAt , tok , toTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , toTok , fromTok , }

333 :	"linkAt"
		- NEIGH  = { next , linkAt , tok , toTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , toTok , fromTok , }

333 :	"next"
		- NEIGH  = { next , linkAt , tok , toTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand2 , toTok , fromTok , }

334 :	"fromTok"
		- NEIGH  = { astOperand2 , toTok , fromTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { next , linkAt , tok , toTok , }
		- SUCC   = { }

334 :	"toTok"
		- NEIGH  = { astOperand2 , toTok , fromTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { next , linkAt , tok , toTok , }
		- SUCC   = { }

334 :	"astOperand2"
		- NEIGH  = { astOperand2 , toTok , fromTok , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { next , linkAt , tok , toTok , }
		- SUCC   = { }

336 :	"if"
		- NEIGH  = { fromTok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { valueType , fromType , * , fromTok , ValueType , }

336 :	"!"
		- NEIGH  = { fromTok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { valueType , fromType , * , fromTok , ValueType , }

336 :	"fromTok"
		- NEIGH  = { fromTok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { valueType , fromType , * , fromTok , ValueType , }

337 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { fromTok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

339 :	"ValueType"
		- NEIGH  = { valueType , fromType , * , fromTok , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { fromTok , ! , if , }
		- SUCC   = { toTok , toType , valueType , * , ValueType , }

339 :	"*"
		- NEIGH  = { valueType , fromType , * , fromTok , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { fromTok , ! , if , }
		- SUCC   = { toTok , toType , valueType , * , ValueType , }

339 :	"fromType"
		- NEIGH  = { valueType , fromType , * , fromTok , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { fromTok , ! , if , }
		- SUCC   = { toTok , toType , valueType , * , ValueType , }

339 :	"fromTok"
		- NEIGH  = { valueType , fromType , * , fromTok , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { fromTok , ! , if , }
		- SUCC   = { toTok , toType , valueType , * , ValueType , }

339 :	"valueType"
		- NEIGH  = { valueType , fromType , * , fromTok , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { fromTok , ! , if , }
		- SUCC   = { toTok , toType , valueType , * , ValueType , }

340 :	"ValueType"
		- NEIGH  = { toTok , toType , valueType , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , fromType , * , fromTok , ValueType , }
		- SUCC   = { pointer , fromType , || , ! , toType , if , }

340 :	"*"
		- NEIGH  = { toTok , toType , valueType , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , fromType , * , fromTok , ValueType , }
		- SUCC   = { pointer , fromType , || , ! , toType , if , }

340 :	"toType"
		- NEIGH  = { toTok , toType , valueType , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , fromType , * , fromTok , ValueType , }
		- SUCC   = { pointer , fromType , || , ! , toType , if , }

340 :	"toTok"
		- NEIGH  = { toTok , toType , valueType , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , fromType , * , fromTok , ValueType , }
		- SUCC   = { pointer , fromType , || , ! , toType , if , }

340 :	"valueType"
		- NEIGH  = { toTok , toType , valueType , * , ValueType , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { valueType , fromType , * , fromTok , ValueType , }
		- SUCC   = { pointer , fromType , || , ! , toType , if , }

341 :	"if"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"!"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"fromType"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"||"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"!"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"toType"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"||"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"!"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"fromType"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"pointer"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"||"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"!"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"toType"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

341 :	"pointer"
		- NEIGH  = { pointer , fromType , || , ! , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { toTok , toType , valueType , * , ValueType , }
		- SUCC   = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }

342 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { pointer , fromType , || , ! , toType , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

344 :	"if"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"fromType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"!="
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"toType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"&&"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"fromType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	">="
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"ValueType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"Type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"BOOL"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"&&"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"toType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	">="
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"ValueType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"Type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"BOOL"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"&&"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"toType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"!="
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"ValueType"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"Type"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"CHAR"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"||"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

344 :	"printInconclusive"
		- NEIGH  = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { CHAR , Type , type , if , isIntegral , str , invalidPointerCastError , fromType , == , && , ValueType , tok , toType , }
		- PRED   = { pointer , fromType , || , ! , toType , if , }
		- SUCC   = { }

345 :	"if"
		- NEIGH  = { && , fromType , isIntegral , toType , if , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }

345 :	"toType"
		- NEIGH  = { && , fromType , isIntegral , toType , if , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }

345 :	"isIntegral"
		- NEIGH  = { && , fromType , isIntegral , toType , if , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }

345 :	"&&"
		- NEIGH  = { && , fromType , isIntegral , toType , if , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }

345 :	"fromType"
		- NEIGH  = { && , fromType , isIntegral , toType , if , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }

345 :	"isIntegral"
		- NEIGH  = { && , fromType , isIntegral , toType , if , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }

346 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { && , fromType , isIntegral , toType , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

348 :	"invalidPointerCastError"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"tok"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"fromType"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"str"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"toType"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"str"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"toType"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"type"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"=="
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"ValueType"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"Type"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"CHAR"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"toType"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

348 :	"isIntegral"
		- NEIGH  = { Type , == , type , toType , CHAR , str , ValueType , fromType , isIntegral , tok , invalidPointerCastError , }
		- PARENT = { printInconclusive , CHAR , BOOL , Type , >= , && , != , || , type , ValueType , fromType , toType , if , }
		- CHILD  = { }
		- PRED   = { && , fromType , isIntegral , toType , if , }
		- SUCC   = { }

355 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"invalidPointerCastError"
		- NEIGH  = { invalidPointerCastError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"from"
		- NEIGH  = { from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"to"
		- NEIGH  = { to , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

355 :	"toIsInt"
		- NEIGH  = { toIsInt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

357 :	"if"
		- NEIGH  = { toIsInt , if , }
		- PARENT = { }
		- CHILD  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

357 :	"toIsInt"
		- NEIGH  = { toIsInt , if , }
		- PARENT = { }
		- CHILD  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

358 :	"reportError"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"tok"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"Severity"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"portability"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"+"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"from"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"+"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"+"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"to"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"+"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"CWE704"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"inconclusive"
		- NEIGH  = { to , inconclusive , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"reportError"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"tok"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"Severity"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"portability"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"+"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"from"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"+"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"+"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"to"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"+"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"CWE704"
		- NEIGH  = { to , from , + , portability , tok , CWE704 , Severity , reportError , }
		- PARENT = { toIsInt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

372 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

372 :	"checkPipeParameterSize"
		- NEIGH  = { checkPipeParameterSize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

374 :	"if"
		- NEIGH  = { mSettings , posix , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

374 :	"!"
		- NEIGH  = { mSettings , posix , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

374 :	"mSettings"
		- NEIGH  = { mSettings , posix , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

374 :	"posix"
		- NEIGH  = { mSettings , posix , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

375 :	"return"
		- NEIGH  = { return , }
		- PARENT = { mSettings , posix , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

377 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , posix , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

377 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , posix , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

377 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , posix , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

377 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , posix , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

377 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , posix , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

378 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

378 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

378 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

378 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

378 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

378 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

379 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

379 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { || , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

380 :	"if"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

380 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

380 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

380 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

380 :	"||"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

381 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

381 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

381 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { < , isArgument , && , ! , Token , bigint , Variable , tok , isArray , dim , dimension , variable , var , tokAt , MathLib , if , varTok , * , }
		- PRED   = { }
		- SUCC   = { }

382 :	"Token"
		- NEIGH  = { tok , tokAt , varTok , * , Token , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , varTok , * , var , Variable , }

382 :	"*"
		- NEIGH  = { tok , tokAt , varTok , * , Token , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , varTok , * , var , Variable , }

382 :	"varTok"
		- NEIGH  = { tok , tokAt , varTok , * , Token , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , varTok , * , var , Variable , }

382 :	"tok"
		- NEIGH  = { tok , tokAt , varTok , * , Token , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , varTok , * , var , Variable , }

382 :	"tokAt"
		- NEIGH  = { tok , tokAt , varTok , * , Token , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , varTok , * , var , Variable , }

384 :	"Variable"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , tokAt , varTok , * , Token , }
		- SUCC   = { dim , bigint , MathLib , }

384 :	"*"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , tokAt , varTok , * , Token , }
		- SUCC   = { dim , bigint , MathLib , }

384 :	"var"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , tokAt , varTok , * , Token , }
		- SUCC   = { dim , bigint , MathLib , }

384 :	"varTok"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , tokAt , varTok , * , Token , }
		- SUCC   = { dim , bigint , MathLib , }

384 :	"variable"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , tokAt , varTok , * , Token , }
		- SUCC   = { dim , bigint , MathLib , }

385 :	"MathLib"
		- NEIGH  = { dim , bigint , MathLib , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }

385 :	"bigint"
		- NEIGH  = { dim , bigint , MathLib , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }

385 :	"dim"
		- NEIGH  = { dim , bigint , MathLib , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }

386 :	"if"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"var"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"&&"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"var"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"isArray"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"&&"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"!"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"var"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"isArgument"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"&&"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"dim"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"var"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"dimension"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

386 :	"<"
		- NEIGH  = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { str , checkPipeParameterSizeError , dim , varTok , string , MathLib , strDim , toString , std , }
		- PRED   = { dim , bigint , MathLib , }
		- SUCC   = { }

387 :	"std"
		- NEIGH  = { dim , string , MathLib , strDim , toString , std , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { strDim , str , varTok , checkPipeParameterSizeError , }

387 :	"string"
		- NEIGH  = { dim , string , MathLib , strDim , toString , std , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { strDim , str , varTok , checkPipeParameterSizeError , }

387 :	"strDim"
		- NEIGH  = { dim , string , MathLib , strDim , toString , std , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { strDim , str , varTok , checkPipeParameterSizeError , }

387 :	"MathLib"
		- NEIGH  = { dim , string , MathLib , strDim , toString , std , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { strDim , str , varTok , checkPipeParameterSizeError , }

387 :	"toString"
		- NEIGH  = { dim , string , MathLib , strDim , toString , std , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { strDim , str , varTok , checkPipeParameterSizeError , }

387 :	"dim"
		- NEIGH  = { dim , string , MathLib , strDim , toString , std , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { strDim , str , varTok , checkPipeParameterSizeError , }

388 :	"checkPipeParameterSizeError"
		- NEIGH  = { strDim , str , varTok , checkPipeParameterSizeError , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { dim , string , MathLib , strDim , toString , std , }
		- SUCC   = { }

388 :	"varTok"
		- NEIGH  = { strDim , str , varTok , checkPipeParameterSizeError , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { dim , string , MathLib , strDim , toString , std , }
		- SUCC   = { }

388 :	"varTok"
		- NEIGH  = { strDim , str , varTok , checkPipeParameterSizeError , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { dim , string , MathLib , strDim , toString , std , }
		- SUCC   = { }

388 :	"str"
		- NEIGH  = { strDim , str , varTok , checkPipeParameterSizeError , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { dim , string , MathLib , strDim , toString , std , }
		- SUCC   = { }

388 :	"strDim"
		- NEIGH  = { strDim , str , varTok , checkPipeParameterSizeError , }
		- PARENT = { < , dimension , isArgument , if , ! , isArray , && , dim , var , }
		- CHILD  = { }
		- PRED   = { dim , string , MathLib , strDim , toString , std , }
		- SUCC   = { }

395 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"checkPipeParameterSizeError"
		- NEIGH  = { checkPipeParameterSizeError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"strVarName"
		- NEIGH  = { strVarName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

395 :	"strDim"
		- NEIGH  = { strDim , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

397 :	"reportError"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

397 :	"tok"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

397 :	"Severity"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

397 :	"error"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"+"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"strVarName"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"+"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

402 :	"+"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

402 :	"strDim"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

402 :	"+"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

402 :	"CWE686"
		- NEIGH  = { strVarName , CWE686 , + , error , tok , strDim , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"checkRedundantAssignment"
		- NEIGH  = { checkRedundantAssignment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

411 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

411 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

411 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

411 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

411 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

411 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

412 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

413 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

413 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

413 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

413 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

413 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

414 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , != , tok , scope , * , bodyStart , if , ! , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

414 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , != , tok , scope , * , bodyStart , if , ! , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

414 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , != , tok , scope , * , bodyStart , if , ! , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

414 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , != , tok , scope , * , bodyStart , if , ! , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

414 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , != , tok , scope , * , bodyStart , if , ! , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

414 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , != , tok , scope , * , bodyStart , if , ! , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

415 :	"if"
		- NEIGH  = { scope , bodyStart , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

415 :	"!"
		- NEIGH  = { scope , bodyStart , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

415 :	"scope"
		- NEIGH  = { scope , bodyStart , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

415 :	"bodyStart"
		- NEIGH  = { scope , bodyStart , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

416 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { scope , bodyStart , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

417 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

417 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , Match , tok , simpleMatch , astOperand1 , || , isAssignmentOp , Token , if , }
		- PRED   = { scope , bodyStart , ! , if , }
		- SUCC   = { }

418 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

418 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

418 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

418 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

420 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

421 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { linkAt , tok , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }

421 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { linkAt , tok , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }

421 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { linkAt , tok , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }

421 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { linkAt , tok , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }

423 :	"tok"
		- NEIGH  = { linkAt , tok , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

423 :	"tok"
		- NEIGH  = { linkAt , tok , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

423 :	"linkAt"
		- NEIGH  = { linkAt , tok , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

424 :	"if"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"isAssignmentOp"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"||"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"Token"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"Match"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"&&"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"tok"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

424 :	"astOperand1"
		- NEIGH  = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { for , bodyEnd , nextAssign , start , hasOperand , library , next , typeScope , * , mSettings , valueType , simpleMatch , isStatic , tokAt , isReference , inconclusive , != , astOperand2 , hasCase , linenr , astOperand1 , scope , Token , == , tok2 , && , astParent , variable , tok , previous , fwdAnalysis , Match , || , isAssignmentOp , - , ! , mTokenizer , nameToken , isCPP , isInitialization , reassign , FwdAnalysis , isNullOperand , if , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

425 :	"if"
		- NEIGH  = { astParent , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isInitialization , }

425 :	"tok"
		- NEIGH  = { astParent , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isInitialization , }

425 :	"astParent"
		- NEIGH  = { astParent , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isInitialization , }

426 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

430 :	"isInitialization"
		- NEIGH  = { isInitialization , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { astParent , tok , if , }
		- SUCC   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }

431 :	"if"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"Token"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"Match"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tok"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tokAt"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"-"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"&&"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tok"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"previous"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"variable"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"&&"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tok"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"previous"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"variable"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"nameToken"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"=="
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tok"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tokAt"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"-"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"&&"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tok"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tokAt"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"-"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"linenr"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"=="
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"tok"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"previous"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

431 :	"linenr"
		- NEIGH  = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { rhs , * , Token , if , astOperand2 , visitAstNodes , & , trivial , tok , isInitialization , }
		- PRED   = { isInitialization , }
		- SUCC   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }

432 :	"isInitialization"
		- NEIGH  = { isInitialization , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { trivial , }

433 :	"trivial"
		- NEIGH  = { trivial , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { isInitialization , }
		- SUCC   = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }

434 :	"visitAstNodes"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

434 :	"tok"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

434 :	"astOperand2"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

435 :	"&"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

435 :	"Token"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

435 :	"*"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

435 :	"rhs"
		- NEIGH  = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { trivial , if , }

436 :	"if"
		- NEIGH  = { simpleMatch , Token , rhs , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { rhs , && , Token , varId , Match , ! , if , }

436 :	"Token"
		- NEIGH  = { simpleMatch , Token , rhs , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { rhs , && , Token , varId , Match , ! , if , }

436 :	"simpleMatch"
		- NEIGH  = { simpleMatch , Token , rhs , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { rhs , && , Token , varId , Match , ! , if , }

436 :	"rhs"
		- NEIGH  = { simpleMatch , Token , rhs , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { rhs , && , Token , varId , Match , ! , if , }

437 :	"return"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { simpleMatch , Token , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

437 :	"ChildrenToVisit"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { simpleMatch , Token , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

437 :	"none"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { simpleMatch , Token , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

438 :	"if"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"Token"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"Match"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"rhs"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"&&"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"!"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"rhs"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

438 :	"varId"
		- NEIGH  = { rhs , && , Token , varId , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { simpleMatch , Token , rhs , if , }
		- SUCC   = { rhs , && , Token , hasKnownIntValue , Match , if , }

439 :	"return"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { rhs , && , Token , varId , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

439 :	"ChildrenToVisit"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { rhs , && , Token , varId , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

439 :	"none"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { rhs , && , Token , varId , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

440 :	"if"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

440 :	"Token"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

440 :	"Match"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

440 :	"rhs"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

440 :	"&&"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

440 :	"rhs"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

440 :	"hasKnownIntValue"
		- NEIGH  = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , varId , Match , ! , if , }
		- SUCC   = { isCast , rhs , if , }

441 :	"return"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

441 :	"ChildrenToVisit"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

441 :	"none"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

442 :	"if"
		- NEIGH  = { isCast , rhs , if , }
		- PARENT = { }
		- CHILD  = { op2 , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- SUCC   = { trivial , }

442 :	"rhs"
		- NEIGH  = { isCast , rhs , if , }
		- PARENT = { }
		- CHILD  = { op2 , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- SUCC   = { trivial , }

442 :	"isCast"
		- NEIGH  = { isCast , rhs , if , }
		- PARENT = { }
		- CHILD  = { op2 , ChildrenToVisit , return , }
		- PRED   = { rhs , && , Token , hasKnownIntValue , Match , if , }
		- SUCC   = { trivial , }

443 :	"return"
		- NEIGH  = { op2 , ChildrenToVisit , return , }
		- PARENT = { isCast , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

443 :	"ChildrenToVisit"
		- NEIGH  = { op2 , ChildrenToVisit , return , }
		- PARENT = { isCast , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

443 :	"op2"
		- NEIGH  = { op2 , ChildrenToVisit , return , }
		- PARENT = { isCast , rhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

444 :	"trivial"
		- NEIGH  = { trivial , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isCast , rhs , if , }
		- SUCC   = { ChildrenToVisit , done , return , }

445 :	"return"
		- NEIGH  = { ChildrenToVisit , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { }

445 :	"ChildrenToVisit"
		- NEIGH  = { ChildrenToVisit , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { }

445 :	"done"
		- NEIGH  = { ChildrenToVisit , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { trivial , }
		- SUCC   = { }

447 :	"if"
		- NEIGH  = { trivial , if , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { continue , }
		- PRED   = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- SUCC   = { }

447 :	"trivial"
		- NEIGH  = { trivial , if , }
		- PARENT = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- CHILD  = { continue , }
		- PRED   = { rhs , * , & , astOperand2 , tok , Token , visitAstNodes , }
		- SUCC   = { }

448 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { trivial , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

452 :	"if"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"Token"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"simpleMatch"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"tok"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"astOperand2"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"||"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"FwdAnalysis"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"isNullOperand"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"tok"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

452 :	"astOperand2"
		- NEIGH  = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { linenr , == , && , - , tok , variable , previous , tokAt , Token , Match , nameToken , if , }
		- SUCC   = { && , astOperand1 , isReference , variable , tok , if , }

453 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"if"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"tok"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"astOperand1"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"variable"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"&&"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"tok"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"astOperand1"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"variable"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

455 :	"isReference"
		- NEIGH  = { && , astOperand1 , isReference , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { FwdAnalysis , || , if , astOperand2 , tok , simpleMatch , isNullOperand , Token , }
		- SUCC   = { isStatic , && , astOperand1 , variable , tok , if , }

457 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { && , astOperand1 , isReference , variable , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

459 :	"if"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"tok"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"astOperand1"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"variable"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"&&"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"tok"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"astOperand1"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"variable"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

459 :	"isStatic"
		- NEIGH  = { isStatic , && , astOperand1 , variable , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { && , astOperand1 , isReference , variable , tok , if , }
		- SUCC   = { inconclusive , }

461 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isStatic , && , astOperand1 , variable , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isStatic , && , astOperand1 , variable , tok , if , }
		- SUCC   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }

465 :	"if"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"mTokenizer"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"isCPP"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"&&"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"tok"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"astOperand1"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"valueType"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"&&"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"tok"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"astOperand1"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"valueType"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

465 :	"typeScope"
		- NEIGH  = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { functionList , f , op , & , valueType , astOperand1 , Function , str , typeScope , tok , std , + , for , string , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

466 :	"std"
		- NEIGH  = { str , tok , + , op , string , std , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }

466 :	"string"
		- NEIGH  = { str , tok , + , op , string , std , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }

466 :	"op"
		- NEIGH  = { str , tok , + , op , string , std , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }

466 :	"+"
		- NEIGH  = { str , tok , + , op , string , std , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }

466 :	"tok"
		- NEIGH  = { str , tok , + , op , string , std , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }

466 :	"str"
		- NEIGH  = { str , tok , + , op , string , std , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }

467 :	"for"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"Function"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"&"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"f"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"tok"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"astOperand1"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"valueType"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"typeScope"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

467 :	"functionList"
		- NEIGH  = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- PARENT = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- CHILD  = { op , == , f , name , if , }
		- PRED   = { str , tok , + , op , string , std , }
		- SUCC   = { }

468 :	"if"
		- NEIGH  = { op , == , f , name , if , }
		- PARENT = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- CHILD  = { break , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

468 :	"f"
		- NEIGH  = { op , == , f , name , if , }
		- PARENT = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- CHILD  = { break , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

468 :	"name"
		- NEIGH  = { op , == , f , name , if , }
		- PARENT = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- CHILD  = { break , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

468 :	"=="
		- NEIGH  = { op , == , f , name , if , }
		- PARENT = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- CHILD  = { break , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

468 :	"op"
		- NEIGH  = { op , == , f , name , if , }
		- PARENT = { functionList , valueType , tok , f , & , astOperand1 , Function , typeScope , for , }
		- CHILD  = { break , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

469 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { op , == , f , name , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

470 :	"break"
		- NEIGH  = { break , }
		- PARENT = { op , == , f , name , if , }
		- CHILD  = { }
		- PRED   = { inconclusive , }
		- SUCC   = { }

474 :	"if"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- SUCC   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }

474 :	"inconclusive"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- SUCC   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }

474 :	"&&"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- SUCC   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }

474 :	"!"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- SUCC   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }

474 :	"mSettings"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- SUCC   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }

474 :	"inconclusive"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { astOperand1 , valueType , mTokenizer , tok , && , typeScope , isCPP , if , }
		- SUCC   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }

475 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { ! , mSettings , && , inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

477 :	"FwdAnalysis"
		- NEIGH  = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }

477 :	"fwdAnalysis"
		- NEIGH  = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }

477 :	"mTokenizer"
		- NEIGH  = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }

477 :	"isCPP"
		- NEIGH  = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }

477 :	"mSettings"
		- NEIGH  = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }

477 :	"library"
		- NEIGH  = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }

478 :	"if"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

478 :	"fwdAnalysis"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

478 :	"hasOperand"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

478 :	"tok"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

478 :	"astOperand2"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

478 :	"tok"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

478 :	"astOperand1"
		- NEIGH  = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { library , isCPP , mTokenizer , fwdAnalysis , mSettings , FwdAnalysis , }
		- SUCC   = { start , * , Token , }

479 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

482 :	"Token"
		- NEIGH  = { start , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- SUCC   = { isAssignmentOp , tok , if , }

482 :	"*"
		- NEIGH  = { start , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- SUCC   = { isAssignmentOp , tok , if , }

482 :	"start"
		- NEIGH  = { start , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , if , astOperand2 , tok , fwdAnalysis , hasOperand , }
		- SUCC   = { isAssignmentOp , tok , if , }

483 :	"if"
		- NEIGH  = { isAssignmentOp , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { findExpressionStartEndTokens , next , second , tok , start , }
		- PRED   = { start , * , Token , }
		- SUCC   = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }

483 :	"tok"
		- NEIGH  = { isAssignmentOp , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { findExpressionStartEndTokens , next , second , tok , start , }
		- PRED   = { start , * , Token , }
		- SUCC   = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }

483 :	"isAssignmentOp"
		- NEIGH  = { isAssignmentOp , tok , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { findExpressionStartEndTokens , next , second , tok , start , }
		- PRED   = { start , * , Token , }
		- SUCC   = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }

484 :	"start"
		- NEIGH  = { next , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

484 :	"tok"
		- NEIGH  = { next , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

484 :	"next"
		- NEIGH  = { next , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

486 :	"start"
		- NEIGH  = { next , findExpressionStartEndTokens , second , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

486 :	"tok"
		- NEIGH  = { next , findExpressionStartEndTokens , second , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

486 :	"findExpressionStartEndTokens"
		- NEIGH  = { next , findExpressionStartEndTokens , second , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

486 :	"second"
		- NEIGH  = { next , findExpressionStartEndTokens , second , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

486 :	"next"
		- NEIGH  = { next , findExpressionStartEndTokens , second , tok , start , }
		- PARENT = { isAssignmentOp , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

489 :	"Token"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"*"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"nextAssign"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"fwdAnalysis"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"reassign"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"tok"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"astOperand1"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"start"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"scope"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

489 :	"bodyEnd"
		- NEIGH  = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { isAssignmentOp , tok , if , }
		- SUCC   = { nextAssign , ! , if , }

491 :	"if"
		- NEIGH  = { nextAssign , ! , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { hasCase , }

491 :	"!"
		- NEIGH  = { nextAssign , ! , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { hasCase , }

491 :	"nextAssign"
		- NEIGH  = { nextAssign , ! , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { continue , }
		- PRED   = { scope , start , reassign , bodyEnd , tok , fwdAnalysis , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { hasCase , }

492 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { nextAssign , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

495 :	"hasCase"
		- NEIGH  = { hasCase , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { }
		- PRED   = { nextAssign , ! , if , }
		- SUCC   = { nextAssign , != , tok , tok2 , * , next , Token , for , }

496 :	"for"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"Token"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"*"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"tok2"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"tok"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"tok2"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"!="
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"nextAssign"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"tok2"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"tok2"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

496 :	"next"
		- NEIGH  = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { hasCase , }
		- SUCC   = { hasCase , if , }

497 :	"if"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"tok2"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"str"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"=="
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"||"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"tok2"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"str"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

497 :	"=="
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

498 :	"break"
		- NEIGH  = { break , }
		- PARENT = { || , == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

499 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , hasCase , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

499 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , hasCase , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

499 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , hasCase , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

499 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , hasCase , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

500 :	"hasCase"
		- NEIGH  = { hasCase , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

501 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { hasCase , }
		- SUCC   = { }

506 :	"if"
		- NEIGH  = { hasCase , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { if , expressionString , astOperand1 , nextAssign , isInitialization , tok , redundantAssignmentInSwitchError , }
		- PRED   = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- SUCC   = { }

506 :	"hasCase"
		- NEIGH  = { hasCase , if , }
		- PARENT = { && , Match , astOperand1 , isAssignmentOp , || , Token , tok , if , }
		- CHILD  = { if , expressionString , astOperand1 , nextAssign , isInitialization , tok , redundantAssignmentInSwitchError , }
		- PRED   = { nextAssign , != , tok , tok2 , * , next , Token , for , }
		- SUCC   = { }

507 :	"redundantAssignmentInSwitchError"
		- NEIGH  = { expressionString , astOperand1 , nextAssign , tok , redundantAssignmentInSwitchError , }
		- PARENT = { hasCase , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

507 :	"tok"
		- NEIGH  = { expressionString , astOperand1 , nextAssign , tok , redundantAssignmentInSwitchError , }
		- PARENT = { hasCase , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

507 :	"nextAssign"
		- NEIGH  = { expressionString , astOperand1 , nextAssign , tok , redundantAssignmentInSwitchError , }
		- PARENT = { hasCase , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

507 :	"tok"
		- NEIGH  = { expressionString , astOperand1 , nextAssign , tok , redundantAssignmentInSwitchError , }
		- PARENT = { hasCase , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

507 :	"astOperand1"
		- NEIGH  = { expressionString , astOperand1 , nextAssign , tok , redundantAssignmentInSwitchError , }
		- PARENT = { hasCase , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

507 :	"expressionString"
		- NEIGH  = { expressionString , astOperand1 , nextAssign , tok , redundantAssignmentInSwitchError , }
		- PARENT = { hasCase , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

508 :	"if"
		- NEIGH  = { isInitialization , if , }
		- PARENT = { hasCase , if , }
		- CHILD  = { inconclusive , expressionString , astOperand1 , nextAssign , redundantAssignmentError , tok , redundantInitializationError , }
		- PRED   = { }
		- SUCC   = { }

508 :	"isInitialization"
		- NEIGH  = { isInitialization , if , }
		- PARENT = { hasCase , if , }
		- CHILD  = { inconclusive , expressionString , astOperand1 , nextAssign , redundantAssignmentError , tok , redundantInitializationError , }
		- PRED   = { }
		- SUCC   = { }

509 :	"redundantInitializationError"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

509 :	"tok"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

509 :	"nextAssign"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

509 :	"tok"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

509 :	"astOperand1"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

509 :	"expressionString"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

509 :	"inconclusive"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantInitializationError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"redundantAssignmentError"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"tok"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"nextAssign"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"tok"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"astOperand1"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"expressionString"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

511 :	"inconclusive"
		- NEIGH  = { inconclusive , expressionString , astOperand1 , nextAssign , tok , redundantAssignmentError , }
		- PARENT = { isInitialization , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"redundantCopyError"
		- NEIGH  = { redundantCopyError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

519 :	"std"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"list"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"<"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"Token"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"*"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	">"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"callstack"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"tok1"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

519 :	"tok2"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , performance , reportError , callstack , Severity , }

520 :	"reportError"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

520 :	"callstack"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

520 :	"Severity"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

520 :	"performance"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

521 :	"+"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

521 :	"var"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

521 :	"+"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

522 :	"CWE563"
		- NEIGH  = { CWE563 , var , + , performance , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

525 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"redundantCopyInSwitchError"
		- NEIGH  = { redundantCopyInSwitchError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

525 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

527 :	"std"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"list"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"<"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"Token"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"*"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	">"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"callstack"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"tok1"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

527 :	"tok2"
		- NEIGH  = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , + , warning , reportError , callstack , Severity , }

528 :	"reportError"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

528 :	"callstack"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

528 :	"Severity"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

528 :	"warning"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

529 :	"+"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

529 :	"var"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

529 :	"+"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

530 :	"CWE563"
		- NEIGH  = { CWE563 , var , + , warning , reportError , callstack , Severity , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , callstack , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { }

533 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"redundantAssignmentError"
		- NEIGH  = { redundantAssignmentError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

533 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

535 :	"ErrorPath"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"errorPath"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"ErrorPathItem"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"tok1"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"var"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"+"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"ErrorPathItem"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"tok2"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"var"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

535 :	"+"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { inconclusive , if , }

536 :	"if"
		- NEIGH  = { inconclusive , if , }
		- PARENT = { }
		- CHILD  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

536 :	"inconclusive"
		- NEIGH  = { inconclusive , if , }
		- PARENT = { }
		- CHILD  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

537 :	"reportError"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

537 :	"errorPath"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

537 :	"Severity"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

537 :	"style"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

538 :	"+"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

538 :	"var"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

538 :	"+"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

540 :	"CWE563"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"reportError"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"errorPath"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"Severity"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"style"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

543 :	"+"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

543 :	"var"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

543 :	"+"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

544 :	"CWE563"
		- NEIGH  = { CWE563 , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"redundantInitializationError"
		- NEIGH  = { redundantInitializationError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

547 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

549 :	"ErrorPath"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"errorPath"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"ErrorPathItem"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"tok1"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"var"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"+"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"ErrorPathItem"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"tok2"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"var"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

549 :	"+"
		- NEIGH  = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }

550 :	"reportError"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

550 :	"errorPath"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

550 :	"Severity"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

550 :	"style"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

551 :	"+"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

551 :	"var"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

551 :	"+"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

552 :	"CWE563"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

553 :	"inconclusive"
		- NEIGH  = { CWE563 , inconclusive , var , + , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , tok2 , ErrorPathItem , var , tok1 , errorPath , ErrorPath , }
		- SUCC   = { }

556 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"redundantAssignmentInSwitchError"
		- NEIGH  = { redundantAssignmentInSwitchError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

556 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

558 :	"ErrorPath"
		- NEIGH  = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , warning , + , errorPath , Severity , reportError , }

558 :	"errorPath"
		- NEIGH  = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , warning , + , errorPath , Severity , reportError , }

558 :	"ErrorPathItem"
		- NEIGH  = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , warning , + , errorPath , Severity , reportError , }

558 :	"tok1"
		- NEIGH  = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , warning , + , errorPath , Severity , reportError , }

558 :	"ErrorPathItem"
		- NEIGH  = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , warning , + , errorPath , Severity , reportError , }

558 :	"tok2"
		- NEIGH  = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE563 , var , warning , + , errorPath , Severity , reportError , }

559 :	"reportError"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

559 :	"errorPath"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

559 :	"Severity"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

559 :	"warning"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

560 :	"+"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

560 :	"var"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

560 :	"+"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

561 :	"CWE563"
		- NEIGH  = { CWE563 , var , warning , + , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , ErrorPathItem , errorPath , tok2 , ErrorPath , }
		- SUCC   = { }

574 :	"isFunctionOrBreakPattern"
		- NEIGH  = { isFunctionOrBreakPattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

574 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

574 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

574 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

576 :	"if"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"||"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

576 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , }

577 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

579 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , tok , Token , Match , if , }
		- SUCC   = { }

582 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

582 :	"checkRedundantAssignmentInSwitch"
		- NEIGH  = { checkRedundantAssignmentInSwitch , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

584 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

584 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

584 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

584 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

584 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

584 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

585 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

587 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , for , switchScope , & , Scope , }

587 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , for , switchScope , & , Scope , }

587 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , for , switchScope , & , Scope , }

587 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , for , switchScope , & , Scope , }

587 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , for , switchScope , & , Scope , }

591 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- PARENT = { }
		- CHILD  = { next , bodyEnd , tok2 , varsWithBitsSet , > , * , < , bodyStart , type , || , eSwitch , Scope , for , bitOperations , != , string , Token , ! , map , std , switchScope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

591 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- PARENT = { }
		- CHILD  = { next , bodyEnd , tok2 , varsWithBitsSet , > , * , < , bodyStart , type , || , eSwitch , Scope , for , bitOperations , != , string , Token , ! , map , std , switchScope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

591 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- PARENT = { }
		- CHILD  = { next , bodyEnd , tok2 , varsWithBitsSet , > , * , < , bodyStart , type , || , eSwitch , Scope , for , bitOperations , != , string , Token , ! , map , std , switchScope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

591 :	"switchScope"
		- NEIGH  = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- PARENT = { }
		- CHILD  = { next , bodyEnd , tok2 , varsWithBitsSet , > , * , < , bodyStart , type , || , eSwitch , Scope , for , bitOperations , != , string , Token , ! , map , std , switchScope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

591 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- PARENT = { }
		- CHILD  = { next , bodyEnd , tok2 , varsWithBitsSet , > , * , < , bodyStart , type , || , eSwitch , Scope , for , bitOperations , != , string , Token , ! , map , std , switchScope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

591 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- PARENT = { }
		- CHILD  = { next , bodyEnd , tok2 , varsWithBitsSet , > , * , < , bodyStart , type , || , eSwitch , Scope , for , bitOperations , != , string , Token , ! , map , std , switchScope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

592 :	"if"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"switchScope"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"type"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"!="
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"Scope"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"eSwitch"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"||"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"!"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"switchScope"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

592 :	"bodyStart"
		- NEIGH  = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varsWithBitsSet , > , * , Token , < , map , std , }

593 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

596 :	"std"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

596 :	"map"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

596 :	"<"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

596 :	"Token"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

596 :	"*"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

596 :	">"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

596 :	"varsWithBitsSet"
		- NEIGH  = { varsWithBitsSet , > , * , Token , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { bodyStart , || , eSwitch , Scope , != , type , switchScope , ! , if , }
		- SUCC   = { bitOperations , > , string , < , map , std , }

597 :	"std"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

597 :	"map"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

597 :	"<"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

597 :	"std"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

597 :	"string"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

597 :	">"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

597 :	"bitOperations"
		- NEIGH  = { bitOperations , > , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { }
		- PRED   = { varsWithBitsSet , > , * , Token , < , map , std , }
		- SUCC   = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }

599 :	"for"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"Token"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"*"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"tok2"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"switchScope"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"bodyStart"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"next"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"tok2"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"!="
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"switchScope"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"bodyEnd"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"tok2"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"tok2"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

599 :	"next"
		- NEIGH  = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- PARENT = { scopeList , symbolDatabase , for , switchScope , & , Scope , }
		- CHILD  = { Match , == , str , Token , previous , tok2 , isFunctionOrBreakPattern , if , }
		- PRED   = { bitOperations , > , string , < , map , std , }
		- SUCC   = { }

600 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { link , && , previous , tok2 , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , previous , Match , if , }

600 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { link , && , previous , tok2 , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , previous , Match , if , }

600 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { link , && , previous , tok2 , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , previous , Match , if , }

600 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { link , && , previous , tok2 , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , previous , Match , if , }

604 :	"if"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"Token"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"Match"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"tok2"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"previous"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"&&"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"tok2"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

604 :	"link"
		- NEIGH  = { link , && , previous , tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { != , link , endOfConditional , tok2 , * , next , tok3 , for , Token , }
		- PRED   = { }
		- SUCC   = { }

605 :	"Token"
		- NEIGH  = { link , endOfConditional , tok2 , * , Token , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }

605 :	"*"
		- NEIGH  = { link , endOfConditional , tok2 , * , Token , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }

605 :	"endOfConditional"
		- NEIGH  = { link , endOfConditional , tok2 , * , Token , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }

605 :	"tok2"
		- NEIGH  = { link , endOfConditional , tok2 , * , Token , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }

605 :	"link"
		- NEIGH  = { link , endOfConditional , tok2 , * , Token , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }

606 :	"for"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"Token"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"*"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"tok3"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"tok2"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"tok3"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"!="
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"endOfConditional"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"tok3"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"tok3"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

606 :	"next"
		- NEIGH  = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { != , varId , tok3 , if , }
		- PRED   = { link , endOfConditional , tok2 , * , Token , }
		- SUCC   = { endOfConditional , tok2 , }

607 :	"if"
		- NEIGH  = { != , varId , tok3 , if , }
		- PARENT = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- CHILD  = { isFunctionOrBreakPattern , if , bitOperations , erase , varId , tok3 , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

607 :	"tok3"
		- NEIGH  = { != , varId , tok3 , if , }
		- PARENT = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- CHILD  = { isFunctionOrBreakPattern , if , bitOperations , erase , varId , tok3 , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

607 :	"varId"
		- NEIGH  = { != , varId , tok3 , if , }
		- PARENT = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- CHILD  = { isFunctionOrBreakPattern , if , bitOperations , erase , varId , tok3 , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

607 :	"!="
		- NEIGH  = { != , varId , tok3 , if , }
		- PARENT = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- CHILD  = { isFunctionOrBreakPattern , if , bitOperations , erase , varId , tok3 , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

608 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok3 , erase , varsWithBitsSet , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok3 , erase , bitOperations , }

608 :	"erase"
		- NEIGH  = { varId , tok3 , erase , varsWithBitsSet , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok3 , erase , bitOperations , }

608 :	"tok3"
		- NEIGH  = { varId , tok3 , erase , varsWithBitsSet , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok3 , erase , bitOperations , }

608 :	"varId"
		- NEIGH  = { varId , tok3 , erase , varsWithBitsSet , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok3 , erase , bitOperations , }

609 :	"bitOperations"
		- NEIGH  = { varId , tok3 , erase , bitOperations , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok3 , erase , varsWithBitsSet , }
		- SUCC   = { }

609 :	"erase"
		- NEIGH  = { varId , tok3 , erase , bitOperations , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok3 , erase , varsWithBitsSet , }
		- SUCC   = { }

609 :	"tok3"
		- NEIGH  = { varId , tok3 , erase , bitOperations , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok3 , erase , varsWithBitsSet , }
		- SUCC   = { }

609 :	"varId"
		- NEIGH  = { varId , tok3 , erase , bitOperations , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok3 , erase , varsWithBitsSet , }
		- SUCC   = { }

610 :	"if"
		- NEIGH  = { isFunctionOrBreakPattern , tok3 , if , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { bitOperations , clear , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

610 :	"isFunctionOrBreakPattern"
		- NEIGH  = { isFunctionOrBreakPattern , tok3 , if , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { bitOperations , clear , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

610 :	"tok3"
		- NEIGH  = { isFunctionOrBreakPattern , tok3 , if , }
		- PARENT = { != , varId , tok3 , if , }
		- CHILD  = { bitOperations , clear , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

611 :	"varsWithBitsSet"
		- NEIGH  = { clear , varsWithBitsSet , }
		- PARENT = { isFunctionOrBreakPattern , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { clear , bitOperations , }

611 :	"clear"
		- NEIGH  = { clear , varsWithBitsSet , }
		- PARENT = { isFunctionOrBreakPattern , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { clear , bitOperations , }

612 :	"bitOperations"
		- NEIGH  = { clear , bitOperations , }
		- PARENT = { isFunctionOrBreakPattern , tok3 , if , }
		- CHILD  = { }
		- PRED   = { clear , varsWithBitsSet , }
		- SUCC   = { }

612 :	"clear"
		- NEIGH  = { clear , bitOperations , }
		- PARENT = { isFunctionOrBreakPattern , tok3 , if , }
		- CHILD  = { }
		- PRED   = { clear , varsWithBitsSet , }
		- SUCC   = { }

615 :	"tok2"
		- NEIGH  = { endOfConditional , tok2 , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- SUCC   = { }

615 :	"endOfConditional"
		- NEIGH  = { endOfConditional , tok2 , }
		- PARENT = { link , && , previous , tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endOfConditional , != , tok2 , * , next , Token , tok3 , for , }
		- SUCC   = { }

623 :	"if"
		- NEIGH  = { tok2 , Token , previous , Match , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { || , && , Token , if , bitOperations , Match , erase , next , varId , previous , == , tok2 , strAt , astOperand2 , varsWithBitsSet , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { tok2 , isFunctionOrBreakPattern , if , }

623 :	"Token"
		- NEIGH  = { tok2 , Token , previous , Match , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { || , && , Token , if , bitOperations , Match , erase , next , varId , previous , == , tok2 , strAt , astOperand2 , varsWithBitsSet , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { tok2 , isFunctionOrBreakPattern , if , }

623 :	"Match"
		- NEIGH  = { tok2 , Token , previous , Match , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { || , && , Token , if , bitOperations , Match , erase , next , varId , previous , == , tok2 , strAt , astOperand2 , varsWithBitsSet , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { tok2 , isFunctionOrBreakPattern , if , }

623 :	"tok2"
		- NEIGH  = { tok2 , Token , previous , Match , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { || , && , Token , if , bitOperations , Match , erase , next , varId , previous , == , tok2 , strAt , astOperand2 , varsWithBitsSet , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { tok2 , isFunctionOrBreakPattern , if , }

623 :	"previous"
		- NEIGH  = { tok2 , Token , previous , Match , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { || , && , Token , if , bitOperations , Match , erase , next , varId , previous , == , tok2 , strAt , astOperand2 , varsWithBitsSet , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { tok2 , isFunctionOrBreakPattern , if , }

624 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

624 :	"erase"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

624 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

624 :	"varId"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

625 :	"bitOperations"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

625 :	"erase"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

625 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

625 :	"varId"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

631 :	"if"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

631 :	"Token"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

631 :	"Match"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

631 :	"tok2"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

631 :	"previous"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

631 :	"&&"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"tok2"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"strAt"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"=="
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"||"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"tok2"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"strAt"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"=="
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

632 :	"&&"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

633 :	"Token"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

633 :	"Match"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

633 :	"tok2"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

633 :	"next"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

633 :	"astOperand2"
		- NEIGH  = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- PARENT = { tok2 , Token , previous , Match , if , }
		- CHILD  = { previous , Match , if , varId , tokAt , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

634 :	"std"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"string"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"bitOp"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"tok2"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"strAt"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"+"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"tok2"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

634 :	"strAt"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

635 :	"std"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"map"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"<"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"Token"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"*"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	">"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"const_iterator"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"i2"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"varsWithBitsSet"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"find"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"tok2"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

635 :	"varId"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

638 :	"if"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

638 :	"i2"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

638 :	"=="
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

638 :	"varsWithBitsSet"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

638 :	"end"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

639 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

639 :	"tok2"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

639 :	"varId"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

639 :	"tok2"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

640 :	"bitOperations"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

640 :	"tok2"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

640 :	"varId"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

640 :	"bitOp"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

644 :	"if"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

644 :	"bitOperations"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

644 :	"tok2"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

644 :	"varId"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

644 :	"=="
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

644 :	"bitOp"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

645 :	"redundantBitwiseOperationInSwitchError"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

645 :	"i2"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

645 :	"second"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

645 :	"i2"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

645 :	"second"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

645 :	"str"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

649 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

649 :	"erase"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

649 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

649 :	"varId"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

650 :	"bitOperations"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

650 :	"erase"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

650 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

650 :	"varId"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

657 :	"if"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

657 :	"Token"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

657 :	"Match"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

657 :	"tok2"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

657 :	"previous"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

657 :	"&&"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

658 :	"tok2"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

658 :	"varId"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

658 :	"=="
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

658 :	"tok2"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

658 :	"tokAt"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

658 :	"varId"
		- NEIGH  = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- PARENT = { || , strAt , == , && , previous , tok2 , next , Token , Match , astOperand2 , if , }
		- CHILD  = { != , if , varId , find , varsWithBitsSet , && , > , * , < , std , + , == , const_iterator , tok2 , bitOp , strAt , end , i2 , Token , string , map , }
		- PRED   = { }
		- SUCC   = { }

659 :	"std"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"string"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"bitOp"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"tok2"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"strAt"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"+"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"tok2"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

659 :	"strAt"
		- NEIGH  = { + , tok2 , bitOp , strAt , string , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }

660 :	"std"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"map"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"<"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"Token"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"*"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	">"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"const_iterator"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"i2"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"varsWithBitsSet"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"find"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"tok2"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

660 :	"varId"
		- NEIGH  = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { + , tok2 , bitOp , strAt , string , std , }
		- SUCC   = { end , varsWithBitsSet , == , i2 , if , }

663 :	"if"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

663 :	"i2"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

663 :	"=="
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

663 :	"varsWithBitsSet"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

663 :	"end"
		- NEIGH  = { end , varsWithBitsSet , == , i2 , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { == , if , bitOp , bitOperations , varId , tok2 , varsWithBitsSet , }
		- PRED   = { varId , const_iterator , tok2 , varsWithBitsSet , map , Token , i2 , > , * , find , < , std , }
		- SUCC   = { }

664 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

664 :	"tok2"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

664 :	"varId"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

664 :	"tok2"
		- NEIGH  = { varId , tok2 , varsWithBitsSet , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bitOp , varId , tok2 , bitOperations , }

665 :	"bitOperations"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

665 :	"tok2"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

665 :	"varId"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

665 :	"bitOp"
		- NEIGH  = { bitOp , varId , tok2 , bitOperations , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , varsWithBitsSet , }
		- SUCC   = { }

669 :	"if"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

669 :	"bitOperations"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

669 :	"tok2"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

669 :	"varId"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

669 :	"=="
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

669 :	"bitOp"
		- NEIGH  = { == , tok2 , bitOp , bitOperations , varId , if , }
		- PARENT = { end , varsWithBitsSet , == , i2 , if , }
		- CHILD  = { tok2 , varsWithBitsSet , bitOperations , str , varId , erase , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PRED   = { }
		- SUCC   = { }

670 :	"redundantBitwiseOperationInSwitchError"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"i2"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"second"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"i2"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"second"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"str"
		- NEIGH  = { str , second , i2 , redundantBitwiseOperationInSwitchError , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

674 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

674 :	"erase"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

674 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

674 :	"varId"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

675 :	"bitOperations"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

675 :	"erase"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

675 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

675 :	"varId"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { == , tok2 , bitOp , bitOperations , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

682 :	"if"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"tok2"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"varId"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"!="
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"&&"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"tok2"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"strAt"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"!="
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"&&"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"tok2"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"strAt"
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

682 :	"!="
		- NEIGH  = { strAt , && , != , tok2 , varId , if , }
		- PARENT = { == , && , tokAt , previous , tok2 , Token , varId , Match , if , }
		- CHILD  = { bitOperations , varId , tok2 , erase , varsWithBitsSet , }
		- PRED   = { }
		- SUCC   = { }

683 :	"varsWithBitsSet"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

683 :	"erase"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

683 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

683 :	"varId"
		- NEIGH  = { varId , tok2 , erase , varsWithBitsSet , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , bitOperations , }

684 :	"bitOperations"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

684 :	"erase"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

684 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

684 :	"varId"
		- NEIGH  = { varId , tok2 , erase , bitOperations , }
		- PARENT = { strAt , && , != , tok2 , varId , if , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , varsWithBitsSet , }
		- SUCC   = { }

689 :	"if"
		- NEIGH  = { tok2 , isFunctionOrBreakPattern , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { bitOperations , clear , varsWithBitsSet , }
		- PRED   = { tok2 , Token , previous , Match , if , }
		- SUCC   = { }

689 :	"isFunctionOrBreakPattern"
		- NEIGH  = { tok2 , isFunctionOrBreakPattern , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { bitOperations , clear , varsWithBitsSet , }
		- PRED   = { tok2 , Token , previous , Match , if , }
		- SUCC   = { }

689 :	"tok2"
		- NEIGH  = { tok2 , isFunctionOrBreakPattern , if , }
		- PARENT = { bodyEnd , != , next , for , Token , switchScope , tok2 , bodyStart , * , }
		- CHILD  = { bitOperations , clear , varsWithBitsSet , }
		- PRED   = { tok2 , Token , previous , Match , if , }
		- SUCC   = { }

690 :	"varsWithBitsSet"
		- NEIGH  = { clear , varsWithBitsSet , }
		- PARENT = { tok2 , isFunctionOrBreakPattern , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { clear , bitOperations , }

690 :	"clear"
		- NEIGH  = { clear , varsWithBitsSet , }
		- PARENT = { tok2 , isFunctionOrBreakPattern , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { clear , bitOperations , }

691 :	"bitOperations"
		- NEIGH  = { clear , bitOperations , }
		- PARENT = { tok2 , isFunctionOrBreakPattern , if , }
		- CHILD  = { }
		- PRED   = { clear , varsWithBitsSet , }
		- SUCC   = { }

691 :	"clear"
		- NEIGH  = { clear , bitOperations , }
		- PARENT = { tok2 , isFunctionOrBreakPattern , if , }
		- CHILD  = { }
		- PRED   = { clear , varsWithBitsSet , }
		- SUCC   = { }

697 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"redundantBitwiseOperationInSwitchError"
		- NEIGH  = { redundantBitwiseOperationInSwitchError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

697 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

699 :	"reportError"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

699 :	"tok"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

699 :	"Severity"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

699 :	"warning"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

701 :	"+"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

701 :	"varname"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

701 :	"+"
		- NEIGH  = { varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

709 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

709 :	"checkSuspiciousCaseInSwitch"
		- NEIGH  = { checkSuspiciousCaseInSwitch , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

711 :	"if"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"!"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"mSettings"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"inconclusive"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"||"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"!"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"mSettings"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"isEnabled"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"Settings"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

711 :	"WARNING"
		- NEIGH  = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

712 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

714 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

714 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

714 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

714 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

714 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , isEnabled , inconclusive , mSettings , WARNING , || , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

716 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , Token , != , for , eSwitch , tok , Scope , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

716 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , Token , != , for , eSwitch , tok , Scope , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

716 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , Token , != , for , eSwitch , tok , Scope , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

716 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , Token , != , for , eSwitch , tok , Scope , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

716 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , Token , != , for , eSwitch , tok , Scope , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

716 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , next , bodyStart , scope , * , Token , != , for , eSwitch , tok , Scope , type , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

717 :	"if"
		- NEIGH  = { eSwitch , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

717 :	"scope"
		- NEIGH  = { eSwitch , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

717 :	"type"
		- NEIGH  = { eSwitch , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

717 :	"!="
		- NEIGH  = { eSwitch , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

717 :	"Scope"
		- NEIGH  = { eSwitch , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

717 :	"eSwitch"
		- NEIGH  = { eSwitch , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

718 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eSwitch , Scope , != , type , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

720 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

720 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { eSwitch , Scope , != , type , scope , if , }
		- SUCC   = { }

721 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , next , Token , for , if , finding , tok2 , * , }
		- PRED   = { }
		- SUCC   = { }

721 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , next , Token , for , if , finding , tok2 , * , }
		- PRED   = { }
		- SUCC   = { }

721 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , next , Token , for , if , finding , tok2 , * , }
		- PRED   = { }
		- SUCC   = { }

721 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok , next , Token , for , if , finding , tok2 , * , }
		- PRED   = { }
		- SUCC   = { }

722 :	"Token"
		- NEIGH  = { finding , * , Token , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , next , Token , for , }

722 :	"*"
		- NEIGH  = { finding , * , Token , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , next , Token , for , }

722 :	"finding"
		- NEIGH  = { finding , * , Token , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , next , Token , for , }

723 :	"for"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"Token"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"*"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"tok"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"next"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

723 :	"next"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { Match , == , str , Token , tok2 , if , }
		- PRED   = { finding , * , Token , }
		- SUCC   = { finding , if , }

724 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

724 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

724 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

724 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { tok2 , Token , Match , if , }

725 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

726 :	"if"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { == , str , tok2 , if , }

726 :	"Token"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { == , str , tok2 , if , }

726 :	"Match"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { == , str , tok2 , if , }

726 :	"tok2"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , tok2 , if , }
		- SUCC   = { == , str , tok2 , if , }

727 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

729 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { tok2 , Token , Match , if , finding , }
		- PRED   = { tok2 , Token , Match , if , }
		- SUCC   = { }

729 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { tok2 , Token , Match , if , finding , }
		- PRED   = { tok2 , Token , Match , if , }
		- SUCC   = { }

729 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { tok2 , Token , Match , if , finding , }
		- PRED   = { tok2 , Token , Match , if , }
		- SUCC   = { }

729 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { tok2 , Token , Match , if , finding , }
		- PRED   = { tok2 , Token , Match , if , }
		- SUCC   = { }

730 :	"finding"
		- NEIGH  = { finding , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

731 :	"if"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { tok2 , finding , }
		- PRED   = { }
		- SUCC   = { }

731 :	"Token"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { tok2 , finding , }
		- PRED   = { }
		- SUCC   = { }

731 :	"Match"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { tok2 , finding , }
		- PRED   = { }
		- SUCC   = { }

731 :	"tok2"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { tok2 , finding , }
		- PRED   = { }
		- SUCC   = { }

732 :	"finding"
		- NEIGH  = { tok2 , finding , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

732 :	"tok2"
		- NEIGH  = { tok2 , finding , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

734 :	"if"
		- NEIGH  = { finding , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { finding , str , suspiciousCaseInSwitchError , }
		- PRED   = { tok , tok2 , * , next , Token , for , }
		- SUCC   = { }

734 :	"finding"
		- NEIGH  = { finding , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { finding , str , suspiciousCaseInSwitchError , }
		- PRED   = { tok , tok2 , * , next , Token , for , }
		- SUCC   = { }

735 :	"suspiciousCaseInSwitchError"
		- NEIGH  = { finding , str , suspiciousCaseInSwitchError , }
		- PARENT = { finding , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

735 :	"finding"
		- NEIGH  = { finding , str , suspiciousCaseInSwitchError , }
		- PARENT = { finding , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

735 :	"finding"
		- NEIGH  = { finding , str , suspiciousCaseInSwitchError , }
		- PARENT = { finding , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

735 :	"str"
		- NEIGH  = { finding , str , suspiciousCaseInSwitchError , }
		- PARENT = { finding , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"suspiciousCaseInSwitchError"
		- NEIGH  = { suspiciousCaseInSwitchError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

741 :	"operatorString"
		- NEIGH  = { operatorString , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

743 :	"reportError"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

743 :	"tok"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

743 :	"Severity"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

743 :	"warning"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

744 :	"+"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

744 :	"operatorString"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

744 :	"+"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

745 :	"+"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

745 :	"operatorString"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

745 :	"+"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

745 :	"CWE398"
		- NEIGH  = { CWE398 , operatorString , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

754 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

754 :	"checkUnreachableCode"
		- NEIGH  = { checkUnreachableCode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

756 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

756 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

756 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

756 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

756 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

756 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

757 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

758 :	"printInconclusive"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

758 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

758 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

759 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

759 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

759 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

759 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

759 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

760 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

760 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

760 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

760 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

760 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

760 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

761 :	"for"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"Token"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"*"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"bodyStart"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"&&"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"!="
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"bodyEnd"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

761 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { printInconclusive , previous , || , - , linenr , inconclusive , Match , > , && , ! , Token , link , if , tok , * , labelName , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

762 :	"Token"
		- NEIGH  = { secondBreak , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { labelName , * , Token , }

762 :	"*"
		- NEIGH  = { secondBreak , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { labelName , * , Token , }

762 :	"secondBreak"
		- NEIGH  = { secondBreak , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { labelName , * , Token , }

763 :	"Token"
		- NEIGH  = { labelName , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondBreak , * , Token , }
		- SUCC   = { Match , Token , && , link , tok , if , }

763 :	"*"
		- NEIGH  = { labelName , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondBreak , * , Token , }
		- SUCC   = { Match , Token , && , link , tok , if , }

763 :	"labelName"
		- NEIGH  = { labelName , * , Token , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { secondBreak , * , Token , }
		- SUCC   = { Match , Token , && , link , tok , if , }

764 :	"if"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

764 :	"tok"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

764 :	"link"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

764 :	"&&"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

764 :	"Token"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

764 :	"Match"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

764 :	"tok"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Token , Match , if , link , tok , }
		- PRED   = { labelName , * , Token , }
		- SUCC   = { > , - , previous , inconclusive , linenr , && , secondBreak , }

765 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

765 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

765 :	"link"
		- NEIGH  = { link , tok , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

766 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { Match , if , secondBreak , Token , tokAt , tok , }
		- PRED   = { }
		- SUCC   = { }

766 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { Match , if , secondBreak , Token , tokAt , tok , }
		- PRED   = { }
		- SUCC   = { }

766 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { Match , if , secondBreak , Token , tokAt , tok , }
		- PRED   = { }
		- SUCC   = { }

766 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { Match , if , secondBreak , Token , tokAt , tok , }
		- PRED   = { }
		- SUCC   = { }

767 :	"secondBreak"
		- NEIGH  = { tokAt , tok , secondBreak , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

767 :	"tok"
		- NEIGH  = { tokAt , tok , secondBreak , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

767 :	"tokAt"
		- NEIGH  = { tokAt , tok , secondBreak , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

768 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , * , astParent , tok , tok2 , simpleMatch , for , next , Token , if , }
		- PRED   = { }
		- SUCC   = { }

768 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , * , astParent , tok , tok2 , simpleMatch , for , next , Token , if , }
		- PRED   = { }
		- SUCC   = { }

768 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , * , astParent , tok , tok2 , simpleMatch , for , next , Token , if , }
		- PRED   = { }
		- SUCC   = { }

768 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , * , astParent , tok , tok2 , simpleMatch , for , next , Token , if , }
		- PRED   = { }
		- SUCC   = { }

769 :	"if"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { next , tok , }

769 :	"Token"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { next , tok , }

769 :	"simpleMatch"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { next , tok , }

769 :	"tok"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { next , tok , }

769 :	"astParent"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { next , tok , }

770 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

771 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astParent , tok , simpleMatch , Token , if , }
		- SUCC   = { tok , tok2 , * , next , Token , for , }

771 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astParent , tok , simpleMatch , Token , if , }
		- SUCC   = { tok , tok2 , * , next , Token , for , }

771 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { astParent , tok , simpleMatch , Token , if , }
		- SUCC   = { tok , tok2 , * , next , Token , for , }

772 :	"for"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"Token"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"*"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"tok"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"next"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"tok2"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

772 :	"next"
		- NEIGH  = { tok , tok2 , * , next , Token , for , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { || , == , str , tok2 , if , }
		- PRED   = { next , tok , }
		- SUCC   = { }

773 :	"if"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"tok2"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"str"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"=="
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"||"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"tok2"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"str"
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

773 :	"=="
		- NEIGH  = { || , == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { link , tok2 , }
		- PRED   = { }
		- SUCC   = { == , str , tok2 , if , }

774 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { || , == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

774 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { || , == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

774 :	"link"
		- NEIGH  = { link , tok2 , }
		- PARENT = { || , == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

775 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , next , tok2 , secondBreak , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

775 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , next , tok2 , secondBreak , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

775 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , next , tok2 , secondBreak , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

775 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tok2 , * , next , Token , for , }
		- CHILD  = { break , next , tok2 , secondBreak , }
		- PRED   = { || , == , str , tok2 , if , }
		- SUCC   = { }

776 :	"secondBreak"
		- NEIGH  = { next , tok2 , secondBreak , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

776 :	"tok2"
		- NEIGH  = { next , tok2 , secondBreak , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

776 :	"next"
		- NEIGH  = { next , tok2 , secondBreak , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

777 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { next , tok2 , secondBreak , }
		- SUCC   = { }

780 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { library , && , Match , if , ! , Token , secondBreak , isnoreturn , next , tok , labelName , astParent , mSettings , tokAt , }
		- PRED   = { }
		- SUCC   = { }

780 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { library , && , Match , if , ! , Token , secondBreak , isnoreturn , next , tok , labelName , astParent , mSettings , tokAt , }
		- PRED   = { }
		- SUCC   = { }

780 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { library , && , Match , if , ! , Token , secondBreak , isnoreturn , next , tok , labelName , astParent , mSettings , tokAt , }
		- PRED   = { }
		- SUCC   = { }

780 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { library , && , Match , if , ! , Token , secondBreak , isnoreturn , next , tok , labelName , astParent , mSettings , tokAt , }
		- PRED   = { }
		- SUCC   = { }

781 :	"secondBreak"
		- NEIGH  = { tokAt , tok , secondBreak , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , next , labelName , }

781 :	"tok"
		- NEIGH  = { tokAt , tok , secondBreak , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , next , labelName , }

781 :	"tokAt"
		- NEIGH  = { tokAt , tok , secondBreak , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , next , labelName , }

782 :	"labelName"
		- NEIGH  = { tok , next , labelName , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , secondBreak , }
		- SUCC   = { }

782 :	"tok"
		- NEIGH  = { tok , next , labelName , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , secondBreak , }
		- SUCC   = { }

782 :	"next"
		- NEIGH  = { tok , next , labelName , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , tok , secondBreak , }
		- SUCC   = { }

783 :	"if"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"Token"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"Match"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"tok"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"&&"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"mSettings"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"library"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"isnoreturn"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"tok"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"&&"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"!"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"Token"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"Match"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"tok"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"next"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

783 :	"astParent"
		- NEIGH  = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PRED   = { }
		- SUCC   = { }

784 :	"if"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"!"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tok"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"function"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"||"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tok"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"function"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"token"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"!="
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tok"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"&&"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tok"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"function"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tokenDef"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"!="
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tok"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"&&"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"tok"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"linkAt"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"strAt"
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

784 :	"!="
		- NEIGH  = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- PARENT = { astParent , isnoreturn , library , mSettings , && , tok , next , Token , Match , ! , if , }
		- CHILD  = { tokAt , tok , linkAt , secondBreak , }
		- PRED   = { }
		- SUCC   = { }

785 :	"secondBreak"
		- NEIGH  = { tokAt , tok , linkAt , secondBreak , }
		- PARENT = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

785 :	"tok"
		- NEIGH  = { tokAt , tok , linkAt , secondBreak , }
		- PARENT = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

785 :	"linkAt"
		- NEIGH  = { tokAt , tok , linkAt , secondBreak , }
		- PARENT = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

785 :	"tokAt"
		- NEIGH  = { tokAt , tok , linkAt , secondBreak , }
		- PARENT = { strAt , && , linkAt , != , function , tok , token , || , tokenDef , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

790 :	"inconclusive"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"secondBreak"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"&&"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"secondBreak"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"linenr"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"-"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	">"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"secondBreak"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"previous"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

790 :	"linenr"
		- NEIGH  = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }

792 :	"if"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

792 :	"secondBreak"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

792 :	"&&"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

792 :	"printInconclusive"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

792 :	"||"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

792 :	"!"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

792 :	"inconclusive"
		- NEIGH  = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , strAt , tok , && , == , if , str , || , secondBreak , ! , Token , Match , }
		- PRED   = { > , - , previous , inconclusive , linenr , && , secondBreak , }
		- SUCC   = { }

793 :	"if"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

793 :	"Token"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

793 :	"Match"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

793 :	"secondBreak"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

793 :	"||"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"secondBreak"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"str"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"=="
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"&&"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"tok"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"str"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"=="
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"||"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"secondBreak"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"strAt"
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

794 :	"=="
		- NEIGH  = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { == , if , findmatch , secondBreak , Token , tok , inconclusive , str , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { tok , ! , if , }

795 :	"duplicateBreakError"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

795 :	"secondBreak"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

795 :	"inconclusive"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

796 :	"tok"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { inconclusive , secondBreak , duplicateBreakError , }
		- SUCC   = { }

796 :	"Token"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { inconclusive , secondBreak , duplicateBreakError , }
		- SUCC   = { }

796 :	"findmatch"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { inconclusive , secondBreak , duplicateBreakError , }
		- SUCC   = { }

796 :	"secondBreak"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { inconclusive , secondBreak , duplicateBreakError , }
		- SUCC   = { }

797 :	"if"
		- NEIGH  = { == , str , secondBreak , if , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { != , Match , tok , strAt , findmatch , secondBreak , ! , Token , if , str , && , == , }
		- PRED   = { }
		- SUCC   = { }

797 :	"secondBreak"
		- NEIGH  = { == , str , secondBreak , if , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { != , Match , tok , strAt , findmatch , secondBreak , ! , Token , if , str , && , == , }
		- PRED   = { }
		- SUCC   = { }

797 :	"str"
		- NEIGH  = { == , str , secondBreak , if , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { != , Match , tok , strAt , findmatch , secondBreak , ! , Token , if , str , && , == , }
		- PRED   = { }
		- SUCC   = { }

797 :	"=="
		- NEIGH  = { == , str , secondBreak , if , }
		- PARENT = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- CHILD  = { != , Match , tok , strAt , findmatch , secondBreak , ! , Token , if , str , && , == , }
		- PRED   = { }
		- SUCC   = { }

798 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { eSwitch , type , if , Scope , != , tok , inconclusive , secondBreak , scope , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

798 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { eSwitch , type , if , Scope , != , tok , inconclusive , secondBreak , scope , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

798 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { eSwitch , type , if , Scope , != , tok , inconclusive , secondBreak , scope , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

798 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { eSwitch , type , if , Scope , != , tok , inconclusive , secondBreak , scope , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

799 :	"duplicateBreakError"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

799 :	"secondBreak"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

799 :	"inconclusive"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

801 :	"if"
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

801 :	"tok"
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

801 :	"scope"
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

801 :	"type"
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

801 :	"!="
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

801 :	"Scope"
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

801 :	"eSwitch"
		- NEIGH  = { eSwitch , scope , Scope , tok , != , type , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { inconclusive , secondBreak , duplicateBreakError , }
		- PRED   = { }
		- SUCC   = { }

802 :	"duplicateBreakError"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { eSwitch , scope , Scope , tok , != , type , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

802 :	"secondBreak"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { eSwitch , scope , Scope , tok , != , type , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

802 :	"inconclusive"
		- NEIGH  = { inconclusive , secondBreak , duplicateBreakError , }
		- PARENT = { eSwitch , scope , Scope , tok , != , type , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

804 :	"tok"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { }

804 :	"Token"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { }

804 :	"findmatch"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { }

804 :	"secondBreak"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { }

805 :	"if"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"!"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"Token"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"Match"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"secondBreak"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"&&"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"secondBreak"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"strAt"
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

805 :	"!="
		- NEIGH  = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- PARENT = { == , str , secondBreak , if , }
		- CHILD  = { tok , findmatch , silencedCompilerWarningOnly , silencedWarning , Match , && , labelInFollowingLoop , * , labelName , if , for , secondBreak , ! , Token , }
		- PRED   = { }
		- SUCC   = { }

808 :	"labelInFollowingLoop"
		- NEIGH  = { labelInFollowingLoop , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { secondBreak , Token , && , Match , labelName , if , }

809 :	"if"
		- NEIGH  = { secondBreak , Token , && , Match , labelName , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { if , findsimplematch , Token , secondBreak , scope2 , * , }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { silencedCompilerWarningOnly , }

809 :	"labelName"
		- NEIGH  = { secondBreak , Token , && , Match , labelName , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { if , findsimplematch , Token , secondBreak , scope2 , * , }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { silencedCompilerWarningOnly , }

809 :	"&&"
		- NEIGH  = { secondBreak , Token , && , Match , labelName , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { if , findsimplematch , Token , secondBreak , scope2 , * , }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { silencedCompilerWarningOnly , }

809 :	"Token"
		- NEIGH  = { secondBreak , Token , && , Match , labelName , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { if , findsimplematch , Token , secondBreak , scope2 , * , }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { silencedCompilerWarningOnly , }

809 :	"Match"
		- NEIGH  = { secondBreak , Token , && , Match , labelName , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { if , findsimplematch , Token , secondBreak , scope2 , * , }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { silencedCompilerWarningOnly , }

809 :	"secondBreak"
		- NEIGH  = { secondBreak , Token , && , Match , labelName , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { if , findsimplematch , Token , secondBreak , scope2 , * , }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { silencedCompilerWarningOnly , }

810 :	"Token"
		- NEIGH  = { findsimplematch , secondBreak , scope2 , * , Token , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope2 , if , }

810 :	"*"
		- NEIGH  = { findsimplematch , secondBreak , scope2 , * , Token , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope2 , if , }

810 :	"scope2"
		- NEIGH  = { findsimplematch , secondBreak , scope2 , * , Token , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope2 , if , }

810 :	"Token"
		- NEIGH  = { findsimplematch , secondBreak , scope2 , * , Token , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope2 , if , }

810 :	"findsimplematch"
		- NEIGH  = { findsimplematch , secondBreak , scope2 , * , Token , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope2 , if , }

810 :	"secondBreak"
		- NEIGH  = { findsimplematch , secondBreak , scope2 , * , Token , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope2 , if , }

811 :	"if"
		- NEIGH  = { scope2 , if , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PRED   = { findsimplematch , secondBreak , scope2 , * , Token , }
		- SUCC   = { }

811 :	"scope2"
		- NEIGH  = { scope2 , if , }
		- PARENT = { secondBreak , Token , && , Match , labelName , if , }
		- CHILD  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PRED   = { findsimplematch , secondBreak , scope2 , * , Token , }
		- SUCC   = { }

812 :	"for"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"Token"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"*"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"tokIter"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"scope2"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"tokIter"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"!="
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"scope2"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"link"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"&&"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"tokIter"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"tokIter"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"tokIter"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

812 :	"next"
		- NEIGH  = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- PARENT = { scope2 , if , }
		- CHILD  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

813 :	"if"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"Token"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"Match"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"tokIter"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"&&"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"labelName"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"str"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"=="
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"tokIter"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

813 :	"strAt"
		- NEIGH  = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- PARENT = { && , link , != , scope2 , tokIter , * , next , Token , for , }
		- CHILD  = { break , labelInFollowingLoop , }
		- PRED   = { }
		- SUCC   = { }

814 :	"labelInFollowingLoop"
		- NEIGH  = { labelInFollowingLoop , }
		- PARENT = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

815 :	"break"
		- NEIGH  = { break , }
		- PARENT = { strAt , labelName , == , && , str , tokIter , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { labelInFollowingLoop , }
		- SUCC   = { }

822 :	"silencedCompilerWarningOnly"
		- NEIGH  = { silencedCompilerWarningOnly , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { secondBreak , Token , && , Match , labelName , if , }
		- SUCC   = { secondBreak , silencedWarning , * , Token , }

823 :	"Token"
		- NEIGH  = { secondBreak , silencedWarning , * , Token , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { silencedCompilerWarningOnly , }
		- SUCC   = { for , }

823 :	"*"
		- NEIGH  = { secondBreak , silencedWarning , * , Token , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { silencedCompilerWarningOnly , }
		- SUCC   = { for , }

823 :	"silencedWarning"
		- NEIGH  = { secondBreak , silencedWarning , * , Token , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { silencedCompilerWarningOnly , }
		- SUCC   = { for , }

823 :	"secondBreak"
		- NEIGH  = { secondBreak , silencedWarning , * , Token , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { silencedCompilerWarningOnly , }
		- SUCC   = { for , }

824 :	"for"
		- NEIGH  = { for , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { break , silencedWarning , Token , Match , if , }
		- PRED   = { secondBreak , silencedWarning , * , Token , }
		- SUCC   = { silencedWarning , if , }

825 :	"if"
		- NEIGH  = { silencedWarning , Token , Match , if , }
		- PARENT = { for , }
		- CHILD  = { bodyEnd , scope , == , && , if , continue , tokAt , silencedWarning , }
		- PRED   = { }
		- SUCC   = { break , }

825 :	"Token"
		- NEIGH  = { silencedWarning , Token , Match , if , }
		- PARENT = { for , }
		- CHILD  = { bodyEnd , scope , == , && , if , continue , tokAt , silencedWarning , }
		- PRED   = { }
		- SUCC   = { break , }

825 :	"Match"
		- NEIGH  = { silencedWarning , Token , Match , if , }
		- PARENT = { for , }
		- CHILD  = { bodyEnd , scope , == , && , if , continue , tokAt , silencedWarning , }
		- PRED   = { }
		- SUCC   = { break , }

825 :	"silencedWarning"
		- NEIGH  = { silencedWarning , Token , Match , if , }
		- PARENT = { for , }
		- CHILD  = { bodyEnd , scope , == , && , if , continue , tokAt , silencedWarning , }
		- PRED   = { }
		- SUCC   = { break , }

826 :	"silencedWarning"
		- NEIGH  = { tokAt , silencedWarning , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

826 :	"silencedWarning"
		- NEIGH  = { tokAt , silencedWarning , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

826 :	"tokAt"
		- NEIGH  = { tokAt , silencedWarning , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

827 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tokAt , silencedWarning , }
		- SUCC   = { }

828 :	"if"
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

828 :	"silencedWarning"
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

828 :	"&&"
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

828 :	"silencedWarning"
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

828 :	"=="
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

828 :	"scope"
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

828 :	"bodyEnd"
		- NEIGH  = { bodyEnd , && , == , scope , silencedWarning , if , }
		- PARENT = { silencedWarning , Token , Match , if , }
		- CHILD  = { silencedCompilerWarningOnly , }
		- PRED   = { }
		- SUCC   = { }

829 :	"silencedCompilerWarningOnly"
		- NEIGH  = { silencedCompilerWarningOnly , }
		- PARENT = { bodyEnd , && , == , scope , silencedWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

831 :	"break"
		- NEIGH  = { break , }
		- PARENT = { for , }
		- CHILD  = { }
		- PRED   = { silencedWarning , Token , Match , if , }
		- SUCC   = { }

833 :	"if"
		- NEIGH  = { silencedWarning , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { silencedWarning , secondBreak , }
		- PRED   = { for , }
		- SUCC   = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }

833 :	"silencedWarning"
		- NEIGH  = { silencedWarning , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { silencedWarning , secondBreak , }
		- PRED   = { for , }
		- SUCC   = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }

834 :	"secondBreak"
		- NEIGH  = { silencedWarning , secondBreak , }
		- PARENT = { silencedWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

834 :	"silencedWarning"
		- NEIGH  = { silencedWarning , secondBreak , }
		- PARENT = { silencedWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

836 :	"if"
		- NEIGH  = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { inconclusive , secondBreak , unreachableCodeError , }
		- PRED   = { silencedWarning , if , }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

836 :	"!"
		- NEIGH  = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { inconclusive , secondBreak , unreachableCodeError , }
		- PRED   = { silencedWarning , if , }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

836 :	"labelInFollowingLoop"
		- NEIGH  = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { inconclusive , secondBreak , unreachableCodeError , }
		- PRED   = { silencedWarning , if , }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

836 :	"&&"
		- NEIGH  = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { inconclusive , secondBreak , unreachableCodeError , }
		- PRED   = { silencedWarning , if , }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

836 :	"!"
		- NEIGH  = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { inconclusive , secondBreak , unreachableCodeError , }
		- PRED   = { silencedWarning , if , }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

836 :	"silencedCompilerWarningOnly"
		- NEIGH  = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { inconclusive , secondBreak , unreachableCodeError , }
		- PRED   = { silencedWarning , if , }
		- SUCC   = { secondBreak , findmatch , Token , tok , }

837 :	"unreachableCodeError"
		- NEIGH  = { inconclusive , secondBreak , unreachableCodeError , }
		- PARENT = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

837 :	"secondBreak"
		- NEIGH  = { inconclusive , secondBreak , unreachableCodeError , }
		- PARENT = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

837 :	"inconclusive"
		- NEIGH  = { inconclusive , secondBreak , unreachableCodeError , }
		- PARENT = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

838 :	"tok"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- SUCC   = { }

838 :	"Token"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- SUCC   = { }

838 :	"findmatch"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- SUCC   = { }

838 :	"secondBreak"
		- NEIGH  = { secondBreak , findmatch , Token , tok , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { && , labelInFollowingLoop , silencedCompilerWarningOnly , ! , if , }
		- SUCC   = { }

840 :	"tok"
		- NEIGH  = { secondBreak , tok , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

840 :	"secondBreak"
		- NEIGH  = { secondBreak , tok , }
		- PARENT = { != , strAt , && , secondBreak , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

842 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { break , }
		- PRED   = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- SUCC   = { previous , tok , }

842 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { break , }
		- PRED   = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- SUCC   = { previous , tok , }

842 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { break , }
		- PRED   = { strAt , tok , && , == , str , || , secondBreak , Token , Match , if , }
		- SUCC   = { previous , tok , }

843 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

844 :	"tok"
		- NEIGH  = { previous , tok , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { }

844 :	"tok"
		- NEIGH  = { previous , tok , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { }

844 :	"previous"
		- NEIGH  = { previous , tok , }
		- PARENT = { || , inconclusive , printInconclusive , && , secondBreak , ! , if , }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { }

850 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

850 :	"duplicateBreakError"
		- NEIGH  = { duplicateBreakError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

850 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

850 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

850 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

850 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

852 :	"reportError"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

852 :	"tok"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

852 :	"Severity"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

852 :	"style"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

855 :	"CWE561"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

855 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"unreachableCodeError"
		- NEIGH  = { unreachableCodeError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

860 :	"reportError"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

860 :	"tok"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

860 :	"Severity"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

860 :	"style"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

861 :	"CWE561"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

861 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE561 , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

867 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

867 :	"checkVariableScope"
		- NEIGH  = { checkVariableScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

869 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

869 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

869 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

869 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

869 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

869 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

870 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

872 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

872 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

872 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

872 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

874 :	"for"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , used , reduce , simpleMatch , declarationId , previous , tok , isConst , for , forHead , ! , nameToken , Match , typeStartToken , next , var , if , isStandardType , && , != , astOperand2 , isPointer , scope , Token , isLocal , || , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

874 :	"Variable"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , used , reduce , simpleMatch , declarationId , previous , tok , isConst , for , forHead , ! , nameToken , Match , typeStartToken , next , var , if , isStandardType , && , != , astOperand2 , isPointer , scope , Token , isLocal , || , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

874 :	"*"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , used , reduce , simpleMatch , declarationId , previous , tok , isConst , for , forHead , ! , nameToken , Match , typeStartToken , next , var , if , isStandardType , && , != , astOperand2 , isPointer , scope , Token , isLocal , || , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

874 :	"var"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , used , reduce , simpleMatch , declarationId , previous , tok , isConst , for , forHead , ! , nameToken , Match , typeStartToken , next , var , if , isStandardType , && , != , astOperand2 , isPointer , scope , Token , isLocal , || , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

874 :	"symbolDatabase"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , used , reduce , simpleMatch , declarationId , previous , tok , isConst , for , forHead , ! , nameToken , Match , typeStartToken , next , var , if , isStandardType , && , != , astOperand2 , isPointer , scope , Token , isLocal , || , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

874 :	"variableList"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , used , reduce , simpleMatch , declarationId , previous , tok , isConst , for , forHead , ! , nameToken , Match , typeStartToken , next , var , if , isStandardType , && , != , astOperand2 , isPointer , scope , Token , isLocal , || , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

875 :	"if"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"!"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"var"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"||"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"!"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"var"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"isLocal"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"||"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"!"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"var"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"isPointer"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"&&"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"!"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"var"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"isReference"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"&&"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"!"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"var"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"typeStartToken"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

875 :	"isStandardType"
		- NEIGH  = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isConst , var , if , }

876 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

878 :	"if"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- SUCC   = { if , nameToken , Token , previous , var , Match , }

878 :	"var"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- SUCC   = { if , nameToken , Token , previous , var , Match , }

878 :	"isConst"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isStandardType , && , isPointer , if , ! , isLocal , || , typeStartToken , isReference , var , }
		- SUCC   = { if , nameToken , Token , previous , var , Match , }

879 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

882 :	"if"
		- NEIGH  = { if , nameToken , Token , previous , var , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { simpleMatch , next , Match , && , Variable , astParent , variable , otherVar , tokAt , var , if , previous , otherVarToken , nameToken , * , Token , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { forHead , }

882 :	"Token"
		- NEIGH  = { if , nameToken , Token , previous , var , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { simpleMatch , next , Match , && , Variable , astParent , variable , otherVar , tokAt , var , if , previous , otherVarToken , nameToken , * , Token , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { forHead , }

882 :	"Match"
		- NEIGH  = { if , nameToken , Token , previous , var , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { simpleMatch , next , Match , && , Variable , astParent , variable , otherVar , tokAt , var , if , previous , otherVarToken , nameToken , * , Token , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { forHead , }

882 :	"var"
		- NEIGH  = { if , nameToken , Token , previous , var , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { simpleMatch , next , Match , && , Variable , astParent , variable , otherVar , tokAt , var , if , previous , otherVarToken , nameToken , * , Token , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { forHead , }

882 :	"nameToken"
		- NEIGH  = { if , nameToken , Token , previous , var , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { simpleMatch , next , Match , && , Variable , astParent , variable , otherVar , tokAt , var , if , previous , otherVarToken , nameToken , * , Token , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { forHead , }

882 :	"previous"
		- NEIGH  = { if , nameToken , Token , previous , var , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { simpleMatch , next , Match , && , Variable , astParent , variable , otherVar , tokAt , var , if , previous , otherVarToken , nameToken , * , Token , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { forHead , }

883 :	"Token"
		- NEIGH  = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , otherVarToken , otherVar , * , Variable , }

883 :	"*"
		- NEIGH  = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , otherVarToken , otherVar , * , Variable , }

883 :	"otherVarToken"
		- NEIGH  = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , otherVarToken , otherVar , * , Variable , }

883 :	"var"
		- NEIGH  = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , otherVarToken , otherVar , * , Variable , }

883 :	"nameToken"
		- NEIGH  = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , otherVarToken , otherVar , * , Variable , }

883 :	"tokAt"
		- NEIGH  = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , otherVarToken , otherVar , * , Variable , }

884 :	"Variable"
		- NEIGH  = { variable , otherVarToken , otherVar , * , Variable , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- SUCC   = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }

884 :	"*"
		- NEIGH  = { variable , otherVarToken , otherVar , * , Variable , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- SUCC   = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }

884 :	"otherVar"
		- NEIGH  = { variable , otherVarToken , otherVar , * , Variable , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- SUCC   = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }

884 :	"otherVarToken"
		- NEIGH  = { variable , otherVarToken , otherVar , * , Variable , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- SUCC   = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }

884 :	"variable"
		- NEIGH  = { variable , otherVarToken , otherVar , * , Variable , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { }
		- PRED   = { tokAt , var , otherVarToken , nameToken , * , Token , }
		- SUCC   = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }

885 :	"if"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"otherVar"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"&&"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"Token"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"Match"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"otherVar"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"nameToken"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

885 :	"&&"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

886 :	"otherVar"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

886 :	"nameToken"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

886 :	"next"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

886 :	"astParent"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

886 :	"&&"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"Token"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"simpleMatch"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"otherVar"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"nameToken"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"next"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"astParent"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

887 :	"previous"
		- NEIGH  = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- PARENT = { if , nameToken , Token , previous , var , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , otherVarToken , otherVar , * , Variable , }
		- SUCC   = { }

888 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astParent , && , next , Token , previous , simpleMatch , otherVar , Match , nameToken , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

891 :	"forHead"
		- NEIGH  = { forHead , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { if , nameToken , Token , previous , var , Match , }
		- SUCC   = { tok , * , for , Token , previous , typeStartToken , var , }

892 :	"for"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"Token"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"*"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"tok"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"var"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"typeStartToken"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"tok"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"tok"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"tok"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

892 :	"previous"
		- NEIGH  = { tok , * , for , Token , previous , typeStartToken , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { forHead , }
		- SUCC   = { forHead , if , }

893 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tok , * , for , Token , previous , typeStartToken , var , }
		- CHILD  = { tok , Match , if , break , Token , forHead , }
		- PRED   = { }
		- SUCC   = { }

893 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tok , * , for , Token , previous , typeStartToken , var , }
		- CHILD  = { tok , Match , if , break , Token , forHead , }
		- PRED   = { }
		- SUCC   = { }

893 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tok , * , for , Token , previous , typeStartToken , var , }
		- CHILD  = { tok , Match , if , break , Token , forHead , }
		- PRED   = { }
		- SUCC   = { }

893 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tok , * , for , Token , previous , typeStartToken , var , }
		- CHILD  = { tok , Match , if , break , Token , forHead , }
		- PRED   = { }
		- SUCC   = { }

894 :	"forHead"
		- NEIGH  = { forHead , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

895 :	"break"
		- NEIGH  = { break , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { forHead , }
		- SUCC   = { }

896 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { }

896 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { }

896 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { }

896 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { }

897 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

899 :	"if"
		- NEIGH  = { forHead , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , for , Token , previous , typeStartToken , var , }
		- SUCC   = { var , tok , nameToken , * , next , Token , }

899 :	"forHead"
		- NEIGH  = { forHead , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , for , Token , previous , typeStartToken , var , }
		- SUCC   = { var , tok , nameToken , * , next , Token , }

900 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { forHead , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

902 :	"Token"
		- NEIGH  = { var , tok , nameToken , * , next , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { forHead , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

902 :	"*"
		- NEIGH  = { var , tok , nameToken , * , next , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { forHead , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

902 :	"tok"
		- NEIGH  = { var , tok , nameToken , * , next , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { forHead , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

902 :	"var"
		- NEIGH  = { var , tok , nameToken , * , next , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { forHead , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

902 :	"nameToken"
		- NEIGH  = { var , tok , nameToken , * , next , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { forHead , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

902 :	"next"
		- NEIGH  = { var , tok , nameToken , * , next , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { forHead , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

903 :	"if"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isBoolean , ! , Token , if , eChar , && , eString , isNumber , tokType , tokAt , != , tok , }
		- PRED   = { var , tok , nameToken , * , next , Token , }
		- SUCC   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }

903 :	"Token"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isBoolean , ! , Token , if , eChar , && , eString , isNumber , tokType , tokAt , != , tok , }
		- PRED   = { var , tok , nameToken , * , next , Token , }
		- SUCC   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }

903 :	"Match"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isBoolean , ! , Token , if , eChar , && , eString , isNumber , tokType , tokAt , != , tok , }
		- PRED   = { var , tok , nameToken , * , next , Token , }
		- SUCC   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }

903 :	"tok"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isBoolean , ! , Token , if , eChar , && , eString , isNumber , tokType , tokAt , != , tok , }
		- PRED   = { var , tok , nameToken , * , next , Token , }
		- SUCC   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }

903 :	"var"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isBoolean , ! , Token , if , eChar , && , eString , isNumber , tokType , tokAt , != , tok , }
		- PRED   = { var , tok , nameToken , * , next , Token , }
		- SUCC   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }

903 :	"declarationId"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isBoolean , ! , Token , if , eChar , && , eString , isNumber , tokType , tokAt , != , tok , }
		- PRED   = { var , tok , nameToken , * , next , Token , }
		- SUCC   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }

904 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }

904 :	"tok"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }

904 :	"tokAt"
		- NEIGH  = { tokAt , tok , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }

905 :	"if"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"!"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"tok"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"isNumber"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"&&"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"tok"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"tokType"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"!="
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"Token"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"eString"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"&&"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"tok"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"tokType"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"!="
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"Token"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"eChar"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"&&"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"!"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"tok"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

905 :	"isBoolean"
		- NEIGH  = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , tok , }
		- SUCC   = { }

906 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isBoolean , Token , eChar , && , != , tok , eString , isNumber , tokType , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

909 :	"if"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"Token"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"Match"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"tok"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"&&"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"Token"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"simpleMatch"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"tok"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

909 :	"astOperand2"
		- NEIGH  = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { reduce , }

910 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

911 :	"reduce"
		- NEIGH  = { reduce , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { simpleMatch , && , tok , Token , Match , astOperand2 , if , }
		- SUCC   = { used , }

912 :	"used"
		- NEIGH  = { used , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { reduce , }
		- SUCC   = { scope , && , bodyEnd , != , tok , var , next , for , }

913 :	"for"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"&&"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"!="
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"var"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"scope"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"bodyEnd"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"tok"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

913 :	"next"
		- NEIGH  = { scope , && , bodyEnd , != , tok , var , next , for , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PRED   = { used , }
		- SUCC   = { used , && , reduce , if , }

914 :	"if"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"tok"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"str"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"=="
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"&&"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"tok"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"scope"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"!="
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"tok"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"previous"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"scope"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"&&"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"!"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"tok"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"isExpandedMacro"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"&&"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"tok"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"scope"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"type"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"!="
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"Scope"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

914 :	"eLambda"
		- NEIGH  = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- PARENT = { scope , && , bodyEnd , != , tok , var , next , for , }
		- CHILD  = { && , link , linkAt , tok , Token , simpleMatch , used , if , }
		- PRED   = { }
		- SUCC   = { }

915 :	"if"
		- NEIGH  = { used , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { || , used , var , tok , checkInnerScope , ! , if , used2 , }
		- PRED   = { }
		- SUCC   = { link , tok , }

915 :	"used"
		- NEIGH  = { used , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { || , used , var , tok , checkInnerScope , ! , if , used2 , }
		- PRED   = { }
		- SUCC   = { link , tok , }

916 :	"used2"
		- NEIGH  = { used2 , }
		- PARENT = { used , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , used2 , tok , checkInnerScope , if , ! , var , }

917 :	"if"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"!"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"checkInnerScope"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"tok"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"var"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"used2"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"||"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

917 :	"used2"
		- NEIGH  = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { used2 , }
		- SUCC   = { }

918 :	"reduce"
		- NEIGH  = { reduce , }
		- PARENT = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

919 :	"break"
		- NEIGH  = { break , }
		- PARENT = { || , used2 , tok , checkInnerScope , if , ! , var , }
		- CHILD  = { }
		- PRED   = { reduce , }
		- SUCC   = { }

921 :	"if"
		- NEIGH  = { tok , checkInnerScope , if , ! , used , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

921 :	"!"
		- NEIGH  = { tok , checkInnerScope , if , ! , used , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

921 :	"checkInnerScope"
		- NEIGH  = { tok , checkInnerScope , if , ! , used , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

921 :	"tok"
		- NEIGH  = { tok , checkInnerScope , if , ! , used , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

921 :	"var"
		- NEIGH  = { tok , checkInnerScope , if , ! , used , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

921 :	"used"
		- NEIGH  = { tok , checkInnerScope , if , ! , used , var , }
		- PARENT = { used , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

922 :	"reduce"
		- NEIGH  = { reduce , }
		- PARENT = { tok , checkInnerScope , if , ! , used , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

923 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok , checkInnerScope , if , ! , used , var , }
		- CHILD  = { }
		- PRED   = { reduce , }
		- SUCC   = { }

926 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { }
		- PRED   = { used , if , }
		- SUCC   = { }

926 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { }
		- PRED   = { used , if , }
		- SUCC   = { }

926 :	"link"
		- NEIGH  = { link , tok , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { }
		- PRED   = { used , if , }
		- SUCC   = { }

929 :	"if"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"Token"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"simpleMatch"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"tok"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"&&"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"Token"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"simpleMatch"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"tok"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

929 :	"linkAt"
		- NEIGH  = { && , linkAt , tok , simpleMatch , Token , if , }
		- PARENT = { eLambda , Scope , type , isExpandedMacro , previous , == , && , scope , if , str , != , tok , ! , }
		- CHILD  = { == , declarationId , var , findmatch , && , simpleMatch , str , if , Token , elseif , || , linkAt , tok , endif , * , varId , next , }
		- PRED   = { }
		- SUCC   = { }

930 :	"Token"
		- NEIGH  = { linkAt , tok , endif , * , Token , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { elseif , }

930 :	"*"
		- NEIGH  = { linkAt , tok , endif , * , Token , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { elseif , }

930 :	"endif"
		- NEIGH  = { linkAt , tok , endif , * , Token , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { elseif , }

930 :	"tok"
		- NEIGH  = { linkAt , tok , endif , * , Token , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { elseif , }

930 :	"linkAt"
		- NEIGH  = { linkAt , tok , endif , * , Token , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { elseif , }

930 :	"linkAt"
		- NEIGH  = { linkAt , tok , endif , * , Token , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { elseif , }

931 :	"elseif"
		- NEIGH  = { elseif , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { linkAt , tok , endif , * , Token , }
		- SUCC   = { endif , simpleMatch , Token , if , }

932 :	"if"
		- NEIGH  = { endif , simpleMatch , Token , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { && , endif , Token , if , simpleMatch , linkAt , elseif , }
		- PRED   = { elseif , }
		- SUCC   = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }

932 :	"Token"
		- NEIGH  = { endif , simpleMatch , Token , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { && , endif , Token , if , simpleMatch , linkAt , elseif , }
		- PRED   = { elseif , }
		- SUCC   = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }

932 :	"simpleMatch"
		- NEIGH  = { endif , simpleMatch , Token , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { && , endif , Token , if , simpleMatch , linkAt , elseif , }
		- PRED   = { elseif , }
		- SUCC   = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }

932 :	"endif"
		- NEIGH  = { endif , simpleMatch , Token , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { && , endif , Token , if , simpleMatch , linkAt , elseif , }
		- PRED   = { elseif , }
		- SUCC   = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }

933 :	"elseif"
		- NEIGH  = { elseif , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

934 :	"if"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"Token"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"simpleMatch"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"endif"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"&&"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"Token"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"simpleMatch"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"endif"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

934 :	"linkAt"
		- NEIGH  = { linkAt , && , endif , simpleMatch , Token , if , }
		- PARENT = { endif , simpleMatch , Token , if , }
		- CHILD  = { elseif , }
		- PRED   = { }
		- SUCC   = { }

935 :	"elseif"
		- NEIGH  = { elseif , }
		- PARENT = { linkAt , && , endif , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

936 :	"if"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"elseif"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"&&"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"Token"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"findmatch"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"tok"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"next"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"tok"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"linkAt"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"var"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

936 :	"declarationId"
		- NEIGH  = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { endif , simpleMatch , Token , if , }
		- SUCC   = { }

937 :	"reduce"
		- NEIGH  = { reduce , }
		- PARENT = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

938 :	"break"
		- NEIGH  = { break , }
		- PARENT = { var , next , Token , declarationId , findmatch , && , linkAt , tok , elseif , if , }
		- CHILD  = { }
		- PRED   = { reduce , }
		- SUCC   = { }

940 :	"if"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"tok"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"varId"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"=="
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"var"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"declarationId"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"||"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"tok"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"str"
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

940 :	"=="
		- NEIGH  = { str , || , declarationId , == , tok , var , varId , if , }
		- PARENT = { && , linkAt , tok , simpleMatch , Token , if , }
		- CHILD  = { break , reduce , }
		- PRED   = { }
		- SUCC   = { }

941 :	"reduce"
		- NEIGH  = { reduce , }
		- PARENT = { str , || , declarationId , == , tok , var , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

942 :	"break"
		- NEIGH  = { break , }
		- PARENT = { str , || , declarationId , == , tok , var , varId , if , }
		- CHILD  = { }
		- PRED   = { reduce , }
		- SUCC   = { }

946 :	"if"
		- NEIGH  = { used , && , reduce , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { nameToken , name , var , variableScopeError , }
		- PRED   = { scope , && , bodyEnd , != , tok , var , next , for , }
		- SUCC   = { }

946 :	"reduce"
		- NEIGH  = { used , && , reduce , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { nameToken , name , var , variableScopeError , }
		- PRED   = { scope , && , bodyEnd , != , tok , var , next , for , }
		- SUCC   = { }

946 :	"&&"
		- NEIGH  = { used , && , reduce , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { nameToken , name , var , variableScopeError , }
		- PRED   = { scope , && , bodyEnd , != , tok , var , next , for , }
		- SUCC   = { }

946 :	"used"
		- NEIGH  = { used , && , reduce , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { nameToken , name , var , variableScopeError , }
		- PRED   = { scope , && , bodyEnd , != , tok , var , next , for , }
		- SUCC   = { }

947 :	"variableScopeError"
		- NEIGH  = { nameToken , name , var , variableScopeError , }
		- PARENT = { used , && , reduce , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

947 :	"var"
		- NEIGH  = { nameToken , name , var , variableScopeError , }
		- PARENT = { used , && , reduce , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

947 :	"nameToken"
		- NEIGH  = { nameToken , name , var , variableScopeError , }
		- PARENT = { used , && , reduce , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

947 :	"var"
		- NEIGH  = { nameToken , name , var , variableScopeError , }
		- PARENT = { used , && , reduce , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

947 :	"name"
		- NEIGH  = { nameToken , name , var , variableScopeError , }
		- PARENT = { used , && , reduce , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"checkInnerScope"
		- NEIGH  = { checkInnerScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"Variable"
		- NEIGH  = { Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

951 :	"used"
		- NEIGH  = { used , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

953 :	"Scope"
		- NEIGH  = { next , tok , * , scope , Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }

953 :	"*"
		- NEIGH  = { next , tok , * , scope , Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }

953 :	"scope"
		- NEIGH  = { next , tok , * , scope , Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }

953 :	"tok"
		- NEIGH  = { next , tok , * , scope , Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }

953 :	"next"
		- NEIGH  = { next , tok , * , scope , Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }

953 :	"scope"
		- NEIGH  = { next , tok , * , scope , Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }

954 :	"loopVariable"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"scope"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"type"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"=="
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"Scope"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"eFor"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"||"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"scope"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"type"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"=="
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"Scope"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"eWhile"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"||"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"scope"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"type"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"=="
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"Scope"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

954 :	"eDo"
		- NEIGH  = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next , tok , * , scope , Scope , }
		- SUCC   = { noContinue , }

955 :	"noContinue"
		- NEIGH  = { noContinue , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eDo , eWhile , || , eFor , loopVariable , == , type , Scope , scope , }
		- SUCC   = { forHeadEnd , * , Token , }

956 :	"Token"
		- NEIGH  = { forHeadEnd , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { noContinue , }
		- SUCC   = { link , tok , end , * , Token , }

956 :	"*"
		- NEIGH  = { forHeadEnd , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { noContinue , }
		- SUCC   = { link , tok , end , * , Token , }

956 :	"forHeadEnd"
		- NEIGH  = { forHeadEnd , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { noContinue , }
		- SUCC   = { link , tok , end , * , Token , }

957 :	"Token"
		- NEIGH  = { link , tok , end , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forHeadEnd , * , Token , }
		- SUCC   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }

957 :	"*"
		- NEIGH  = { link , tok , end , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forHeadEnd , * , Token , }
		- SUCC   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }

957 :	"end"
		- NEIGH  = { link , tok , end , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forHeadEnd , * , Token , }
		- SUCC   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }

957 :	"tok"
		- NEIGH  = { link , tok , end , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forHeadEnd , * , Token , }
		- SUCC   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }

957 :	"link"
		- NEIGH  = { link , tok , end , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { forHeadEnd , * , Token , }
		- SUCC   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }

958 :	"if"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"scope"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"type"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"=="
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"Scope"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"eUnconditional"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"&&"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"tok"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"strAt"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"-"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"=="
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"||"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"tok"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"previous"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

958 :	"isName"
		- NEIGH  = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { loopVariable , }
		- PRED   = { link , tok , end , * , Token , }
		- SUCC   = { eDo , == , type , Scope , scope , if , }

959 :	"loopVariable"
		- NEIGH  = { loopVariable , }
		- PARENT = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

961 :	"if"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { - , strAt , == , end , && , loopVariable , if , tok , linkAt , }
		- PRED   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- SUCC   = { bFirstAssignment , }

961 :	"scope"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { - , strAt , == , end , && , loopVariable , if , tok , linkAt , }
		- PRED   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- SUCC   = { bFirstAssignment , }

961 :	"type"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { - , strAt , == , end , && , loopVariable , if , tok , linkAt , }
		- PRED   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- SUCC   = { bFirstAssignment , }

961 :	"=="
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { - , strAt , == , end , && , loopVariable , if , tok , linkAt , }
		- PRED   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- SUCC   = { bFirstAssignment , }

961 :	"Scope"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { - , strAt , == , end , && , loopVariable , if , tok , linkAt , }
		- PRED   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- SUCC   = { bFirstAssignment , }

961 :	"eDo"
		- NEIGH  = { eDo , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { - , strAt , == , end , && , loopVariable , if , tok , linkAt , }
		- PRED   = { isName , previous , type , - , || , tok , strAt , eUnconditional , && , == , Scope , scope , if , }
		- SUCC   = { bFirstAssignment , }

962 :	"end"
		- NEIGH  = { linkAt , end , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

962 :	"end"
		- NEIGH  = { linkAt , end , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

962 :	"linkAt"
		- NEIGH  = { linkAt , end , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

963 :	"if"
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

963 :	"loopVariable"
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

963 :	"&&"
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

963 :	"tok"
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

963 :	"strAt"
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

963 :	"-"
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

963 :	"=="
		- NEIGH  = { - , tok , strAt , == , && , loopVariable , if , }
		- PARENT = { eDo , == , type , Scope , scope , if , }
		- CHILD  = { eSwitch , == , if , scope , type , - , Scope , linkAt , tok , }
		- PRED   = { }
		- SUCC   = { }

964 :	"tok"
		- NEIGH  = { - , linkAt , tok , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

964 :	"tok"
		- NEIGH  = { - , linkAt , tok , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

964 :	"linkAt"
		- NEIGH  = { - , linkAt , tok , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

964 :	"-"
		- NEIGH  = { - , linkAt , tok , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

965 :	"if"
		- NEIGH  = { eSwitch , == , type , Scope , scope , if , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { nestedList , innerScope , * , scope , Scope , for , }
		- PRED   = { }
		- SUCC   = { }

965 :	"scope"
		- NEIGH  = { eSwitch , == , type , Scope , scope , if , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { nestedList , innerScope , * , scope , Scope , for , }
		- PRED   = { }
		- SUCC   = { }

965 :	"type"
		- NEIGH  = { eSwitch , == , type , Scope , scope , if , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { nestedList , innerScope , * , scope , Scope , for , }
		- PRED   = { }
		- SUCC   = { }

965 :	"=="
		- NEIGH  = { eSwitch , == , type , Scope , scope , if , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { nestedList , innerScope , * , scope , Scope , for , }
		- PRED   = { }
		- SUCC   = { }

965 :	"Scope"
		- NEIGH  = { eSwitch , == , type , Scope , scope , if , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { nestedList , innerScope , * , scope , Scope , for , }
		- PRED   = { }
		- SUCC   = { }

965 :	"eSwitch"
		- NEIGH  = { eSwitch , == , type , Scope , scope , if , }
		- PARENT = { - , tok , strAt , == , && , loopVariable , if , }
		- CHILD  = { nestedList , innerScope , * , scope , Scope , for , }
		- PRED   = { }
		- SUCC   = { }

966 :	"for"
		- NEIGH  = { nestedList , innerScope , * , scope , Scope , for , }
		- PARENT = { eSwitch , == , type , Scope , scope , if , }
		- CHILD  = { used , if , }
		- PRED   = { }
		- SUCC   = { }

966 :	"Scope"
		- NEIGH  = { nestedList , innerScope , * , scope , Scope , for , }
		- PARENT = { eSwitch , == , type , Scope , scope , if , }
		- CHILD  = { used , if , }
		- PRED   = { }
		- SUCC   = { }

966 :	"*"
		- NEIGH  = { nestedList , innerScope , * , scope , Scope , for , }
		- PARENT = { eSwitch , == , type , Scope , scope , if , }
		- CHILD  = { used , if , }
		- PRED   = { }
		- SUCC   = { }

966 :	"innerScope"
		- NEIGH  = { nestedList , innerScope , * , scope , Scope , for , }
		- PARENT = { eSwitch , == , type , Scope , scope , if , }
		- CHILD  = { used , if , }
		- PRED   = { }
		- SUCC   = { }

966 :	"scope"
		- NEIGH  = { nestedList , innerScope , * , scope , Scope , for , }
		- PARENT = { eSwitch , == , type , Scope , scope , if , }
		- CHILD  = { used , if , }
		- PRED   = { }
		- SUCC   = { }

966 :	"nestedList"
		- NEIGH  = { nestedList , innerScope , * , scope , Scope , for , }
		- PARENT = { eSwitch , == , type , Scope , scope , if , }
		- CHILD  = { used , if , }
		- PRED   = { }
		- SUCC   = { }

967 :	"if"
		- NEIGH  = { used , if , }
		- PARENT = { nestedList , innerScope , * , scope , Scope , for , }
		- CHILD  = { || , used , var , bodyStart , innerScope , checkInnerScope , ! , if , used2 , }
		- PRED   = { }
		- SUCC   = { }

967 :	"used"
		- NEIGH  = { used , if , }
		- PARENT = { nestedList , innerScope , * , scope , Scope , for , }
		- CHILD  = { || , used , var , bodyStart , innerScope , checkInnerScope , ! , if , used2 , }
		- PRED   = { }
		- SUCC   = { }

968 :	"used2"
		- NEIGH  = { used2 , }
		- PARENT = { used , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }

969 :	"if"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"!"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"checkInnerScope"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"innerScope"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"bodyStart"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"var"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"used2"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"||"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

969 :	"used2"
		- NEIGH  = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { used2 , }
		- SUCC   = { }

970 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , used2 , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

972 :	"if"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

972 :	"!"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

972 :	"checkInnerScope"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

972 :	"innerScope"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

972 :	"bodyStart"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

972 :	"var"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

972 :	"used"
		- NEIGH  = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- PARENT = { used , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

973 :	"return"
		- NEIGH  = { return , }
		- PARENT = { used , var , checkInnerScope , innerScope , bodyStart , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

978 :	"bFirstAssignment"
		- NEIGH  = { bFirstAssignment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eDo , == , type , Scope , scope , if , }
		- SUCC   = { end , && , != , tok , next , for , }

979 :	"for"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"tok"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"&&"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"tok"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"!="
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"end"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"tok"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"tok"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

979 :	"next"
		- NEIGH  = { end , && , != , tok , next , for , }
		- PARENT = { }
		- CHILD  = { varId , || , isArray , bFirstAssignment , Match , eSwitch , noContinue , Scope , != , tok , type , simpleMatch , ! , == , Token , scope , var , if , str , && , isPointer , loopVariable , forHeadEnd , declarationId , }
		- PRED   = { bFirstAssignment , }
		- SUCC   = { return , }

980 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { str , == , tok , if , }

980 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { str , == , tok , if , }

980 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { str , == , tok , if , }

980 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { str , == , tok , if , }

981 :	"return"
		- NEIGH  = { return , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

982 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { noContinue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

982 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { noContinue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

982 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { noContinue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

982 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { noContinue , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

983 :	"noContinue"
		- NEIGH  = { noContinue , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

985 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , linkAt , forHeadEnd , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { forHeadEnd , == , tok , if , }

985 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , linkAt , forHeadEnd , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { forHeadEnd , == , tok , if , }

985 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , linkAt , forHeadEnd , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { forHeadEnd , == , tok , if , }

985 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , linkAt , forHeadEnd , }
		- PRED   = { str , == , tok , if , }
		- SUCC   = { forHeadEnd , == , tok , if , }

986 :	"forHeadEnd"
		- NEIGH  = { tok , linkAt , forHeadEnd , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

986 :	"tok"
		- NEIGH  = { tok , linkAt , forHeadEnd , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

986 :	"linkAt"
		- NEIGH  = { tok , linkAt , forHeadEnd , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

987 :	"if"
		- NEIGH  = { forHeadEnd , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { forHeadEnd , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }

987 :	"tok"
		- NEIGH  = { forHeadEnd , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { forHeadEnd , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }

987 :	"=="
		- NEIGH  = { forHeadEnd , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { forHeadEnd , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }

987 :	"forHeadEnd"
		- NEIGH  = { forHeadEnd , == , tok , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { forHeadEnd , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }

988 :	"forHeadEnd"
		- NEIGH  = { forHeadEnd , }
		- PARENT = { forHeadEnd , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

990 :	"if"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"loopVariable"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"&&"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"noContinue"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"&&"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"tok"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"scope"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"=="
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"scope"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"&&"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"!"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"forHeadEnd"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"&&"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"scope"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"type"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"!="
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"Scope"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"eSwitch"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"&&"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"Token"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"Match"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"tok"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"var"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

990 :	"declarationId"
		- NEIGH  = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { tok , tokAt , tok2 , * , next , for , Token , indent , loopVariable , }
		- PRED   = { forHeadEnd , == , tok , if , }
		- SUCC   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }

991 :	"loopVariable"
		- NEIGH  = { loopVariable , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { indent , }

992 :	"indent"
		- NEIGH  = { indent , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { loopVariable , }
		- SUCC   = { tok , tokAt , tok2 , * , next , Token , for , }

993 :	"for"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"Token"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"*"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"tok2"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"tok"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"tokAt"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"tok2"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"tok2"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"tok2"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

993 :	"next"
		- NEIGH  = { tok , tokAt , tok2 , * , next , Token , for , }
		- PARENT = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- CHILD  = { == , str , tok2 , if , }
		- PRED   = { indent , }
		- SUCC   = { }

994 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tokAt , tok2 , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , ++ , indent , }
		- PRED   = { }
		- SUCC   = { }

994 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tokAt , tok2 , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , ++ , indent , }
		- PRED   = { }
		- SUCC   = { }

994 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tokAt , tok2 , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , ++ , indent , }
		- PRED   = { }
		- SUCC   = { }

994 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { tok , tokAt , tok2 , * , next , Token , for , }
		- CHILD  = { == , str , tok2 , if , ++ , indent , }
		- PRED   = { }
		- SUCC   = { }

995 :	"indent"
		- NEIGH  = { ++ , indent , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

995 :	"++"
		- NEIGH  = { ++ , indent , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

996 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { str , tok2 , -- , == , indent , if , }
		- PRED   = { }
		- SUCC   = { }

996 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { str , tok2 , -- , == , indent , if , }
		- PRED   = { }
		- SUCC   = { }

996 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { str , tok2 , -- , == , indent , if , }
		- PRED   = { }
		- SUCC   = { }

996 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { str , tok2 , -- , == , indent , if , }
		- PRED   = { }
		- SUCC   = { }

997 :	"if"
		- NEIGH  = { == , indent , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { -- , indent , }

997 :	"indent"
		- NEIGH  = { == , indent , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { -- , indent , }

997 :	"=="
		- NEIGH  = { == , indent , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { -- , indent , }

998 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , indent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

999 :	"indent"
		- NEIGH  = { -- , indent , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { == , indent , if , }
		- SUCC   = { }

999 :	"--"
		- NEIGH  = { -- , indent , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { == , indent , if , }
		- SUCC   = { }

1000 :	"if"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { declarationId , == , var , tok2 , varId , if , break , }
		- PRED   = { }
		- SUCC   = { }

1000 :	"tok2"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { declarationId , == , var , tok2 , varId , if , break , }
		- PRED   = { }
		- SUCC   = { }

1000 :	"str"
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { declarationId , == , var , tok2 , varId , if , break , }
		- PRED   = { }
		- SUCC   = { }

1000 :	"=="
		- NEIGH  = { == , str , tok2 , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { declarationId , == , var , tok2 , varId , if , break , }
		- PRED   = { }
		- SUCC   = { }

1001 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1002 :	"if"
		- NEIGH  = { declarationId , == , tok2 , var , varId , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , loopVariable , }
		- PRED   = { }
		- SUCC   = { }

1002 :	"tok2"
		- NEIGH  = { declarationId , == , tok2 , var , varId , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , loopVariable , }
		- PRED   = { }
		- SUCC   = { }

1002 :	"varId"
		- NEIGH  = { declarationId , == , tok2 , var , varId , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , loopVariable , }
		- PRED   = { }
		- SUCC   = { }

1002 :	"=="
		- NEIGH  = { declarationId , == , tok2 , var , varId , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , loopVariable , }
		- PRED   = { }
		- SUCC   = { }

1002 :	"var"
		- NEIGH  = { declarationId , == , tok2 , var , varId , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , loopVariable , }
		- PRED   = { }
		- SUCC   = { }

1002 :	"declarationId"
		- NEIGH  = { declarationId , == , tok2 , var , varId , if , }
		- PARENT = { == , str , tok2 , if , }
		- CHILD  = { break , loopVariable , }
		- PRED   = { }
		- SUCC   = { }

1003 :	"loopVariable"
		- NEIGH  = { loopVariable , }
		- PARENT = { declarationId , == , tok2 , var , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

1004 :	"break"
		- NEIGH  = { break , }
		- PARENT = { declarationId , == , tok2 , var , varId , if , }
		- CHILD  = { }
		- PRED   = { loopVariable , }
		- SUCC   = { }

1009 :	"if"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"loopVariable"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"&&"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"Token"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"Match"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"tok"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"var"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1009 :	"declarationId"
		- NEIGH  = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { Match , eSwitch , Scope , type , scope , != , tok , forHeadEnd , declarationId , == , var , loopVariable , && , noContinue , Token , ! , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1010 :	"return"
		- NEIGH  = { return , }
		- PARENT = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1012 :	"if"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1012 :	"Token"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1012 :	"Match"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1012 :	"tok"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1012 :	"var"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1012 :	"declarationId"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , var , tok , Token , loopVariable , && , Match , if , }
		- SUCC   = { declarationId , tok , Token , var , Match , if , }

1013 :	"return"
		- NEIGH  = { return , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1015 :	"if"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { bFirstAssignment , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }

1015 :	"Token"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { bFirstAssignment , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }

1015 :	"Match"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { bFirstAssignment , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }

1015 :	"tok"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { bFirstAssignment , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }

1015 :	"var"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { bFirstAssignment , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }

1015 :	"declarationId"
		- NEIGH  = { declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { bFirstAssignment , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }

1016 :	"bFirstAssignment"
		- NEIGH  = { bFirstAssignment , }
		- PARENT = { declarationId , tok , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1018 :	"if"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"!"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"bFirstAssignment"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"&&"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"Token"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"Match"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"tok"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"var"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1018 :	"declarationId"
		- NEIGH  = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Token , var , Match , if , }
		- SUCC   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }

1019 :	"return"
		- NEIGH  = { return , }
		- PARENT = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1021 :	"if"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"Token"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"Match"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"tok"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"var"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"declarationId"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"&&"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"var"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"isArray"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"||"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"var"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1021 :	"isPointer"
		- NEIGH  = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { return , }
		- PRED   = { declarationId , tok , Match , Token , && , var , bFirstAssignment , ! , if , }
		- SUCC   = { declarationId , == , tok , var , varId , if , }

1022 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1024 :	"if"
		- NEIGH  = { declarationId , == , tok , var , varId , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { eSwitch , tok , Scope , && , == , type , scope , if , used , }
		- PRED   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- SUCC   = { }

1024 :	"tok"
		- NEIGH  = { declarationId , == , tok , var , varId , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { eSwitch , tok , Scope , && , == , type , scope , if , used , }
		- PRED   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- SUCC   = { }

1024 :	"varId"
		- NEIGH  = { declarationId , == , tok , var , varId , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { eSwitch , tok , Scope , && , == , type , scope , if , used , }
		- PRED   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- SUCC   = { }

1024 :	"=="
		- NEIGH  = { declarationId , == , tok , var , varId , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { eSwitch , tok , Scope , && , == , type , scope , if , used , }
		- PRED   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- SUCC   = { }

1024 :	"var"
		- NEIGH  = { declarationId , == , tok , var , varId , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { eSwitch , tok , Scope , && , == , type , scope , if , used , }
		- PRED   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- SUCC   = { }

1024 :	"declarationId"
		- NEIGH  = { declarationId , == , tok , var , varId , if , }
		- PARENT = { end , && , != , tok , next , for , }
		- CHILD  = { eSwitch , tok , Scope , && , == , type , scope , if , used , }
		- PRED   = { || , isPointer , isArray , && , declarationId , tok , Token , var , Match , if , }
		- SUCC   = { }

1025 :	"used"
		- NEIGH  = { used , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { eSwitch , && , == , type , tok , Scope , scope , if , }

1026 :	"if"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"scope"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"type"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"=="
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"Scope"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"eSwitch"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"&&"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"scope"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"=="
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"tok"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1026 :	"scope"
		- NEIGH  = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- PARENT = { declarationId , == , tok , var , varId , if , }
		- CHILD  = { return , }
		- PRED   = { used , }
		- SUCC   = { }

1027 :	"return"
		- NEIGH  = { return , }
		- PARENT = { eSwitch , && , == , type , tok , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1031 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { end , && , != , tok , next , for , }
		- SUCC   = { }

1034 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"variableScopeError"
		- NEIGH  = { variableScopeError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1034 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1036 :	"reportError"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1036 :	"tok"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1037 :	"Severity"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1037 :	"style"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1039 :	"+"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1039 :	"varname"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1039 :	"+"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1055 :	"CWE398"
		- NEIGH  = { CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1061 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1061 :	"checkCommaSeparatedReturn"
		- NEIGH  = { checkCommaSeparatedReturn , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1064 :	"if"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1064 :	"!"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1064 :	"mSettings"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1064 :	"experimental"
		- NEIGH  = { experimental , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1065 :	"return"
		- NEIGH  = { return , }
		- PARENT = { experimental , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1067 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1067 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1067 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1067 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1067 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1067 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { experimental , mSettings , ! , if , }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1068 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1070 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1070 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { str , == , tok , if , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1071 :	"if"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { ! , if , while , str , && , next , != , tok , }
		- PRED   = { }
		- SUCC   = { }

1071 :	"tok"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { ! , if , while , str , && , next , != , tok , }
		- PRED   = { }
		- SUCC   = { }

1071 :	"str"
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { ! , if , while , str , && , next , != , tok , }
		- PRED   = { }
		- SUCC   = { }

1071 :	"=="
		- NEIGH  = { str , == , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { ! , if , while , str , && , next , != , tok , }
		- PRED   = { }
		- SUCC   = { }

1072 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , && , != , tok , while , }

1072 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , && , != , tok , while , }

1072 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , && , != , tok , while , }

1073 :	"while"
		- NEIGH  = { str , && , != , tok , while , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { next , != , linenr , if , str , isExpandedMacro , Match , ! , link , Token , == , && , tok , }
		- PRED   = { next , tok , }
		- SUCC   = { tok , ! , if , }

1073 :	"tok"
		- NEIGH  = { str , && , != , tok , while , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { next , != , linenr , if , str , isExpandedMacro , Match , ! , link , Token , == , && , tok , }
		- PRED   = { next , tok , }
		- SUCC   = { tok , ! , if , }

1073 :	"&&"
		- NEIGH  = { str , && , != , tok , while , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { next , != , linenr , if , str , isExpandedMacro , Match , ! , link , Token , == , && , tok , }
		- PRED   = { next , tok , }
		- SUCC   = { tok , ! , if , }

1073 :	"tok"
		- NEIGH  = { str , && , != , tok , while , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { next , != , linenr , if , str , isExpandedMacro , Match , ! , link , Token , == , && , tok , }
		- PRED   = { next , tok , }
		- SUCC   = { tok , ! , if , }

1073 :	"str"
		- NEIGH  = { str , && , != , tok , while , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { next , != , linenr , if , str , isExpandedMacro , Match , ! , link , Token , == , && , tok , }
		- PRED   = { next , tok , }
		- SUCC   = { tok , ! , if , }

1073 :	"!="
		- NEIGH  = { str , && , != , tok , while , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { next , != , linenr , if , str , isExpandedMacro , Match , ! , link , Token , == , && , tok , }
		- PRED   = { next , tok , }
		- SUCC   = { tok , ! , if , }

1074 :	"if"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1074 :	"tok"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1074 :	"link"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1074 :	"&&"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1074 :	"Token"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1074 :	"Match"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1074 :	"tok"
		- NEIGH  = { Match , Token , && , link , tok , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { link , tok , }
		- PRED   = { }
		- SUCC   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }

1075 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1075 :	"tok"
		- NEIGH  = { link , tok , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1075 :	"link"
		- NEIGH  = { link , tok , }
		- PARENT = { Match , Token , && , link , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1077 :	"if"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"!"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"tok"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"isExpandedMacro"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"&&"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"tok"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"str"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"=="
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"&&"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"tok"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"linenr"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"!="
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"tok"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"next"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1077 :	"linenr"
		- NEIGH  = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { tok , commaSeparatedReturnError , }
		- PRED   = { Match , Token , && , link , tok , if , }
		- SUCC   = { next , tok , }

1078 :	"commaSeparatedReturnError"
		- NEIGH  = { tok , commaSeparatedReturnError , }
		- PARENT = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1078 :	"tok"
		- NEIGH  = { tok , commaSeparatedReturnError , }
		- PARENT = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1080 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { }
		- PRED   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- SUCC   = { }

1080 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { }
		- PRED   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- SUCC   = { }

1080 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { str , && , != , tok , while , }
		- CHILD  = { }
		- PRED   = { next , linenr , str , == , && , isExpandedMacro , != , tok , ! , if , }
		- SUCC   = { }

1083 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { str , && , != , tok , while , }
		- SUCC   = { }

1083 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { str , && , != , tok , while , }
		- SUCC   = { }

1083 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { str , == , tok , if , }
		- CHILD  = { break , }
		- PRED   = { str , && , != , tok , while , }
		- SUCC   = { }

1084 :	"break"
		- NEIGH  = { break , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1089 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1089 :	"commaSeparatedReturnError"
		- NEIGH  = { commaSeparatedReturnError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1089 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1089 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1089 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1091 :	"reportError"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1091 :	"tok"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1092 :	"Severity"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1092 :	"style"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1103 :	"CWE398"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"estimateSize"
		- NEIGH  = { estimateSize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"Settings"
		- NEIGH  = { Settings , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"settings"
		- NEIGH  = { settings , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"SymbolDatabase"
		- NEIGH  = { SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1109 :	"recursionDepth"
		- NEIGH  = { recursionDepth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1111 :	"if"
		- NEIGH  = { > , recursionDepth , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { cumulatedSize , }

1111 :	"recursionDepth"
		- NEIGH  = { > , recursionDepth , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { cumulatedSize , }

1111 :	">"
		- NEIGH  = { > , recursionDepth , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { cumulatedSize , }

1112 :	"return"
		- NEIGH  = { return , }
		- PARENT = { > , recursionDepth , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1114 :	"cumulatedSize"
		- NEIGH  = { cumulatedSize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , recursionDepth , if , }
		- SUCC   = { varlist , type , & , var , classScope , Variable , for , }

1115 :	"for"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1115 :	"Variable"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1115 :	"&"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1115 :	"var"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1115 :	"type"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1115 :	"classScope"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1115 :	"varlist"
		- NEIGH  = { varlist , type , & , var , classScope , Variable , for , }
		- PARENT = { }
		- CHILD  = { || , isArray , isPointer , isReference , var , if , isStatic , size , }
		- PRED   = { cumulatedSize , }
		- SUCC   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }

1116 :	"size"
		- NEIGH  = { size , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , var , if , }

1117 :	"if"
		- NEIGH  = { isStatic , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { size , }
		- SUCC   = { isReference , || , isPointer , var , if , }

1117 :	"var"
		- NEIGH  = { isStatic , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { size , }
		- SUCC   = { isReference , || , isPointer , var , if , }

1117 :	"isStatic"
		- NEIGH  = { isStatic , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { size , }
		- SUCC   = { isReference , || , isPointer , var , if , }

1118 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isStatic , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1119 :	"if"
		- NEIGH  = { isReference , || , isPointer , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { classScope , && , type , sizeof_pointer , var , if , settings , size , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isArray , var , if , }

1119 :	"var"
		- NEIGH  = { isReference , || , isPointer , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { classScope , && , type , sizeof_pointer , var , if , settings , size , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isArray , var , if , }

1119 :	"isPointer"
		- NEIGH  = { isReference , || , isPointer , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { classScope , && , type , sizeof_pointer , var , if , settings , size , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isArray , var , if , }

1119 :	"||"
		- NEIGH  = { isReference , || , isPointer , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { classScope , && , type , sizeof_pointer , var , if , settings , size , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isArray , var , if , }

1119 :	"var"
		- NEIGH  = { isReference , || , isPointer , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { classScope , && , type , sizeof_pointer , var , if , settings , size , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isArray , var , if , }

1119 :	"isReference"
		- NEIGH  = { isReference , || , isPointer , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { classScope , && , type , sizeof_pointer , var , if , settings , size , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isArray , var , if , }

1120 :	"size"
		- NEIGH  = { sizeof_pointer , settings , size , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1120 :	"settings"
		- NEIGH  = { sizeof_pointer , settings , size , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1120 :	"sizeof_pointer"
		- NEIGH  = { sizeof_pointer , settings , size , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1121 :	"if"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1121 :	"var"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1121 :	"type"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1121 :	"&&"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1121 :	"var"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1121 :	"type"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1121 :	"classScope"
		- NEIGH  = { && , classScope , type , var , if , }
		- PARENT = { isReference , || , isPointer , var , if , }
		- CHILD  = { ValueType , if , CONTAINER , estimateSize , + , valueType , == , Type , var , symbolDatabase , recursionDepth , type , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1122 :	"size"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"estimateSize"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"var"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"type"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"settings"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"symbolDatabase"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"recursionDepth"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1122 :	"+"
		- NEIGH  = { + , symbolDatabase , recursionDepth , type , var , estimateSize , settings , size , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1123 :	"if"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"var"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"valueType"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"type"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"=="
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"ValueType"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"Type"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1123 :	"CONTAINER"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { && , classScope , type , var , if , }
		- CHILD  = { sizeOfType , symbolDatabase , typeStartToken , var , sizeof_pointer , * , settings , size , }
		- PRED   = { }
		- SUCC   = { }

1124 :	"size"
		- NEIGH  = { sizeof_pointer , * , settings , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1124 :	"*"
		- NEIGH  = { sizeof_pointer , * , settings , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1124 :	"settings"
		- NEIGH  = { sizeof_pointer , * , settings , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1124 :	"sizeof_pointer"
		- NEIGH  = { sizeof_pointer , * , settings , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1126 :	"size"
		- NEIGH  = { typeStartToken , var , sizeOfType , symbolDatabase , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1126 :	"symbolDatabase"
		- NEIGH  = { typeStartToken , var , sizeOfType , symbolDatabase , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1126 :	"sizeOfType"
		- NEIGH  = { typeStartToken , var , sizeOfType , symbolDatabase , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1126 :	"var"
		- NEIGH  = { typeStartToken , var , sizeOfType , symbolDatabase , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1126 :	"typeStartToken"
		- NEIGH  = { typeStartToken , var , sizeOfType , symbolDatabase , size , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1128 :	"if"
		- NEIGH  = { isArray , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { dimension , var , * , cumulatedSize , += , size , }
		- PRED   = { isReference , || , isPointer , var , if , }
		- SUCC   = { }

1128 :	"var"
		- NEIGH  = { isArray , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { dimension , var , * , cumulatedSize , += , size , }
		- PRED   = { isReference , || , isPointer , var , if , }
		- SUCC   = { }

1128 :	"isArray"
		- NEIGH  = { isArray , var , if , }
		- PARENT = { varlist , type , & , var , classScope , Variable , for , }
		- CHILD  = { dimension , var , * , cumulatedSize , += , size , }
		- PRED   = { isReference , || , isPointer , var , if , }
		- SUCC   = { }

1129 :	"cumulatedSize"
		- NEIGH  = { dimension , var , * , cumulatedSize , += , size , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1129 :	"+="
		- NEIGH  = { dimension , var , * , cumulatedSize , += , size , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1129 :	"size"
		- NEIGH  = { dimension , var , * , cumulatedSize , += , size , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1129 :	"*"
		- NEIGH  = { dimension , var , * , cumulatedSize , += , size , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1129 :	"var"
		- NEIGH  = { dimension , var , * , cumulatedSize , += , size , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1129 :	"dimension"
		- NEIGH  = { dimension , var , * , cumulatedSize , += , size , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1131 :	"cumulatedSize"
		- NEIGH  = { += , size , cumulatedSize , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1131 :	"+="
		- NEIGH  = { += , size , cumulatedSize , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1131 :	"size"
		- NEIGH  = { += , size , cumulatedSize , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1133 :	"for"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1133 :	"Type"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1133 :	"BaseInfo"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1133 :	"&"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1133 :	"baseInfo"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1133 :	"type"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1133 :	"derivedFrom"
		- NEIGH  = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- PARENT = { }
		- CHILD  = { && , classScope , type , baseInfo , if , }
		- PRED   = { varlist , type , & , var , classScope , Variable , for , }
		- SUCC   = { cumulatedSize , return , }

1134 :	"if"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1134 :	"baseInfo"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1134 :	"type"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1134 :	"&&"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1134 :	"baseInfo"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1134 :	"type"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1134 :	"classScope"
		- NEIGH  = { && , classScope , type , baseInfo , if , }
		- PARENT = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- CHILD  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PRED   = { }
		- SUCC   = { }

1135 :	"cumulatedSize"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"+="
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"estimateSize"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"baseInfo"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"type"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"settings"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"symbolDatabase"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"recursionDepth"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"+"
		- NEIGH  = { + , symbolDatabase , baseInfo , estimateSize , recursionDepth , type , settings , += , cumulatedSize , }
		- PARENT = { && , classScope , type , baseInfo , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1137 :	"return"
		- NEIGH  = { cumulatedSize , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- SUCC   = { }

1137 :	"cumulatedSize"
		- NEIGH  = { cumulatedSize , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , baseInfo , & , derivedFrom , BaseInfo , Type , for , }
		- SUCC   = { }

1140 :	"canBeConst"
		- NEIGH  = { canBeConst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1140 :	"Variable"
		- NEIGH  = { Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1140 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1140 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1144 :	"Function"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1144 :	"*"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1144 :	"func_scope"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1144 :	"var"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1144 :	"scope"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1144 :	"function"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"if"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"func_scope"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"type"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"=="
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"Function"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"Type"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1145 :	"eConstructor"
		- NEIGH  = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- PARENT = { }
		- CHILD  = { str , link , arg , next , == , func_scope , if , }
		- PRED   = { }
		- SUCC   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }

1147 :	"if"
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1147 :	"func_scope"
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1147 :	"arg"
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1147 :	"link"
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1147 :	"next"
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1147 :	"str"
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1147 :	"=="
		- NEIGH  = { str , link , arg , next , == , func_scope , if , }
		- PARENT = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- CHILD  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"for"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"Token"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"*"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"tok2"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"func_scope"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"arg"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"link"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"next"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"next"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"tok2"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"!="
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"var"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"scope"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"bodyStart"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"tok2"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"tok2"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1148 :	"next"
		- NEIGH  = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- PARENT = { str , link , arg , next , == , func_scope , if , }
		- CHILD  = { previous , simpleMatch , && , != , astParent , * , Token , parent , declarationId , tok2 , var , varId , if , }
		- PRED   = { }
		- SUCC   = { }

1149 :	"if"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1149 :	"tok2"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1149 :	"varId"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1149 :	"!="
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1149 :	"var"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1149 :	"declarationId"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1150 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { declarationId , != , tok2 , var , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1151 :	"Token"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { previous , simpleMatch , Token , && , parent , if , }

1151 :	"*"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { previous , simpleMatch , Token , && , parent , if , }

1151 :	"parent"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { previous , simpleMatch , Token , && , parent , if , }

1151 :	"tok2"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { previous , simpleMatch , Token , && , parent , if , }

1151 :	"astParent"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { previous , simpleMatch , Token , && , parent , if , }

1152 :	"if"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1152 :	"parent"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1152 :	"&&"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1152 :	"Token"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1152 :	"simpleMatch"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1152 :	"parent"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1152 :	"previous"
		- NEIGH  = { previous , simpleMatch , Token , && , parent , if , }
		- PARENT = { bodyStart , * , scope , for , != , Token , link , var , tok2 , next , arg , func_scope , }
		- CHILD  = { return , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { }

1153 :	"return"
		- NEIGH  = { return , }
		- PARENT = { previous , simpleMatch , Token , && , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1158 :	"for"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"Token"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"*"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"var"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"bodyStart"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"!="
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"var"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"scope"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"bodyEnd"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"tok2"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1158 :	"next"
		- NEIGH  = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { isLikelyStreamRead , || , != , astParent , * , ! , Token , parent , == , declarationId , tok2 , var , varId , str , if , }
		- PRED   = { type , if , eConstructor , function , scope , * , var , Type , == , func_scope , Function , }
		- SUCC   = { return , }

1159 :	"if"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1159 :	"tok2"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1159 :	"varId"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1159 :	"!="
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1159 :	"var"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1159 :	"declarationId"
		- NEIGH  = { declarationId , != , tok2 , var , varId , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , parent , tok2 , * , Token , }

1160 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { declarationId , != , tok2 , var , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1162 :	"Token"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { parent , ! , if , }

1162 :	"*"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { parent , ! , if , }

1162 :	"parent"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { parent , ! , if , }

1162 :	"tok2"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { parent , ! , if , }

1162 :	"astParent"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { declarationId , != , tok2 , var , varId , if , }
		- SUCC   = { parent , ! , if , }

1163 :	"if"
		- NEIGH  = { parent , ! , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { isLikelyStreamRead , == , str , || , parent , if , }

1163 :	"!"
		- NEIGH  = { parent , ! , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { isLikelyStreamRead , == , str , || , parent , if , }

1163 :	"parent"
		- NEIGH  = { parent , ! , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { isLikelyStreamRead , == , str , || , parent , if , }

1164 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { parent , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1165 :	"if"
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1165 :	"parent"
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1165 :	"str"
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1165 :	"=="
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1165 :	"||"
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1165 :	"isLikelyStreamRead"
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1165 :	"parent"
		- NEIGH  = { isLikelyStreamRead , == , str , || , parent , if , }
		- PARENT = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- CHILD  = { tok2 , || , astOperand1 , == , && , str , parent , astOperand2 , if , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { }

1166 :	"if"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"parent"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"str"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"=="
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"&&"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"parent"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"astOperand1"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"=="
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1166 :	"tok2"
		- NEIGH  = { tok2 , astOperand1 , == , && , str , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok2 , == , && , str , parent , astOperand2 , if , }

1167 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok2 , astOperand1 , == , && , str , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1168 :	"if"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"parent"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"str"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"=="
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"&&"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"parent"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"astOperand2"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"=="
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1168 :	"tok2"
		- NEIGH  = { tok2 , == , && , str , parent , astOperand2 , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { return , }
		- PRED   = { tok2 , astOperand1 , == , && , str , parent , if , }
		- SUCC   = { }

1169 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok2 , == , && , str , parent , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1170 :	"if"
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"parent"
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"str"
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"=="
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"||"
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"parent"
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"str"
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1170 :	"=="
		- NEIGH  = { == , str , || , parent , if , }
		- PARENT = { isLikelyStreamRead , == , str , || , parent , if , }
		- CHILD  = { parent , || , str , if , != , && , while , astOperand1 , tok2 , function , previous , argNr , isUnaryOp , ! , Token , tok3 , * , }
		- PRED   = { }
		- SUCC   = { }

1171 :	"Token"
		- NEIGH  = { previous , tok3 , tok2 , * , Token , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argNr , }

1171 :	"*"
		- NEIGH  = { previous , tok3 , tok2 , * , Token , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argNr , }

1171 :	"tok3"
		- NEIGH  = { previous , tok3 , tok2 , * , Token , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argNr , }

1171 :	"tok2"
		- NEIGH  = { previous , tok3 , tok2 , * , Token , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argNr , }

1171 :	"previous"
		- NEIGH  = { previous , tok3 , tok2 , * , Token , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argNr , }

1172 :	"argNr"
		- NEIGH  = { argNr , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { }
		- PRED   = { previous , tok3 , tok2 , * , Token , }
		- SUCC   = { != , str , && , tok3 , while , }

1173 :	"while"
		- NEIGH  = { != , str , && , tok3 , while , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { previous , Match , tok3 , Token , && , link , if , }
		- PRED   = { argNr , }
		- SUCC   = { function , != , str , astOperand1 , || , if , ! , tok3 , }

1173 :	"tok3"
		- NEIGH  = { != , str , && , tok3 , while , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { previous , Match , tok3 , Token , && , link , if , }
		- PRED   = { argNr , }
		- SUCC   = { function , != , str , astOperand1 , || , if , ! , tok3 , }

1173 :	"&&"
		- NEIGH  = { != , str , && , tok3 , while , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { previous , Match , tok3 , Token , && , link , if , }
		- PRED   = { argNr , }
		- SUCC   = { function , != , str , astOperand1 , || , if , ! , tok3 , }

1173 :	"tok3"
		- NEIGH  = { != , str , && , tok3 , while , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { previous , Match , tok3 , Token , && , link , if , }
		- PRED   = { argNr , }
		- SUCC   = { function , != , str , astOperand1 , || , if , ! , tok3 , }

1173 :	"str"
		- NEIGH  = { != , str , && , tok3 , while , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { previous , Match , tok3 , Token , && , link , if , }
		- PRED   = { argNr , }
		- SUCC   = { function , != , str , astOperand1 , || , if , ! , tok3 , }

1173 :	"!="
		- NEIGH  = { != , str , && , tok3 , while , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { previous , Match , tok3 , Token , && , link , if , }
		- PRED   = { argNr , }
		- SUCC   = { function , != , str , astOperand1 , || , if , ! , tok3 , }

1174 :	"if"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1174 :	"tok3"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1174 :	"link"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1174 :	"&&"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1174 :	"Token"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1174 :	"Match"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1174 :	"tok3"
		- NEIGH  = { Match , tok3 , Token , && , link , if , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { link , if , tok3 , }
		- PRED   = { }
		- SUCC   = { previous , tok3 , }

1175 :	"tok3"
		- NEIGH  = { link , tok3 , }
		- PARENT = { Match , tok3 , Token , && , link , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1175 :	"tok3"
		- NEIGH  = { link , tok3 , }
		- PARENT = { Match , tok3 , Token , && , link , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1175 :	"link"
		- NEIGH  = { link , tok3 , }
		- PARENT = { Match , tok3 , Token , && , link , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1176 :	"if"
		- NEIGH  = { link , tok3 , if , }
		- PARENT = { Match , tok3 , Token , && , link , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1176 :	"tok3"
		- NEIGH  = { link , tok3 , if , }
		- PARENT = { Match , tok3 , Token , && , link , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1176 :	"link"
		- NEIGH  = { link , tok3 , if , }
		- PARENT = { Match , tok3 , Token , && , link , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1177 :	"break"
		- NEIGH  = { break , }
		- PARENT = { link , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1178 :	"if"
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { link , tok3 , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1178 :	"tok3"
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { link , tok3 , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1178 :	"str"
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { link , tok3 , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1178 :	"=="
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { link , tok3 , if , }
		- CHILD  = { == , str , tok3 , if , break , }
		- PRED   = { }
		- SUCC   = { }

1179 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1180 :	"if"
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { ++ , argNr , }
		- PRED   = { }
		- SUCC   = { }

1180 :	"tok3"
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { ++ , argNr , }
		- PRED   = { }
		- SUCC   = { }

1180 :	"str"
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { ++ , argNr , }
		- PRED   = { }
		- SUCC   = { }

1180 :	"=="
		- NEIGH  = { == , str , tok3 , if , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { ++ , argNr , }
		- PRED   = { }
		- SUCC   = { }

1181 :	"argNr"
		- NEIGH  = { ++ , argNr , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1181 :	"++"
		- NEIGH  = { ++ , argNr , }
		- PARENT = { == , str , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1182 :	"tok3"
		- NEIGH  = { previous , tok3 , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { }
		- PRED   = { Match , tok3 , Token , && , link , if , }
		- SUCC   = { }

1182 :	"tok3"
		- NEIGH  = { previous , tok3 , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { }
		- PRED   = { Match , tok3 , Token , && , link , if , }
		- SUCC   = { }

1182 :	"previous"
		- NEIGH  = { previous , tok3 , }
		- PARENT = { != , str , && , tok3 , while , }
		- CHILD  = { }
		- PRED   = { Match , tok3 , Token , && , link , if , }
		- SUCC   = { }

1184 :	"if"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"!"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"tok3"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"||"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"tok3"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"str"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"!="
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"||"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"!"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"tok3"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"astOperand1"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"||"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"!"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"tok3"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"astOperand1"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1184 :	"function"
		- NEIGH  = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { && , isConst , ! , if , || , return , getArgumentVar , function , astOperand1 , isReference , * , argNr , tok3 , Variable , argVar , }
		- PRED   = { != , str , && , tok3 , while , }
		- SUCC   = { }

1185 :	"return"
		- NEIGH  = { return , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1187 :	"Variable"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"*"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"argVar"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"tok3"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"astOperand1"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"function"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"getArgumentVar"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1187 :	"argNr"
		- NEIGH  = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , || , argVar , if , ! , isConst , }

1188 :	"if"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"!"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"argVar"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"||"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"!"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"argVar"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"isConst"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"&&"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"argVar"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1188 :	"isReference"
		- NEIGH  = { isReference , && , || , argVar , if , ! , isConst , }
		- PARENT = { function , != , str , astOperand1 , || , if , ! , tok3 , }
		- CHILD  = { return , }
		- PRED   = { getArgumentVar , function , argVar , astOperand1 , * , argNr , tok3 , Variable , }
		- SUCC   = { }

1189 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isReference , && , || , argVar , if , ! , isConst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1191 :	"if"
		- NEIGH  = { isUnaryOp , parent , if , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { isConstOp , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1191 :	"parent"
		- NEIGH  = { isUnaryOp , parent , if , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { isConstOp , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1191 :	"isUnaryOp"
		- NEIGH  = { isUnaryOp , parent , if , }
		- PARENT = { == , str , || , parent , if , }
		- CHILD  = { isConstOp , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1193 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isUnaryOp , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1194 :	"if"
		- NEIGH  = { isConstOp , parent , if , }
		- PARENT = { isUnaryOp , parent , if , }
		- CHILD  = { isAssignmentOp , if , parent , continue , }
		- PRED   = { }
		- SUCC   = { }

1194 :	"parent"
		- NEIGH  = { isConstOp , parent , if , }
		- PARENT = { isUnaryOp , parent , if , }
		- CHILD  = { isAssignmentOp , if , parent , continue , }
		- PRED   = { }
		- SUCC   = { }

1194 :	"isConstOp"
		- NEIGH  = { isConstOp , parent , if , }
		- PARENT = { isUnaryOp , parent , if , }
		- CHILD  = { isAssignmentOp , if , parent , continue , }
		- PRED   = { }
		- SUCC   = { }

1195 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isConstOp , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1196 :	"if"
		- NEIGH  = { isAssignmentOp , parent , if , }
		- PARENT = { isConstOp , parent , if , }
		- CHILD  = { Match , Token , == , tok2 , astOperand1 , parent , if , }
		- PRED   = { }
		- SUCC   = { }

1196 :	"parent"
		- NEIGH  = { isAssignmentOp , parent , if , }
		- PARENT = { isConstOp , parent , if , }
		- CHILD  = { Match , Token , == , tok2 , astOperand1 , parent , if , }
		- PRED   = { }
		- SUCC   = { }

1196 :	"isAssignmentOp"
		- NEIGH  = { isAssignmentOp , parent , if , }
		- PARENT = { isConstOp , parent , if , }
		- CHILD  = { Match , Token , == , tok2 , astOperand1 , parent , if , }
		- PRED   = { }
		- SUCC   = { }

1197 :	"if"
		- NEIGH  = { == , tok2 , astOperand1 , parent , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { == , str , astOperand1 , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1197 :	"parent"
		- NEIGH  = { == , tok2 , astOperand1 , parent , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { == , str , astOperand1 , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1197 :	"astOperand1"
		- NEIGH  = { == , tok2 , astOperand1 , parent , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { == , str , astOperand1 , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1197 :	"=="
		- NEIGH  = { == , tok2 , astOperand1 , parent , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { == , str , astOperand1 , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1197 :	"tok2"
		- NEIGH  = { == , tok2 , astOperand1 , parent , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { == , str , astOperand1 , if , parent , return , }
		- PRED   = { }
		- SUCC   = { }

1198 :	"return"
		- NEIGH  = { return , }
		- PARENT = { == , tok2 , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1199 :	"if"
		- NEIGH  = { == , str , astOperand1 , parent , if , }
		- PARENT = { == , tok2 , astOperand1 , parent , if , }
		- CHILD  = { isConst , || , ! , if , parent , assignedVar , * , variable , previous , Variable , }
		- PRED   = { }
		- SUCC   = { }

1199 :	"parent"
		- NEIGH  = { == , str , astOperand1 , parent , if , }
		- PARENT = { == , tok2 , astOperand1 , parent , if , }
		- CHILD  = { isConst , || , ! , if , parent , assignedVar , * , variable , previous , Variable , }
		- PRED   = { }
		- SUCC   = { }

1199 :	"astOperand1"
		- NEIGH  = { == , str , astOperand1 , parent , if , }
		- PARENT = { == , tok2 , astOperand1 , parent , if , }
		- CHILD  = { isConst , || , ! , if , parent , assignedVar , * , variable , previous , Variable , }
		- PRED   = { }
		- SUCC   = { }

1199 :	"str"
		- NEIGH  = { == , str , astOperand1 , parent , if , }
		- PARENT = { == , tok2 , astOperand1 , parent , if , }
		- CHILD  = { isConst , || , ! , if , parent , assignedVar , * , variable , previous , Variable , }
		- PRED   = { }
		- SUCC   = { }

1199 :	"=="
		- NEIGH  = { == , str , astOperand1 , parent , if , }
		- PARENT = { == , tok2 , astOperand1 , parent , if , }
		- CHILD  = { isConst , || , ! , if , parent , assignedVar , * , variable , previous , Variable , }
		- PRED   = { }
		- SUCC   = { }

1200 :	"Variable"
		- NEIGH  = { parent , assignedVar , * , variable , previous , Variable , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , assignedVar , ! , isConst , if , }

1200 :	"*"
		- NEIGH  = { parent , assignedVar , * , variable , previous , Variable , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , assignedVar , ! , isConst , if , }

1200 :	"assignedVar"
		- NEIGH  = { parent , assignedVar , * , variable , previous , Variable , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , assignedVar , ! , isConst , if , }

1200 :	"parent"
		- NEIGH  = { parent , assignedVar , * , variable , previous , Variable , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , assignedVar , ! , isConst , if , }

1200 :	"previous"
		- NEIGH  = { parent , assignedVar , * , variable , previous , Variable , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , assignedVar , ! , isConst , if , }

1200 :	"variable"
		- NEIGH  = { parent , assignedVar , * , variable , previous , Variable , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { || , assignedVar , ! , isConst , if , }

1201 :	"if"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1201 :	"!"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1201 :	"assignedVar"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1201 :	"||"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1201 :	"!"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1201 :	"assignedVar"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1201 :	"isConst"
		- NEIGH  = { || , assignedVar , ! , isConst , if , }
		- PARENT = { == , str , astOperand1 , parent , if , }
		- CHILD  = { return , }
		- PRED   = { parent , assignedVar , * , variable , previous , Variable , }
		- SUCC   = { }

1202 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , assignedVar , ! , isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1204 :	"if"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { isConst , && , if , function , func , tokAt , tok2 , isStatic , * , return , || , Function , }
		- PRED   = { }
		- SUCC   = { }

1204 :	"Token"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { isConst , && , if , function , func , tokAt , tok2 , isStatic , * , return , || , Function , }
		- PRED   = { }
		- SUCC   = { }

1204 :	"Match"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { isConst , && , if , function , func , tokAt , tok2 , isStatic , * , return , || , Function , }
		- PRED   = { }
		- SUCC   = { }

1204 :	"tok2"
		- NEIGH  = { tok2 , Token , Match , if , }
		- PARENT = { isAssignmentOp , parent , if , }
		- CHILD  = { isConst , && , if , function , func , tokAt , tok2 , isStatic , * , return , || , Function , }
		- PRED   = { }
		- SUCC   = { }

1205 :	"Function"
		- NEIGH  = { function , func , tokAt , tok2 , * , Function , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , || , && , func , isConst , if , }

1205 :	"*"
		- NEIGH  = { function , func , tokAt , tok2 , * , Function , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , || , && , func , isConst , if , }

1205 :	"func"
		- NEIGH  = { function , func , tokAt , tok2 , * , Function , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , || , && , func , isConst , if , }

1205 :	"tok2"
		- NEIGH  = { function , func , tokAt , tok2 , * , Function , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , || , && , func , isConst , if , }

1205 :	"tokAt"
		- NEIGH  = { function , func , tokAt , tok2 , * , Function , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , || , && , func , isConst , if , }

1205 :	"function"
		- NEIGH  = { function , func , tokAt , tok2 , * , Function , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isStatic , || , && , func , isConst , if , }

1206 :	"if"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"func"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"&&"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"func"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"isConst"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"||"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"func"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1206 :	"isStatic"
		- NEIGH  = { isStatic , || , && , func , isConst , if , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { return , continue , }
		- PRED   = { function , func , tokAt , tok2 , * , Function , }
		- SUCC   = { }

1207 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isStatic , || , && , func , isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1209 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isStatic , || , && , func , isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1211 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok2 , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1214 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { bodyEnd , != , scope , var , tok2 , bodyStart , * , next , Token , for , }
		- SUCC   = { }

1217 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1217 :	"checkPassByReference"
		- NEIGH  = { checkPassByReference , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1219 :	"if"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"!"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"mSettings"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"isEnabled"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"Settings"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"PERFORMANCE"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"||"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"mTokenizer"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1219 :	"isC"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1220 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1222 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1222 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1222 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1222 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1222 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1224 :	"for"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { canBeConst , isConst , CONTAINER , ValueType , isExternC , declEndToken , mSettings , valueType , scope , == , strAt , hasVirtualSpecifier , isPointer , tokenDef , arg , ! , function , && , Type , isReference , || , isArray , inconclusive , if , var , isEnumType , - , link , isClass , type , isArgument , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1224 :	"Variable"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { canBeConst , isConst , CONTAINER , ValueType , isExternC , declEndToken , mSettings , valueType , scope , == , strAt , hasVirtualSpecifier , isPointer , tokenDef , arg , ! , function , && , Type , isReference , || , isArray , inconclusive , if , var , isEnumType , - , link , isClass , type , isArgument , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1224 :	"*"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { canBeConst , isConst , CONTAINER , ValueType , isExternC , declEndToken , mSettings , valueType , scope , == , strAt , hasVirtualSpecifier , isPointer , tokenDef , arg , ! , function , && , Type , isReference , || , isArray , inconclusive , if , var , isEnumType , - , link , isClass , type , isArgument , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1224 :	"var"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { canBeConst , isConst , CONTAINER , ValueType , isExternC , declEndToken , mSettings , valueType , scope , == , strAt , hasVirtualSpecifier , isPointer , tokenDef , arg , ! , function , && , Type , isReference , || , isArray , inconclusive , if , var , isEnumType , - , link , isClass , type , isArgument , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1224 :	"symbolDatabase"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { canBeConst , isConst , CONTAINER , ValueType , isExternC , declEndToken , mSettings , valueType , scope , == , strAt , hasVirtualSpecifier , isPointer , tokenDef , arg , ! , function , && , Type , isReference , || , isArray , inconclusive , if , var , isEnumType , - , link , isClass , type , isArgument , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1224 :	"variableList"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { canBeConst , isConst , CONTAINER , ValueType , isExternC , declEndToken , mSettings , valueType , scope , == , strAt , hasVirtualSpecifier , isPointer , tokenDef , arg , ! , function , && , Type , isReference , || , isArray , inconclusive , if , var , isEnumType , - , link , isClass , type , isArgument , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1225 :	"if"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"!"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"||"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"!"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"isArgument"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"||"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"!"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"isClass"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"||"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"isPointer"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"||"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"isArray"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"||"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"isReference"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"||"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"var"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1225 :	"isEnumType"
		- NEIGH  = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { strAt , - , link , arg , function , == , && , scope , var , if , }

1226 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1228 :	"if"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"var"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"scope"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"&&"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"var"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"scope"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"function"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"arg"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"link"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"strAt"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"-"
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1228 :	"=="
		- NEIGH  = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , isPointer , || , isEnumType , if , ! , isClass , isArgument , isReference , var , }
		- SUCC   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }

1229 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1231 :	"if"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"var"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"declEndToken"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"&&"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"var"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"declEndToken"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"isExternC"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1231 :	"||"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"var"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"scope"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"&&"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"var"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"scope"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"function"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"&&"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"var"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"scope"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"function"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"tokenDef"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"&&"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"var"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"scope"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"function"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"tokenDef"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1232 :	"isExternC"
		- NEIGH  = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { strAt , - , link , arg , function , == , && , scope , var , if , }
		- SUCC   = { inconclusive , }

1233 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1235 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { function , scope , isExternC , && , || , declEndToken , var , tokenDef , if , }
		- SUCC   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }

1237 :	"if"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"var"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"valueType"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"type"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"=="
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"ValueType"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"Type"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1237 :	"CONTAINER"
		- NEIGH  = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { isEnumType , if , ! , && , type , var , }
		- PRED   = { inconclusive , }
		- SUCC   = { ! , mSettings , && , inconclusive , if , }

1238 :	"if"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"var"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"type"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"&&"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"!"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"var"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"type"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1238 :	"isEnumType"
		- NEIGH  = { isEnumType , if , ! , && , type , var , }
		- PARENT = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- CHILD  = { classScope , type , if , ! , continue , var , }
		- PRED   = { }
		- SUCC   = { }

1240 :	"if"
		- NEIGH  = { classScope , type , ! , var , if , }
		- PARENT = { isEnumType , if , ! , && , type , var , }
		- CHILD  = { * , <= , symbolDatabase , sizeof_pointer , mSettings , inconclusive , var , estimateSize , if , type , }
		- PRED   = { }
		- SUCC   = { }

1240 :	"!"
		- NEIGH  = { classScope , type , ! , var , if , }
		- PARENT = { isEnumType , if , ! , && , type , var , }
		- CHILD  = { * , <= , symbolDatabase , sizeof_pointer , mSettings , inconclusive , var , estimateSize , if , type , }
		- PRED   = { }
		- SUCC   = { }

1240 :	"var"
		- NEIGH  = { classScope , type , ! , var , if , }
		- PARENT = { isEnumType , if , ! , && , type , var , }
		- CHILD  = { * , <= , symbolDatabase , sizeof_pointer , mSettings , inconclusive , var , estimateSize , if , type , }
		- PRED   = { }
		- SUCC   = { }

1240 :	"type"
		- NEIGH  = { classScope , type , ! , var , if , }
		- PARENT = { isEnumType , if , ! , && , type , var , }
		- CHILD  = { * , <= , symbolDatabase , sizeof_pointer , mSettings , inconclusive , var , estimateSize , if , type , }
		- PRED   = { }
		- SUCC   = { }

1240 :	"classScope"
		- NEIGH  = { classScope , type , ! , var , if , }
		- PARENT = { isEnumType , if , ! , && , type , var , }
		- CHILD  = { * , <= , symbolDatabase , sizeof_pointer , mSettings , inconclusive , var , estimateSize , if , type , }
		- PRED   = { }
		- SUCC   = { }

1241 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1242 :	"if"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"estimateSize"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"var"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"type"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"mSettings"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"symbolDatabase"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"<="
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"*"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"mSettings"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1242 :	"sizeof_pointer"
		- NEIGH  = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- PARENT = { classScope , type , ! , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

1243 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { * , <= , symbolDatabase , sizeof_pointer , estimateSize , var , mSettings , type , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1245 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isEnumType , if , ! , && , type , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1247 :	"if"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- SUCC   = { var , isConst , }

1247 :	"inconclusive"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- SUCC   = { var , isConst , }

1247 :	"&&"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- SUCC   = { var , isConst , }

1247 :	"!"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- SUCC   = { var , isConst , }

1247 :	"mSettings"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- SUCC   = { var , isConst , }

1247 :	"inconclusive"
		- NEIGH  = { ! , mSettings , && , inconclusive , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { CONTAINER , ValueType , Type , == , type , valueType , var , if , }
		- SUCC   = { var , isConst , }

1248 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { ! , mSettings , && , inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1250 :	"isConst"
		- NEIGH  = { var , isConst , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { isConst , if , }

1250 :	"var"
		- NEIGH  = { var , isConst , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { isConst , if , }

1250 :	"isConst"
		- NEIGH  = { var , isConst , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { ! , mSettings , && , inconclusive , if , }
		- SUCC   = { isConst , if , }

1251 :	"if"
		- NEIGH  = { isConst , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , var , name , inconclusive , nameToken , passedByValueError , }
		- PRED   = { var , isConst , }
		- SUCC   = { hasVirtualSpecifier , function , scope , || , if , ! , var , }

1251 :	"isConst"
		- NEIGH  = { isConst , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , var , name , inconclusive , nameToken , passedByValueError , }
		- PRED   = { var , isConst , }
		- SUCC   = { hasVirtualSpecifier , function , scope , || , if , ! , var , }

1252 :	"passedByValueError"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1252 :	"var"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1252 :	"nameToken"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1252 :	"var"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1252 :	"name"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1252 :	"inconclusive"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1253 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isConst , if , }
		- CHILD  = { }
		- PRED   = { inconclusive , nameToken , name , var , passedByValueError , }
		- SUCC   = { }

1257 :	"if"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"!"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"var"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"scope"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"||"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"var"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"scope"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"function"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1257 :	"hasVirtualSpecifier"
		- NEIGH  = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , if , }
		- SUCC   = { canBeConst , var , if , }

1258 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1260 :	"if"
		- NEIGH  = { canBeConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PRED   = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- SUCC   = { }

1260 :	"canBeConst"
		- NEIGH  = { canBeConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PRED   = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- SUCC   = { }

1260 :	"var"
		- NEIGH  = { canBeConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PRED   = { hasVirtualSpecifier , function , scope , || , if , ! , var , }
		- SUCC   = { }

1261 :	"passedByValueError"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { canBeConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1261 :	"var"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { canBeConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1261 :	"nameToken"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { canBeConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1261 :	"var"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { canBeConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1261 :	"name"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { canBeConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1261 :	"inconclusive"
		- NEIGH  = { inconclusive , nameToken , name , var , passedByValueError , }
		- PARENT = { canBeConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"passedByValueError"
		- NEIGH  = { passedByValueError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"parname"
		- NEIGH  = { parname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1266 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1268 :	"reportError"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1268 :	"tok"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1268 :	"Severity"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1268 :	"performance"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1269 :	"+"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1269 :	"parname"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1269 :	"+"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1272 :	"CWE398"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1272 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE398 , + , performance , tok , Severity , parname , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1275 :	"isUnusedVariable"
		- NEIGH  = { isUnusedVariable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1275 :	"Variable"
		- NEIGH  = { Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1275 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1275 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1277 :	"if"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { scope , ! , var , if , }

1277 :	"!"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { scope , ! , var , if , }

1277 :	"var"
		- NEIGH  = { ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { scope , ! , var , if , }

1278 :	"return"
		- NEIGH  = { return , }
		- PARENT = { ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1279 :	"if"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { ! , var , if , }
		- SUCC   = { var , declEndToken , start , * , Token , }

1279 :	"!"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { ! , var , if , }
		- SUCC   = { var , declEndToken , start , * , Token , }

1279 :	"var"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { ! , var , if , }
		- SUCC   = { var , declEndToken , start , * , Token , }

1279 :	"scope"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { ! , var , if , }
		- SUCC   = { var , declEndToken , start , * , Token , }

1280 :	"return"
		- NEIGH  = { return , }
		- PARENT = { scope , ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1281 :	"Token"
		- NEIGH  = { var , declEndToken , start , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { start , ! , if , }

1281 :	"*"
		- NEIGH  = { var , declEndToken , start , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { start , ! , if , }

1281 :	"start"
		- NEIGH  = { var , declEndToken , start , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { start , ! , if , }

1281 :	"var"
		- NEIGH  = { var , declEndToken , start , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { start , ! , if , }

1281 :	"declEndToken"
		- NEIGH  = { var , declEndToken , start , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { start , ! , if , }

1282 :	"if"
		- NEIGH  = { start , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { var , declEndToken , start , * , Token , }
		- SUCC   = { declarationId , start , Token , var , Match , if , }

1282 :	"!"
		- NEIGH  = { start , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { var , declEndToken , start , * , Token , }
		- SUCC   = { declarationId , start , Token , var , Match , if , }

1282 :	"start"
		- NEIGH  = { start , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { var , declEndToken , start , * , Token , }
		- SUCC   = { declarationId , start , Token , var , Match , if , }

1283 :	"return"
		- NEIGH  = { return , }
		- PARENT = { start , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1284 :	"if"
		- NEIGH  = { declarationId , start , Token , var , Match , if , }
		- PARENT = { }
		- CHILD  = { tokAt , start , }
		- PRED   = { start , ! , if , }
		- SUCC   = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }

1284 :	"Token"
		- NEIGH  = { declarationId , start , Token , var , Match , if , }
		- PARENT = { }
		- CHILD  = { tokAt , start , }
		- PRED   = { start , ! , if , }
		- SUCC   = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }

1284 :	"Match"
		- NEIGH  = { declarationId , start , Token , var , Match , if , }
		- PARENT = { }
		- CHILD  = { tokAt , start , }
		- PRED   = { start , ! , if , }
		- SUCC   = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }

1284 :	"start"
		- NEIGH  = { declarationId , start , Token , var , Match , if , }
		- PARENT = { }
		- CHILD  = { tokAt , start , }
		- PRED   = { start , ! , if , }
		- SUCC   = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }

1284 :	"var"
		- NEIGH  = { declarationId , start , Token , var , Match , if , }
		- PARENT = { }
		- CHILD  = { tokAt , start , }
		- PRED   = { start , ! , if , }
		- SUCC   = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }

1284 :	"declarationId"
		- NEIGH  = { declarationId , start , Token , var , Match , if , }
		- PARENT = { }
		- CHILD  = { tokAt , start , }
		- PRED   = { start , ! , if , }
		- SUCC   = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }

1285 :	"start"
		- NEIGH  = { tokAt , start , }
		- PARENT = { declarationId , start , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1285 :	"start"
		- NEIGH  = { tokAt , start , }
		- PARENT = { declarationId , start , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1285 :	"tokAt"
		- NEIGH  = { tokAt , start , }
		- PARENT = { declarationId , start , Token , var , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1286 :	"return"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"!"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"Token"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"findmatch"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"start"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"next"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"var"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"scope"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"bodyEnd"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"var"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1286 :	"declarationId"
		- NEIGH  = { bodyEnd , scope , var , return , start , declarationId , findmatch , next , Token , ! , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declarationId , start , Token , var , Match , if , }
		- SUCC   = { }

1289 :	"isVariableMutableInInitializer"
		- NEIGH  = { isVariableMutableInInitializer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"start"
		- NEIGH  = { start , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"end"
		- NEIGH  = { end , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"nonneg"
		- NEIGH  = { nonneg , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1289 :	"varid"
		- NEIGH  = { varid , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1291 :	"if"
		- NEIGH  = { start , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { end , ! , if , }

1291 :	"!"
		- NEIGH  = { start , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { end , ! , if , }

1291 :	"start"
		- NEIGH  = { start , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { end , ! , if , }

1292 :	"return"
		- NEIGH  = { return , }
		- PARENT = { start , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1293 :	"if"
		- NEIGH  = { end , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { start , ! , if , }
		- SUCC   = { end , start , != , tok , * , next , Token , for , }

1293 :	"!"
		- NEIGH  = { end , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { start , ! , if , }
		- SUCC   = { end , start , != , tok , * , next , Token , for , }

1293 :	"end"
		- NEIGH  = { end , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { start , ! , if , }
		- SUCC   = { end , start , != , tok , * , next , Token , for , }

1294 :	"return"
		- NEIGH  = { return , }
		- PARENT = { end , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1295 :	"for"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"Token"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"*"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"tok"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"start"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"tok"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"!="
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"end"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"tok"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"tok"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1295 :	"next"
		- NEIGH  = { end , start , != , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { astParent , != , tok , varid , varId , if , }
		- PRED   = { end , ! , if , }
		- SUCC   = { return , }

1296 :	"if"
		- NEIGH  = { != , tok , varid , varId , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , if , }

1296 :	"tok"
		- NEIGH  = { != , tok , varid , varId , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , if , }

1296 :	"varId"
		- NEIGH  = { != , tok , varid , varId , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , if , }

1296 :	"!="
		- NEIGH  = { != , tok , varid , varId , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , if , }

1296 :	"varid"
		- NEIGH  = { != , tok , varid , varId , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , if , }

1297 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { != , tok , varid , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1298 :	"if"
		- NEIGH  = { astParent , tok , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { && , Match , variable , previous , return , astParent , tok , if , memberTok , * , Token , }
		- PRED   = { != , tok , varid , varId , if , }
		- SUCC   = { }

1298 :	"tok"
		- NEIGH  = { astParent , tok , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { && , Match , variable , previous , return , astParent , tok , if , memberTok , * , Token , }
		- PRED   = { != , tok , varid , varId , if , }
		- SUCC   = { }

1298 :	"astParent"
		- NEIGH  = { astParent , tok , if , }
		- PARENT = { end , start , != , tok , * , next , Token , for , }
		- CHILD  = { && , Match , variable , previous , return , astParent , tok , if , memberTok , * , Token , }
		- PRED   = { != , tok , varid , varId , if , }
		- SUCC   = { }

1299 :	"Token"
		- NEIGH  = { previous , astParent , tok , memberTok , * , Token , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , && , if , memberTok , Token , Match , }

1299 :	"*"
		- NEIGH  = { previous , astParent , tok , memberTok , * , Token , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , && , if , memberTok , Token , Match , }

1299 :	"memberTok"
		- NEIGH  = { previous , astParent , tok , memberTok , * , Token , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , && , if , memberTok , Token , Match , }

1299 :	"tok"
		- NEIGH  = { previous , astParent , tok , memberTok , * , Token , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , && , if , memberTok , Token , Match , }

1299 :	"astParent"
		- NEIGH  = { previous , astParent , tok , memberTok , * , Token , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , && , if , memberTok , Token , Match , }

1299 :	"previous"
		- NEIGH  = { previous , astParent , tok , memberTok , * , Token , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { variable , && , if , memberTok , Token , Match , }

1300 :	"if"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1300 :	"Token"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1300 :	"Match"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1300 :	"memberTok"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1300 :	"&&"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1300 :	"memberTok"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1300 :	"variable"
		- NEIGH  = { variable , && , if , memberTok , Token , Match , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { isConst , isReference , variable , ! , if , memberTok , memberVar , * , Variable , }
		- PRED   = { previous , astParent , tok , memberTok , * , Token , }
		- SUCC   = { return , }

1301 :	"Variable"
		- NEIGH  = { variable , memberTok , memberVar , * , Variable , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , memberVar , ! , if , }

1301 :	"*"
		- NEIGH  = { variable , memberTok , memberVar , * , Variable , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , memberVar , ! , if , }

1301 :	"memberVar"
		- NEIGH  = { variable , memberTok , memberVar , * , Variable , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , memberVar , ! , if , }

1301 :	"memberTok"
		- NEIGH  = { variable , memberTok , memberVar , * , Variable , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , memberVar , ! , if , }

1301 :	"variable"
		- NEIGH  = { variable , memberTok , memberVar , * , Variable , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , memberVar , ! , if , }

1302 :	"if"
		- NEIGH  = { isReference , memberVar , ! , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , memberTok , memberVar , * , Variable , }
		- SUCC   = { memberVar , isConst , if , }

1302 :	"!"
		- NEIGH  = { isReference , memberVar , ! , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , memberTok , memberVar , * , Variable , }
		- SUCC   = { memberVar , isConst , if , }

1302 :	"memberVar"
		- NEIGH  = { isReference , memberVar , ! , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , memberTok , memberVar , * , Variable , }
		- SUCC   = { memberVar , isConst , if , }

1302 :	"isReference"
		- NEIGH  = { isReference , memberVar , ! , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { variable , memberTok , memberVar , * , Variable , }
		- SUCC   = { memberVar , isConst , if , }

1303 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isReference , memberVar , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1304 :	"if"
		- NEIGH  = { memberVar , isConst , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { isReference , memberVar , ! , if , }
		- SUCC   = { }

1304 :	"memberVar"
		- NEIGH  = { memberVar , isConst , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { isReference , memberVar , ! , if , }
		- SUCC   = { }

1304 :	"isConst"
		- NEIGH  = { memberVar , isConst , if , }
		- PARENT = { variable , && , if , memberTok , Token , Match , }
		- CHILD  = { continue , }
		- PRED   = { isReference , memberVar , ! , if , }
		- SUCC   = { }

1305 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { memberVar , isConst , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1307 :	"return"
		- NEIGH  = { return , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { variable , && , if , memberTok , Token , Match , }
		- SUCC   = { }

1309 :	"return"
		- NEIGH  = { return , }
		- PARENT = { astParent , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1312 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { end , start , != , tok , * , next , Token , for , }
		- SUCC   = { }

1315 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1315 :	"checkConstVariable"
		- NEIGH  = { checkConstVariable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1317 :	"if"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"!"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"mSettings"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"isEnabled"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"Settings"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"STYLE"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"||"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"mTokenizer"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1317 :	"isC"
		- NEIGH  = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1318 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1320 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1320 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1320 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1320 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1320 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

1322 :	"for"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { constVariableError , declarationId , bodyEnd , findmatch , && , isVolatile , * , mSettings , isAliased , isRValueReference , returnsReference , isArray , isStatic , isGlobal , Token , scope , Function , isReference , nameToken , ! , mTokenizer , function , isCPP , Scope , isVariableChanged , isConst , isArgument , isEnumType , var , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1322 :	"Variable"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { constVariableError , declarationId , bodyEnd , findmatch , && , isVolatile , * , mSettings , isAliased , isRValueReference , returnsReference , isArray , isStatic , isGlobal , Token , scope , Function , isReference , nameToken , ! , mTokenizer , function , isCPP , Scope , isVariableChanged , isConst , isArgument , isEnumType , var , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1322 :	"*"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { constVariableError , declarationId , bodyEnd , findmatch , && , isVolatile , * , mSettings , isAliased , isRValueReference , returnsReference , isArray , isStatic , isGlobal , Token , scope , Function , isReference , nameToken , ! , mTokenizer , function , isCPP , Scope , isVariableChanged , isConst , isArgument , isEnumType , var , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1322 :	"var"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { constVariableError , declarationId , bodyEnd , findmatch , && , isVolatile , * , mSettings , isAliased , isRValueReference , returnsReference , isArray , isStatic , isGlobal , Token , scope , Function , isReference , nameToken , ! , mTokenizer , function , isCPP , Scope , isVariableChanged , isConst , isArgument , isEnumType , var , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1322 :	"symbolDatabase"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { constVariableError , declarationId , bodyEnd , findmatch , && , isVolatile , * , mSettings , isAliased , isRValueReference , returnsReference , isArray , isStatic , isGlobal , Token , scope , Function , isReference , nameToken , ! , mTokenizer , function , isCPP , Scope , isVariableChanged , isConst , isArgument , isEnumType , var , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1322 :	"variableList"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { constVariableError , declarationId , bodyEnd , findmatch , && , isVolatile , * , mSettings , isAliased , isRValueReference , returnsReference , isArray , isStatic , isGlobal , Token , scope , Function , isReference , nameToken , ! , mTokenizer , function , isCPP , Scope , isVariableChanged , isConst , isArgument , isEnumType , var , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1323 :	"if"
		- NEIGH  = { ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isReference , ! , var , if , }

1323 :	"!"
		- NEIGH  = { ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isReference , ! , var , if , }

1323 :	"var"
		- NEIGH  = { ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isReference , ! , var , if , }

1324 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1325 :	"if"
		- NEIGH  = { isReference , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , var , if , }
		- SUCC   = { isRValueReference , var , if , }

1325 :	"!"
		- NEIGH  = { isReference , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , var , if , }
		- SUCC   = { isRValueReference , var , if , }

1325 :	"var"
		- NEIGH  = { isReference , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , var , if , }
		- SUCC   = { isRValueReference , var , if , }

1325 :	"isReference"
		- NEIGH  = { isReference , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , var , if , }
		- SUCC   = { isRValueReference , var , if , }

1326 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isReference , ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1327 :	"if"
		- NEIGH  = { isRValueReference , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isReference , ! , var , if , }
		- SUCC   = { isConst , var , if , }

1327 :	"var"
		- NEIGH  = { isRValueReference , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isReference , ! , var , if , }
		- SUCC   = { isConst , var , if , }

1327 :	"isRValueReference"
		- NEIGH  = { isRValueReference , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isReference , ! , var , if , }
		- SUCC   = { isConst , var , if , }

1328 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isRValueReference , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1329 :	"if"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isRValueReference , var , if , }
		- SUCC   = { scope , ! , var , if , }

1329 :	"var"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isRValueReference , var , if , }
		- SUCC   = { scope , ! , var , if , }

1329 :	"isConst"
		- NEIGH  = { isConst , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isRValueReference , var , if , }
		- SUCC   = { scope , ! , var , if , }

1330 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isConst , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1331 :	"if"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { var , * , scope , Scope , }

1331 :	"!"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { var , * , scope , Scope , }

1331 :	"var"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { var , * , scope , Scope , }

1331 :	"scope"
		- NEIGH  = { scope , ! , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isConst , var , if , }
		- SUCC   = { var , * , scope , Scope , }

1332 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { scope , ! , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1333 :	"Scope"
		- NEIGH  = { var , * , scope , Scope , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { function , scope , ! , if , }

1333 :	"*"
		- NEIGH  = { var , * , scope , Scope , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { function , scope , ! , if , }

1333 :	"scope"
		- NEIGH  = { var , * , scope , Scope , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { function , scope , ! , if , }

1333 :	"var"
		- NEIGH  = { var , * , scope , Scope , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { function , scope , ! , if , }

1333 :	"scope"
		- NEIGH  = { var , * , scope , Scope , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { scope , ! , var , if , }
		- SUCC   = { function , scope , ! , if , }

1334 :	"if"
		- NEIGH  = { function , scope , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { var , * , scope , Scope , }
		- SUCC   = { scope , function , * , Function , }

1334 :	"!"
		- NEIGH  = { function , scope , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { var , * , scope , Scope , }
		- SUCC   = { scope , function , * , Function , }

1334 :	"scope"
		- NEIGH  = { function , scope , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { var , * , scope , Scope , }
		- SUCC   = { scope , function , * , Function , }

1334 :	"function"
		- NEIGH  = { function , scope , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { var , * , scope , Scope , }
		- SUCC   = { scope , function , * , Function , }

1335 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { function , scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1336 :	"Function"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { function , scope , ! , if , }
		- SUCC   = { isArgument , var , if , }

1336 :	"*"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { function , scope , ! , if , }
		- SUCC   = { isArgument , var , if , }

1336 :	"function"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { function , scope , ! , if , }
		- SUCC   = { isArgument , var , if , }

1336 :	"scope"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { function , scope , ! , if , }
		- SUCC   = { isArgument , var , if , }

1336 :	"function"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { function , scope , ! , if , }
		- SUCC   = { isArgument , var , if , }

1337 :	"if"
		- NEIGH  = { isArgument , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { declarationId , scope , isConstructor , var , bodyStart , isUnusedVariable , || , constructorMemberInitialization , && , templateDef , isImplicitlyVirtual , isVariableMutableInInitializer , if , function , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { isGlobal , var , if , }

1337 :	"var"
		- NEIGH  = { isArgument , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { declarationId , scope , isConstructor , var , bodyStart , isUnusedVariable , || , constructorMemberInitialization , && , templateDef , isImplicitlyVirtual , isVariableMutableInInitializer , if , function , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { isGlobal , var , if , }

1337 :	"isArgument"
		- NEIGH  = { isArgument , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { declarationId , scope , isConstructor , var , bodyStart , isUnusedVariable , || , constructorMemberInitialization , && , templateDef , isImplicitlyVirtual , isVariableMutableInInitializer , if , function , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { isGlobal , var , if , }

1338 :	"if"
		- NEIGH  = { || , isImplicitlyVirtual , templateDef , function , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isUnusedVariable , var , if , }

1338 :	"function"
		- NEIGH  = { || , isImplicitlyVirtual , templateDef , function , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isUnusedVariable , var , if , }

1338 :	"isImplicitlyVirtual"
		- NEIGH  = { || , isImplicitlyVirtual , templateDef , function , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isUnusedVariable , var , if , }

1338 :	"||"
		- NEIGH  = { || , isImplicitlyVirtual , templateDef , function , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isUnusedVariable , var , if , }

1338 :	"function"
		- NEIGH  = { || , isImplicitlyVirtual , templateDef , function , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isUnusedVariable , var , if , }

1338 :	"templateDef"
		- NEIGH  = { || , isImplicitlyVirtual , templateDef , function , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isUnusedVariable , var , if , }

1339 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { || , isImplicitlyVirtual , templateDef , function , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1340 :	"if"
		- NEIGH  = { isUnusedVariable , var , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { || , isImplicitlyVirtual , templateDef , function , if , }
		- SUCC   = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }

1340 :	"isUnusedVariable"
		- NEIGH  = { isUnusedVariable , var , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { || , isImplicitlyVirtual , templateDef , function , if , }
		- SUCC   = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }

1340 :	"var"
		- NEIGH  = { isUnusedVariable , var , if , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { || , isImplicitlyVirtual , templateDef , function , if , }
		- SUCC   = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }

1341 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isUnusedVariable , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1342 :	"if"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"function"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"isConstructor"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"&&"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"isVariableMutableInInitializer"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"function"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"constructorMemberInitialization"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"scope"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"bodyStart"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"var"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1342 :	"declarationId"
		- NEIGH  = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { continue , }
		- PRED   = { isUnusedVariable , var , if , }
		- SUCC   = { }

1343 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { declarationId , var , scope , if , isVariableMutableInInitializer , constructorMemberInitialization , && , function , bodyStart , isConstructor , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1345 :	"if"
		- NEIGH  = { isGlobal , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArgument , var , if , }
		- SUCC   = { isStatic , var , if , }

1345 :	"var"
		- NEIGH  = { isGlobal , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArgument , var , if , }
		- SUCC   = { isStatic , var , if , }

1345 :	"isGlobal"
		- NEIGH  = { isGlobal , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArgument , var , if , }
		- SUCC   = { isStatic , var , if , }

1346 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isGlobal , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1347 :	"if"
		- NEIGH  = { isStatic , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isGlobal , var , if , }
		- SUCC   = { isArray , var , if , }

1347 :	"var"
		- NEIGH  = { isStatic , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isGlobal , var , if , }
		- SUCC   = { isArray , var , if , }

1347 :	"isStatic"
		- NEIGH  = { isStatic , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isGlobal , var , if , }
		- SUCC   = { isArray , var , if , }

1348 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isStatic , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1349 :	"if"
		- NEIGH  = { isArray , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isEnumType , var , if , }

1349 :	"var"
		- NEIGH  = { isArray , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isEnumType , var , if , }

1349 :	"isArray"
		- NEIGH  = { isArray , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isStatic , var , if , }
		- SUCC   = { isEnumType , var , if , }

1350 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isArray , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1351 :	"if"
		- NEIGH  = { isEnumType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , var , if , }
		- SUCC   = { isVolatile , var , if , }

1351 :	"var"
		- NEIGH  = { isEnumType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , var , if , }
		- SUCC   = { isVolatile , var , if , }

1351 :	"isEnumType"
		- NEIGH  = { isEnumType , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isArray , var , if , }
		- SUCC   = { isVolatile , var , if , }

1352 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isEnumType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1353 :	"if"
		- NEIGH  = { isVolatile , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isEnumType , var , if , }
		- SUCC   = { isAliased , var , if , }

1353 :	"var"
		- NEIGH  = { isVolatile , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isEnumType , var , if , }
		- SUCC   = { isAliased , var , if , }

1353 :	"isVolatile"
		- NEIGH  = { isVolatile , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isEnumType , var , if , }
		- SUCC   = { isAliased , var , if , }

1354 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isVolatile , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1355 :	"if"
		- NEIGH  = { isAliased , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isVolatile , var , if , }
		- SUCC   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }

1355 :	"isAliased"
		- NEIGH  = { isAliased , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isVolatile , var , if , }
		- SUCC   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }

1355 :	"var"
		- NEIGH  = { isAliased , var , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isVolatile , var , if , }
		- SUCC   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }

1356 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isAliased , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1357 :	"if"
		- NEIGH  = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isAliased , var , if , }
		- SUCC   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }

1357 :	"isVariableChanged"
		- NEIGH  = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isAliased , var , if , }
		- SUCC   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }

1357 :	"var"
		- NEIGH  = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isAliased , var , if , }
		- SUCC   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }

1357 :	"mSettings"
		- NEIGH  = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isAliased , var , if , }
		- SUCC   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }

1357 :	"mTokenizer"
		- NEIGH  = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isAliased , var , if , }
		- SUCC   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }

1357 :	"isCPP"
		- NEIGH  = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isAliased , var , if , }
		- SUCC   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }

1358 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1359 :	"if"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1359 :	"Function"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1359 :	"returnsReference"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1359 :	"function"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1359 :	"&&"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"Token"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"findmatch"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"var"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"nameToken"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"scope"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"bodyEnd"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"var"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1360 :	"declarationId"
		- NEIGH  = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { isCPP , mTokenizer , var , mSettings , isVariableChanged , if , }
		- SUCC   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }

1361 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1363 :	"if"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"Token"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"findmatch"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"var"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"nameToken"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"scope"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"bodyEnd"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"var"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1363 :	"declarationId"
		- NEIGH  = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , var , function , findmatch , Token , && , declarationId , bodyEnd , returnsReference , Function , nameToken , if , }
		- SUCC   = { var , constVariableError , }

1364 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1365 :	"constVariableError"
		- NEIGH  = { var , constVariableError , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- SUCC   = { }

1365 :	"var"
		- NEIGH  = { var , constVariableError , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { bodyEnd , scope , declarationId , findmatch , if , nameToken , Token , var , }
		- SUCC   = { }

1369 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1369 :	"constVariableError"
		- NEIGH  = { constVariableError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1369 :	"Variable"
		- NEIGH  = { Variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1369 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1369 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1371 :	"Token"
		- NEIGH  = { tok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { string , name , std , }

1371 :	"*"
		- NEIGH  = { tok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { string , name , std , }

1371 :	"tok"
		- NEIGH  = { tok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { string , name , std , }

1372 :	"std"
		- NEIGH  = { string , name , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , * , Token , }
		- SUCC   = { id , string , std , }

1372 :	"string"
		- NEIGH  = { string , name , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , * , Token , }
		- SUCC   = { id , string , std , }

1372 :	"name"
		- NEIGH  = { string , name , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , * , Token , }
		- SUCC   = { id , string , std , }

1373 :	"std"
		- NEIGH  = { id , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { string , name , std , }
		- SUCC   = { var , if , }

1373 :	"string"
		- NEIGH  = { id , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { string , name , std , }
		- SUCC   = { var , if , }

1373 :	"id"
		- NEIGH  = { id , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { string , name , std , }
		- SUCC   = { var , if , }

1374 :	"if"
		- NEIGH  = { var , if , }
		- PARENT = { }
		- CHILD  = { isArgument , nameToken , if , name , var , tok , }
		- PRED   = { id , string , std , }
		- SUCC   = { CWE398 , name , + , Severity , style , tok , id , reportError , }

1374 :	"var"
		- NEIGH  = { var , if , }
		- PARENT = { }
		- CHILD  = { isArgument , nameToken , if , name , var , tok , }
		- PRED   = { id , string , std , }
		- SUCC   = { CWE398 , name , + , Severity , style , tok , id , reportError , }

1375 :	"tok"
		- NEIGH  = { nameToken , var , tok , }
		- PARENT = { var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { var , name , }

1375 :	"var"
		- NEIGH  = { nameToken , var , tok , }
		- PARENT = { var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { var , name , }

1375 :	"nameToken"
		- NEIGH  = { nameToken , var , tok , }
		- PARENT = { var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { var , name , }

1376 :	"name"
		- NEIGH  = { var , name , }
		- PARENT = { var , if , }
		- CHILD  = { }
		- PRED   = { nameToken , var , tok , }
		- SUCC   = { isArgument , var , if , }

1376 :	"var"
		- NEIGH  = { var , name , }
		- PARENT = { var , if , }
		- CHILD  = { }
		- PRED   = { nameToken , var , tok , }
		- SUCC   = { isArgument , var , if , }

1376 :	"name"
		- NEIGH  = { var , name , }
		- PARENT = { var , if , }
		- CHILD  = { }
		- PRED   = { nameToken , var , tok , }
		- SUCC   = { isArgument , var , if , }

1377 :	"if"
		- NEIGH  = { isArgument , var , if , }
		- PARENT = { var , if , }
		- CHILD  = { id , }
		- PRED   = { var , name , }
		- SUCC   = { }

1377 :	"var"
		- NEIGH  = { isArgument , var , if , }
		- PARENT = { var , if , }
		- CHILD  = { id , }
		- PRED   = { var , name , }
		- SUCC   = { }

1377 :	"isArgument"
		- NEIGH  = { isArgument , var , if , }
		- PARENT = { var , if , }
		- CHILD  = { id , }
		- PRED   = { var , name , }
		- SUCC   = { }

1378 :	"id"
		- NEIGH  = { id , }
		- PARENT = { isArgument , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1380 :	"reportError"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"tok"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"Severity"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"style"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"+"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"id"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"id"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"+"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"+"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"name"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"+"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1380 :	"CWE398"
		- NEIGH  = { CWE398 , name , + , Severity , style , tok , id , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , if , }
		- SUCC   = { }

1387 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1387 :	"checkCharVariable"
		- NEIGH  = { checkCharVariable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1389 :	"warning"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }

1389 :	"mSettings"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }

1389 :	"isEnabled"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }

1389 :	"Settings"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }

1389 :	"WARNING"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }

1390 :	"portability"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { portability , && , warning , ! , if , }

1390 :	"mSettings"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { portability , && , warning , ! , if , }

1390 :	"isEnabled"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { portability , && , warning , ! , if , }

1390 :	"Settings"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { portability , && , warning , ! , if , }

1390 :	"PORTABILITY"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { portability , && , warning , ! , if , }

1391 :	"if"
		- NEIGH  = { portability , && , warning , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1391 :	"!"
		- NEIGH  = { portability , && , warning , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1391 :	"warning"
		- NEIGH  = { portability , && , warning , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1391 :	"&&"
		- NEIGH  = { portability , && , warning , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1391 :	"!"
		- NEIGH  = { portability , && , warning , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1391 :	"portability"
		- NEIGH  = { portability , && , warning , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1392 :	"return"
		- NEIGH  = { return , }
		- PARENT = { portability , && , warning , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1394 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , && , warning , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1394 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , && , warning , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1394 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , && , warning , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1394 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , && , warning , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1394 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { portability , && , warning , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1395 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1395 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1395 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1395 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1395 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1395 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1396 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1396 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1397 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astIsUnknownSignChar , portability , getValueGE , warning , index , * , next , ! , Token , astOperand2 , isPointer , && , isBinaryOp , isArray , mSettings , variable , tok , astIsSignedChar , if , }
		- PRED   = { }
		- SUCC   = { }

1397 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astIsUnknownSignChar , portability , getValueGE , warning , index , * , next , ! , Token , astOperand2 , isPointer , && , isBinaryOp , isArray , mSettings , variable , tok , astIsSignedChar , if , }
		- PRED   = { }
		- SUCC   = { }

1397 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astIsUnknownSignChar , portability , getValueGE , warning , index , * , next , ! , Token , astOperand2 , isPointer , && , isBinaryOp , isArray , mSettings , variable , tok , astIsSignedChar , if , }
		- PRED   = { }
		- SUCC   = { }

1397 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , astIsUnknownSignChar , portability , getValueGE , warning , index , * , next , ! , Token , astOperand2 , isPointer , && , isBinaryOp , isArray , mSettings , variable , tok , astIsSignedChar , if , }
		- PRED   = { }
		- SUCC   = { }

1398 :	"if"
		- NEIGH  = { variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isPointer , && , isArray , variable , tok , ! , if , }

1398 :	"!"
		- NEIGH  = { variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isPointer , && , isArray , variable , tok , ! , if , }

1398 :	"tok"
		- NEIGH  = { variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isPointer , && , isArray , variable , tok , ! , if , }

1398 :	"variable"
		- NEIGH  = { variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { isPointer , && , isArray , variable , tok , ! , if , }

1399 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { variable , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1400 :	"if"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"!"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"tok"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"variable"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"isArray"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"&&"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"!"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"tok"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"variable"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1400 :	"isPointer"
		- NEIGH  = { isPointer , && , isArray , variable , tok , ! , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { variable , tok , ! , if , }
		- SUCC   = { astOperand2 , tok , Token , next , index , * , }

1401 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isPointer , && , isArray , variable , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1402 :	"Token"
		- NEIGH  = { astOperand2 , tok , Token , next , index , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { isPointer , && , isArray , variable , tok , ! , if , }
		- SUCC   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }

1402 :	"*"
		- NEIGH  = { astOperand2 , tok , Token , next , index , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { isPointer , && , isArray , variable , tok , ! , if , }
		- SUCC   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }

1402 :	"index"
		- NEIGH  = { astOperand2 , tok , Token , next , index , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { isPointer , && , isArray , variable , tok , ! , if , }
		- SUCC   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }

1402 :	"tok"
		- NEIGH  = { astOperand2 , tok , Token , next , index , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { isPointer , && , isArray , variable , tok , ! , if , }
		- SUCC   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }

1402 :	"next"
		- NEIGH  = { astOperand2 , tok , Token , next , index , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { isPointer , && , isArray , variable , tok , ! , if , }
		- SUCC   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }

1402 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , Token , next , index , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { isPointer , && , isArray , variable , tok , ! , if , }
		- SUCC   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }

1403 :	"if"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"warning"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"&&"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"tok"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"variable"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"isArray"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"&&"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"astIsSignedChar"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"index"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"&&"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"index"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"getValueGE"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1403 :	"mSettings"
		- NEIGH  = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , signedCharArrayIndexError , }
		- PRED   = { astOperand2 , tok , Token , next , index , * , }
		- SUCC   = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }

1404 :	"signedCharArrayIndexError"
		- NEIGH  = { tok , signedCharArrayIndexError , }
		- PARENT = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1404 :	"tok"
		- NEIGH  = { tok , signedCharArrayIndexError , }
		- PARENT = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1405 :	"if"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"portability"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"&&"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"astIsUnknownSignChar"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"index"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"&&"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"index"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"getValueGE"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1405 :	"mSettings"
		- NEIGH  = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , unknownSignCharArrayIndexError , }
		- PRED   = { getValueGE , index , mSettings , variable , astIsSignedChar , warning , tok , isArray , && , if , }
		- SUCC   = { }

1406 :	"unknownSignCharArrayIndexError"
		- NEIGH  = { tok , unknownSignCharArrayIndexError , }
		- PARENT = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1406 :	"tok"
		- NEIGH  = { tok , unknownSignCharArrayIndexError , }
		- PARENT = { mSettings , && , astIsUnknownSignChar , portability , getValueGE , index , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1407 :	"if"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"warning"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"&&"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"Token"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"Match"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"tok"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"&&"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"tok"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1407 :	"isBinaryOp"
		- NEIGH  = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { astParent , simpleMatch , Token , && , astOperand1 , tok , astIsSignedChar , if , warn , }
		- PRED   = { }
		- SUCC   = { }

1408 :	"warn"
		- NEIGH  = { warn , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , astIsSignedChar , if , }

1409 :	"if"
		- NEIGH  = { astOperand1 , tok , astIsSignedChar , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { < , >= , intvalue , && , ! , astIsSignedChar , str , if , getMaxValue , astOperand2 , v2 , mSettings , == , astOperand1 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { warn , }
		- SUCC   = { astParent , tok , Token , && , simpleMatch , warn , if , }

1409 :	"astIsSignedChar"
		- NEIGH  = { astOperand1 , tok , astIsSignedChar , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { < , >= , intvalue , && , ! , astIsSignedChar , str , if , getMaxValue , astOperand2 , v2 , mSettings , == , astOperand1 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { warn , }
		- SUCC   = { astParent , tok , Token , && , simpleMatch , warn , if , }

1409 :	"tok"
		- NEIGH  = { astOperand1 , tok , astIsSignedChar , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { < , >= , intvalue , && , ! , astIsSignedChar , str , if , getMaxValue , astOperand2 , v2 , mSettings , == , astOperand1 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { warn , }
		- SUCC   = { astParent , tok , Token , && , simpleMatch , warn , if , }

1409 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , astIsSignedChar , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { < , >= , intvalue , && , ! , astIsSignedChar , str , if , getMaxValue , astOperand2 , v2 , mSettings , == , astOperand1 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { warn , }
		- SUCC   = { astParent , tok , Token , && , simpleMatch , warn , if , }

1410 :	"ValueFlow"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"Value"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"*"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"v1"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"tok"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"astOperand1"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"getValueLE"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"-"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1410 :	"mSettings"
		- NEIGH  = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

1411 :	"ValueFlow"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1411 :	"Value"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1411 :	"*"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1411 :	"v2"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1411 :	"tok"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1411 :	"astOperand2"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1411 :	"getMaxValue"
		- NEIGH  = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1412 :	"if"
		- NEIGH  = { ! , v1 , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PRED   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }

1412 :	"!"
		- NEIGH  = { ! , v1 , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PRED   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }

1412 :	"v1"
		- NEIGH  = { ! , v1 , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PRED   = { getMaxValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }

1413 :	"v1"
		- NEIGH  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1413 :	"tok"
		- NEIGH  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1413 :	"astOperand1"
		- NEIGH  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1413 :	"getValueGE"
		- NEIGH  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1413 :	"mSettings"
		- NEIGH  = { mSettings , astOperand1 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1414 :	"if"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"v1"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"!"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"tok"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"str"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"=="
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"isKnown"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"intvalue"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	">="
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"intvalue"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1414 :	"<"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1415 :	"warn"
		- NEIGH  = { warn , }
		- PARENT = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1416 :	"if"
		- NEIGH  = { astOperand2 , tok , astIsSignedChar , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { < , >= , intvalue , && , ! , str , if , getMaxValue , == , astOperand1 , v2 , mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { }
		- SUCC   = { }

1416 :	"astIsSignedChar"
		- NEIGH  = { astOperand2 , tok , astIsSignedChar , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { < , >= , intvalue , && , ! , str , if , getMaxValue , == , astOperand1 , v2 , mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { }
		- SUCC   = { }

1416 :	"tok"
		- NEIGH  = { astOperand2 , tok , astIsSignedChar , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { < , >= , intvalue , && , ! , str , if , getMaxValue , == , astOperand1 , v2 , mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { }
		- SUCC   = { }

1416 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , astIsSignedChar , if , }
		- PARENT = { astOperand1 , tok , astIsSignedChar , if , }
		- CHILD  = { < , >= , intvalue , && , ! , str , if , getMaxValue , == , astOperand1 , v2 , mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , isKnown , tok , Value , }
		- PRED   = { }
		- SUCC   = { }

1417 :	"ValueFlow"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"Value"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"*"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"v1"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"tok"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"astOperand2"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"getValueLE"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"-"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1417 :	"mSettings"
		- NEIGH  = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }

1418 :	"ValueFlow"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1418 :	"Value"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1418 :	"*"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1418 :	"v2"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1418 :	"tok"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1418 :	"astOperand1"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1418 :	"getMaxValue"
		- NEIGH  = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand2 , - , ValueFlow , v1 , getValueLE , * , tok , Value , }
		- SUCC   = { ! , v1 , if , }

1419 :	"if"
		- NEIGH  = { ! , v1 , if , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PRED   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }

1419 :	"!"
		- NEIGH  = { ! , v1 , if , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PRED   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }

1419 :	"v1"
		- NEIGH  = { ! , v1 , if , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PRED   = { getMaxValue , astOperand1 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }

1420 :	"v1"
		- NEIGH  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1420 :	"tok"
		- NEIGH  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1420 :	"astOperand2"
		- NEIGH  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1420 :	"getValueGE"
		- NEIGH  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1420 :	"mSettings"
		- NEIGH  = { mSettings , astOperand2 , tok , getValueGE , v1 , }
		- PARENT = { ! , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1421 :	"if"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"v1"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"!"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"tok"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"str"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"=="
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"isKnown"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"intvalue"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	">="
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"&&"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"v2"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"intvalue"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1421 :	"<"
		- NEIGH  = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- PARENT = { astOperand2 , tok , astIsSignedChar , if , }
		- CHILD  = { warn , }
		- PRED   = { ! , v1 , if , }
		- SUCC   = { }

1422 :	"warn"
		- NEIGH  = { warn , }
		- PARENT = { < , >= , && , intvalue , tok , isKnown , v2 , str , if , ! , == , v1 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1426 :	"if"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1426 :	"warn"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1426 :	"&&"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1426 :	"Token"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1426 :	"simpleMatch"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1426 :	"tok"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1426 :	"astParent"
		- NEIGH  = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- PARENT = { isBinaryOp , && , Token , tok , warning , Match , if , }
		- CHILD  = { SHORT , Type , ValueType , >= , && , if , valueType , astOperand1 , type , astParent , tok , Token , lhs , * , }
		- PRED   = { astOperand1 , tok , astIsSignedChar , if , }
		- SUCC   = { }

1427 :	"Token"
		- NEIGH  = { astOperand1 , astParent , tok , Token , lhs , * , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }

1427 :	"*"
		- NEIGH  = { astOperand1 , astParent , tok , Token , lhs , * , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }

1427 :	"lhs"
		- NEIGH  = { astOperand1 , astParent , tok , Token , lhs , * , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }

1427 :	"tok"
		- NEIGH  = { astOperand1 , astParent , tok , Token , lhs , * , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }

1427 :	"astParent"
		- NEIGH  = { astOperand1 , astParent , tok , Token , lhs , * , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }

1427 :	"astOperand1"
		- NEIGH  = { astOperand1 , astParent , tok , Token , lhs , * , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }

1428 :	"if"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"lhs"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"&&"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"lhs"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"valueType"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"&&"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"lhs"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"valueType"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"type"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	">="
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"ValueType"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"Type"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1428 :	"SHORT"
		- NEIGH  = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- PARENT = { astParent , tok , Token , && , simpleMatch , warn , if , }
		- CHILD  = { tok , charBitOpError , }
		- PRED   = { astOperand1 , astParent , tok , Token , lhs , * , }
		- SUCC   = { }

1429 :	"charBitOpError"
		- NEIGH  = { tok , charBitOpError , }
		- PARENT = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1429 :	"tok"
		- NEIGH  = { tok , charBitOpError , }
		- PARENT = { SHORT , ValueType , >= , type , Type , && , valueType , lhs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1436 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1436 :	"signedCharArrayIndexError"
		- NEIGH  = { signedCharArrayIndexError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1436 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1436 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1436 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1438 :	"reportError"
		- NEIGH  = { CWE128 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1438 :	"tok"
		- NEIGH  = { CWE128 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1439 :	"Severity"
		- NEIGH  = { CWE128 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1439 :	"warning"
		- NEIGH  = { CWE128 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1444 :	"CWE128"
		- NEIGH  = { CWE128 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1447 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1447 :	"unknownSignCharArrayIndexError"
		- NEIGH  = { unknownSignCharArrayIndexError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1447 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1447 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1447 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1449 :	"reportError"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1449 :	"tok"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1450 :	"Severity"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1450 :	"portability"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1454 :	"CWE758"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1457 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1457 :	"charBitOpError"
		- NEIGH  = { charBitOpError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1457 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1457 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1457 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1459 :	"reportError"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1459 :	"tok"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1460 :	"Severity"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1460 :	"warning"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1468 :	"CWE398"
		- NEIGH  = { CWE398 , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1475 :	"isType"
		- NEIGH  = { isType , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1475 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1475 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1475 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1475 :	"unknown"
		- NEIGH  = { unknown , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1477 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

1477 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

1477 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

1477 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

1478 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1479 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { unknown , tok , isType , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { link , && , tok , simpleMatch , Token , if , }

1479 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { unknown , tok , isType , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { link , && , tok , simpleMatch , Token , if , }

1479 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { unknown , tok , isType , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { link , && , tok , simpleMatch , Token , if , }

1479 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { unknown , tok , isType , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { link , && , tok , simpleMatch , Token , if , }

1480 :	"return"
		- NEIGH  = { unknown , tok , isType , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1480 :	"isType"
		- NEIGH  = { unknown , tok , isType , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1480 :	"tok"
		- NEIGH  = { unknown , tok , isType , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1480 :	"astOperand2"
		- NEIGH  = { unknown , tok , isType , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1480 :	"unknown"
		- NEIGH  = { unknown , tok , isType , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1481 :	"if"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1481 :	"Token"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1481 :	"simpleMatch"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1481 :	"tok"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1481 :	"&&"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1481 :	"tok"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1481 :	"link"
		- NEIGH  = { link , && , tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { tok , && , Token , unknown , Match , if , }

1482 :	"return"
		- NEIGH  = { return , }
		- PARENT = { link , && , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1483 :	"if"
		- NEIGH  = { tok , && , Token , unknown , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , tok , simpleMatch , Token , if , }
		- SUCC   = { return , }

1483 :	"unknown"
		- NEIGH  = { tok , && , Token , unknown , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , tok , simpleMatch , Token , if , }
		- SUCC   = { return , }

1483 :	"&&"
		- NEIGH  = { tok , && , Token , unknown , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , tok , simpleMatch , Token , if , }
		- SUCC   = { return , }

1483 :	"Token"
		- NEIGH  = { tok , && , Token , unknown , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , tok , simpleMatch , Token , if , }
		- SUCC   = { return , }

1483 :	"Match"
		- NEIGH  = { tok , && , Token , unknown , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , tok , simpleMatch , Token , if , }
		- SUCC   = { return , }

1483 :	"tok"
		- NEIGH  = { tok , && , Token , unknown , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , tok , simpleMatch , Token , if , }
		- SUCC   = { return , }

1484 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , && , Token , unknown , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1485 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , && , Token , unknown , Match , if , }
		- SUCC   = { }

1488 :	"isVarDeclOp"
		- NEIGH  = { isVarDeclOp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1488 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1488 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1488 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1490 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , vartok , * , Token , }

1490 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , vartok , * , Token , }

1490 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , astOperand2 , vartok , * , Token , }

1491 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1492 :	"Token"
		- NEIGH  = { tok , astOperand2 , vartok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { if , nameToken , variable , == , && , vartok , }

1492 :	"*"
		- NEIGH  = { tok , astOperand2 , vartok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { if , nameToken , variable , == , && , vartok , }

1492 :	"vartok"
		- NEIGH  = { tok , astOperand2 , vartok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { if , nameToken , variable , == , && , vartok , }

1492 :	"tok"
		- NEIGH  = { tok , astOperand2 , vartok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { if , nameToken , variable , == , && , vartok , }

1492 :	"astOperand2"
		- NEIGH  = { tok , astOperand2 , vartok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { if , nameToken , variable , == , && , vartok , }

1493 :	"if"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"vartok"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"&&"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"vartok"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"variable"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"&&"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"vartok"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"variable"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"nameToken"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"=="
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1493 :	"vartok"
		- NEIGH  = { if , nameToken , variable , == , && , vartok , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , astOperand2 , vartok , * , Token , }
		- SUCC   = { tok , typetok , astOperand1 , * , Token , }

1494 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , nameToken , variable , == , && , vartok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1495 :	"Token"
		- NEIGH  = { tok , typetok , astOperand1 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , nameToken , variable , == , && , vartok , }
		- SUCC   = { Token , isType , typetok , Match , vartok , return , }

1495 :	"*"
		- NEIGH  = { tok , typetok , astOperand1 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , nameToken , variable , == , && , vartok , }
		- SUCC   = { Token , isType , typetok , Match , vartok , return , }

1495 :	"typetok"
		- NEIGH  = { tok , typetok , astOperand1 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , nameToken , variable , == , && , vartok , }
		- SUCC   = { Token , isType , typetok , Match , vartok , return , }

1495 :	"tok"
		- NEIGH  = { tok , typetok , astOperand1 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , nameToken , variable , == , && , vartok , }
		- SUCC   = { Token , isType , typetok , Match , vartok , return , }

1495 :	"astOperand1"
		- NEIGH  = { tok , typetok , astOperand1 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , nameToken , variable , == , && , vartok , }
		- SUCC   = { Token , isType , typetok , Match , vartok , return , }

1496 :	"return"
		- NEIGH  = { Token , isType , typetok , Match , vartok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , typetok , astOperand1 , * , Token , }
		- SUCC   = { }

1496 :	"isType"
		- NEIGH  = { Token , isType , typetok , Match , vartok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , typetok , astOperand1 , * , Token , }
		- SUCC   = { }

1496 :	"typetok"
		- NEIGH  = { Token , isType , typetok , Match , vartok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , typetok , astOperand1 , * , Token , }
		- SUCC   = { }

1496 :	"Token"
		- NEIGH  = { Token , isType , typetok , Match , vartok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , typetok , astOperand1 , * , Token , }
		- SUCC   = { }

1496 :	"Match"
		- NEIGH  = { Token , isType , typetok , Match , vartok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , typetok , astOperand1 , * , Token , }
		- SUCC   = { }

1496 :	"vartok"
		- NEIGH  = { Token , isType , typetok , Match , vartok , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , typetok , astOperand1 , * , Token , }
		- SUCC   = { }

1499 :	"isConstStatement"
		- NEIGH  = { isConstStatement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1499 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1499 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1499 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1501 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { isExpandedMacro , tok , if , }

1501 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { isExpandedMacro , tok , if , }

1501 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { isExpandedMacro , tok , if , }

1502 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1503 :	"if"
		- NEIGH  = { isExpandedMacro , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { tok , Token , Match , if , }

1503 :	"tok"
		- NEIGH  = { isExpandedMacro , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { tok , Token , Match , if , }

1503 :	"isExpandedMacro"
		- NEIGH  = { isExpandedMacro , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { tok , Token , Match , if , }

1504 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isExpandedMacro , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1505 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isExpandedMacro , tok , if , }
		- SUCC   = { tok , Token , Match , if , }

1505 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isExpandedMacro , tok , if , }
		- SUCC   = { tok , Token , Match , if , }

1505 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isExpandedMacro , tok , if , }
		- SUCC   = { tok , Token , Match , if , }

1505 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isExpandedMacro , tok , if , }
		- SUCC   = { tok , Token , Match , if , }

1506 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1507 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }

1507 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }

1507 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }

1507 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }

1508 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1509 :	"if"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1509 :	"Token"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1509 :	"Match"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1509 :	"tok"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1509 :	"&&"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"Token"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"Match"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"tok"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"previous"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"||"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"isVarDeclOp"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1510 :	"tok"
		- NEIGH  = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { && , tok , Token , astIsIntegral , Match , ! , if , }

1511 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1512 :	"if"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"Token"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"Match"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"tok"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"&&"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"!"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"astIsIntegral"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1512 :	"tok"
		- NEIGH  = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isVarDeclOp , || , previous , && , tok , Token , Match , if , }
		- SUCC   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }

1513 :	"return"
		- NEIGH  = { return , }
		- PARENT = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1514 :	"if"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"Token"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"Match"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"tok"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"&&"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"tok"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"astOperand1"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"||"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"tok"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1514 :	"astOperand2"
		- NEIGH  = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { && , tok , Token , astIsIntegral , Match , ! , if , }
		- SUCC   = { tok , simpleMatch , Token , previous , if , }

1515 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1516 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , previous , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- SUCC   = { tok , isCPPCast , if , }

1516 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , previous , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- SUCC   = { tok , isCPPCast , if , }

1516 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , previous , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- SUCC   = { tok , isCPPCast , if , }

1516 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , previous , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- SUCC   = { tok , isCPPCast , if , }

1516 :	"previous"
		- NEIGH  = { tok , simpleMatch , Token , previous , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { || , astOperand1 , && , tok , Token , Match , astOperand2 , if , }
		- SUCC   = { tok , isCPPCast , if , }

1517 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , simpleMatch , Token , previous , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1518 :	"if"
		- NEIGH  = { tok , isCPPCast , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , simpleMatch , Token , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

1518 :	"isCPPCast"
		- NEIGH  = { tok , isCPPCast , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , simpleMatch , Token , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

1518 :	"tok"
		- NEIGH  = { tok , isCPPCast , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , simpleMatch , Token , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

1519 :	"return"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1519 :	"isConstStatement"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1519 :	"tok"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1519 :	"astOperand2"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1520 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , isConstStatement , return , }
		- PRED   = { tok , isCPPCast , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1520 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , isConstStatement , return , }
		- PRED   = { tok , isCPPCast , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1520 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , isConstStatement , return , }
		- PRED   = { tok , isCPPCast , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1520 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok , isConstStatement , return , }
		- PRED   = { tok , isCPPCast , if , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1521 :	"return"
		- NEIGH  = { astOperand1 , tok , isConstStatement , return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1521 :	"isConstStatement"
		- NEIGH  = { astOperand1 , tok , isConstStatement , return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1521 :	"tok"
		- NEIGH  = { astOperand1 , tok , isConstStatement , return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1521 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , isConstStatement , return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1522 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

1522 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

1522 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

1522 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , isConstStatement , astOperand2 , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

1523 :	"return"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1523 :	"isConstStatement"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1523 :	"tok"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1523 :	"astOperand2"
		- NEIGH  = { tok , isConstStatement , astOperand2 , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1524 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1527 :	"isVoidStmt"
		- NEIGH  = { isVoidStmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1527 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1527 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1527 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1529 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , Token , }

1529 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , Token , }

1529 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , Token , }

1529 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , tok2 , * , Token , }

1530 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1531 :	"Token"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { astOperand1 , tok2 , while , }

1531 :	"*"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { astOperand1 , tok2 , while , }

1531 :	"tok2"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { astOperand1 , tok2 , while , }

1531 :	"tok"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { astOperand1 , tok2 , while , }

1532 :	"while"
		- NEIGH  = { astOperand1 , tok2 , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok2 , }
		- PRED   = { tok , tok2 , * , Token , }
		- SUCC   = { link , && , previous , simpleMatch , tok2 , Token , if , }

1532 :	"tok2"
		- NEIGH  = { astOperand1 , tok2 , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok2 , }
		- PRED   = { tok , tok2 , * , Token , }
		- SUCC   = { link , && , previous , simpleMatch , tok2 , Token , if , }

1532 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok2 , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , tok2 , }
		- PRED   = { tok , tok2 , * , Token , }
		- SUCC   = { link , && , previous , simpleMatch , tok2 , Token , if , }

1533 :	"tok2"
		- NEIGH  = { astOperand1 , tok2 , }
		- PARENT = { astOperand1 , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1533 :	"tok2"
		- NEIGH  = { astOperand1 , tok2 , }
		- PARENT = { astOperand1 , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1533 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok2 , }
		- PARENT = { astOperand1 , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1534 :	"if"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"Token"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"simpleMatch"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"tok2"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"previous"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"&&"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"Token"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"simpleMatch"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"tok2"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"previous"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1534 :	"link"
		- NEIGH  = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { astOperand1 , tok2 , while , }
		- SUCC   = { simpleMatch , tok2 , Token , if , }

1535 :	"return"
		- NEIGH  = { return , }
		- PARENT = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1536 :	"if"
		- NEIGH  = { simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- SUCC   = { previous , Match , tok2 , Token , return , }

1536 :	"Token"
		- NEIGH  = { simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- SUCC   = { previous , Match , tok2 , Token , return , }

1536 :	"simpleMatch"
		- NEIGH  = { simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- SUCC   = { previous , Match , tok2 , Token , return , }

1536 :	"tok2"
		- NEIGH  = { simpleMatch , tok2 , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { link , && , previous , simpleMatch , tok2 , Token , if , }
		- SUCC   = { previous , Match , tok2 , Token , return , }

1537 :	"return"
		- NEIGH  = { return , }
		- PARENT = { simpleMatch , tok2 , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1538 :	"return"
		- NEIGH  = { previous , Match , tok2 , Token , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , tok2 , Token , if , }
		- SUCC   = { }

1538 :	"Token"
		- NEIGH  = { previous , Match , tok2 , Token , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , tok2 , Token , if , }
		- SUCC   = { }

1538 :	"Match"
		- NEIGH  = { previous , Match , tok2 , Token , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , tok2 , Token , if , }
		- SUCC   = { }

1538 :	"tok2"
		- NEIGH  = { previous , Match , tok2 , Token , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , tok2 , Token , if , }
		- SUCC   = { }

1538 :	"previous"
		- NEIGH  = { previous , Match , tok2 , Token , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , tok2 , Token , if , }
		- SUCC   = { }

1541 :	"isConstTop"
		- NEIGH  = { isConstTop , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1541 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1541 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1541 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1543 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { astTop , == , tok , if , }

1543 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { astTop , == , tok , if , }

1543 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { astTop , == , tok , if , }

1544 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1545 :	"if"
		- NEIGH  = { astTop , == , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }

1545 :	"tok"
		- NEIGH  = { astTop , == , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }

1545 :	"=="
		- NEIGH  = { astTop , == , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }

1545 :	"tok"
		- NEIGH  = { astTop , == , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }

1545 :	"astTop"
		- NEIGH  = { astTop , == , tok , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }

1546 :	"return"
		- NEIGH  = { return , }
		- PARENT = { astTop , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1547 :	"if"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"Token"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"simpleMatch"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"tok"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"astParent"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"&&"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"tok"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"astTop"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1547 :	"&&"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"Token"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"Match"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"tok"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"astTop"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"previous"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"&&"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"Token"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"simpleMatch"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"tok"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"astTop"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1548 :	"astOperand2"
		- NEIGH  = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- PARENT = { }
		- CHILD  = { astParent , tok , simpleMatch , Token , if , }
		- PRED   = { astTop , == , tok , if , }
		- SUCC   = { return , }

1549 :	"if"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- CHILD  = { astOperand1 , return , astParent , == , tok , astOperand2 , }
		- PRED   = { }
		- SUCC   = { }

1549 :	"Token"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- CHILD  = { astOperand1 , return , astParent , == , tok , astOperand2 , }
		- PRED   = { }
		- SUCC   = { }

1549 :	"simpleMatch"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- CHILD  = { astOperand1 , return , astParent , == , tok , astOperand2 , }
		- PRED   = { }
		- SUCC   = { }

1549 :	"tok"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- CHILD  = { astOperand1 , return , astParent , == , tok , astOperand2 , }
		- PRED   = { }
		- SUCC   = { }

1549 :	"astParent"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- CHILD  = { astOperand1 , return , astParent , == , tok , astOperand2 , }
		- PRED   = { }
		- SUCC   = { }

1549 :	"astParent"
		- NEIGH  = { astParent , tok , simpleMatch , Token , if , }
		- PARENT = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- CHILD  = { astOperand1 , return , astParent , == , tok , astOperand2 , }
		- PRED   = { }
		- SUCC   = { }

1550 :	"return"
		- NEIGH  = { astParent , == , tok , astOperand2 , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1550 :	"tok"
		- NEIGH  = { astParent , == , tok , astOperand2 , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1550 :	"astParent"
		- NEIGH  = { astParent , == , tok , astOperand2 , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1550 :	"astOperand2"
		- NEIGH  = { astParent , == , tok , astOperand2 , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1550 :	"=="
		- NEIGH  = { astParent , == , tok , astOperand2 , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1550 :	"tok"
		- NEIGH  = { astParent , == , tok , astOperand2 , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1552 :	"return"
		- NEIGH  = { astOperand1 , astParent , == , tok , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1552 :	"tok"
		- NEIGH  = { astOperand1 , astParent , == , tok , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1552 :	"astParent"
		- NEIGH  = { astOperand1 , astParent , == , tok , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1552 :	"astOperand1"
		- NEIGH  = { astOperand1 , astParent , == , tok , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1552 :	"=="
		- NEIGH  = { astOperand1 , astParent , == , tok , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1552 :	"tok"
		- NEIGH  = { astOperand1 , astParent , == , tok , return , }
		- PARENT = { astParent , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1554 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Match , astTop , && , astParent , tok , previous , simpleMatch , Token , astOperand2 , if , }
		- SUCC   = { }

1557 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1557 :	"checkIncompleteStatement"
		- NEIGH  = { checkIncompleteStatement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1559 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1559 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1559 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1559 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1559 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1559 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1560 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1562 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1562 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , isIntegral , ! , mTokenizer , isConstStatement , tok , previous , Match , astParent , simpleMatch , astOperand1 , scope , Token , == , nextAfterAstRightmostLeaf , isVoidStmt , rtok , isConstTop , && , isCPP , str , if , || , isExecutable , Scope , mSettings , valueType , * , }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1563 :	"Scope"
		- NEIGH  = { tok , * , scope , Scope , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ! , isExecutable , && , scope , if , }

1563 :	"*"
		- NEIGH  = { tok , * , scope , Scope , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ! , isExecutable , && , scope , if , }

1563 :	"scope"
		- NEIGH  = { tok , * , scope , Scope , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ! , isExecutable , && , scope , if , }

1563 :	"tok"
		- NEIGH  = { tok , * , scope , Scope , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ! , isExecutable , && , scope , if , }

1563 :	"scope"
		- NEIGH  = { tok , * , scope , Scope , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ! , isExecutable , && , scope , if , }

1564 :	"if"
		- NEIGH  = { ! , isExecutable , && , scope , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , scope , Scope , }
		- SUCC   = { tok , isConstTop , ! , if , }

1564 :	"scope"
		- NEIGH  = { ! , isExecutable , && , scope , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , scope , Scope , }
		- SUCC   = { tok , isConstTop , ! , if , }

1564 :	"&&"
		- NEIGH  = { ! , isExecutable , && , scope , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , scope , Scope , }
		- SUCC   = { tok , isConstTop , ! , if , }

1564 :	"!"
		- NEIGH  = { ! , isExecutable , && , scope , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , scope , Scope , }
		- SUCC   = { tok , isConstTop , ! , if , }

1564 :	"scope"
		- NEIGH  = { ! , isExecutable , && , scope , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , scope , Scope , }
		- SUCC   = { tok , isConstTop , ! , if , }

1564 :	"isExecutable"
		- NEIGH  = { ! , isExecutable , && , scope , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , * , scope , Scope , }
		- SUCC   = { tok , isConstTop , ! , if , }

1565 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { ! , isExecutable , && , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1566 :	"if"
		- NEIGH  = { tok , isConstTop , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , isExecutable , && , scope , if , }
		- SUCC   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }

1566 :	"!"
		- NEIGH  = { tok , isConstTop , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , isExecutable , && , scope , if , }
		- SUCC   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }

1566 :	"isConstTop"
		- NEIGH  = { tok , isConstTop , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , isExecutable , && , scope , if , }
		- SUCC   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }

1566 :	"tok"
		- NEIGH  = { tok , isConstTop , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { ! , isExecutable , && , scope , if , }
		- SUCC   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }

1567 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , isConstTop , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1568 :	"Token"
		- NEIGH  = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstTop , ! , if , }
		- SUCC   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }

1568 :	"*"
		- NEIGH  = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstTop , ! , if , }
		- SUCC   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }

1568 :	"rtok"
		- NEIGH  = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstTop , ! , if , }
		- SUCC   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }

1568 :	"nextAfterAstRightmostLeaf"
		- NEIGH  = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstTop , ! , if , }
		- SUCC   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }

1568 :	"tok"
		- NEIGH  = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstTop , ! , if , }
		- SUCC   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }

1569 :	"if"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"!"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"Token"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"simpleMatch"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"tok"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"astParent"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"&&"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"!"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"Token"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"simpleMatch"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"rtok"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1569 :	"&&"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1570 :	"!"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1570 :	"Token"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1570 :	"Match"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1570 :	"tok"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1570 :	"previous"
		- NEIGH  = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , nextAfterAstRightmostLeaf , rtok , * , Token , }
		- SUCC   = { simpleMatch , Token , rtok , if , }

1571 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1573 :	"if"
		- NEIGH  = { simpleMatch , Token , rtok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- SUCC   = { tok , ! , isConstStatement , if , }

1573 :	"Token"
		- NEIGH  = { simpleMatch , Token , rtok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- SUCC   = { tok , ! , isConstStatement , if , }

1573 :	"simpleMatch"
		- NEIGH  = { simpleMatch , Token , rtok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- SUCC   = { tok , ! , isConstStatement , if , }

1573 :	"rtok"
		- NEIGH  = { simpleMatch , Token , rtok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { Match , rtok , && , astParent , tok , previous , simpleMatch , Token , ! , if , }
		- SUCC   = { tok , ! , isConstStatement , if , }

1574 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { simpleMatch , Token , rtok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1575 :	"if"
		- NEIGH  = { tok , ! , isConstStatement , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { simpleMatch , Token , rtok , if , }
		- SUCC   = { tok , isVoidStmt , if , }

1575 :	"!"
		- NEIGH  = { tok , ! , isConstStatement , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { simpleMatch , Token , rtok , if , }
		- SUCC   = { tok , isVoidStmt , if , }

1575 :	"isConstStatement"
		- NEIGH  = { tok , ! , isConstStatement , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { simpleMatch , Token , rtok , if , }
		- SUCC   = { tok , isVoidStmt , if , }

1575 :	"tok"
		- NEIGH  = { tok , ! , isConstStatement , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { simpleMatch , Token , rtok , if , }
		- SUCC   = { tok , isVoidStmt , if , }

1576 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , ! , isConstStatement , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1577 :	"if"
		- NEIGH  = { tok , isVoidStmt , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , isConstStatement , if , }
		- SUCC   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }

1577 :	"isVoidStmt"
		- NEIGH  = { tok , isVoidStmt , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , isConstStatement , if , }
		- SUCC   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }

1577 :	"tok"
		- NEIGH  = { tok , isVoidStmt , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , isConstStatement , if , }
		- SUCC   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }

1578 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , isVoidStmt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1579 :	"if"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"mTokenizer"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"isCPP"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"&&"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"tok"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"str"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"=="
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"&&"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"!"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"tok"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"astOperand1"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"valueType"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"&&"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"tok"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"astOperand1"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"valueType"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1579 :	"isIntegral"
		- NEIGH  = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , isVoidStmt , if , }
		- SUCC   = { Match , Token , tok , inconclusive , }

1581 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1582 :	"inconclusive"
		- NEIGH  = { Match , Token , tok , inconclusive , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- SUCC   = { ! , || , inconclusive , mSettings , if , }

1582 :	"Token"
		- NEIGH  = { Match , Token , tok , inconclusive , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- SUCC   = { ! , || , inconclusive , mSettings , if , }

1582 :	"Match"
		- NEIGH  = { Match , Token , tok , inconclusive , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- SUCC   = { ! , || , inconclusive , mSettings , if , }

1582 :	"tok"
		- NEIGH  = { Match , Token , tok , inconclusive , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { astOperand1 , str , isIntegral , valueType , mTokenizer , tok , == , && , isCPP , ! , if , }
		- SUCC   = { ! , || , inconclusive , mSettings , if , }

1583 :	"if"
		- NEIGH  = { ! , || , inconclusive , mSettings , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isNumber , inconclusive , tok , constStatementError , }
		- PRED   = { Match , Token , tok , inconclusive , }
		- SUCC   = { }

1583 :	"mSettings"
		- NEIGH  = { ! , || , inconclusive , mSettings , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isNumber , inconclusive , tok , constStatementError , }
		- PRED   = { Match , Token , tok , inconclusive , }
		- SUCC   = { }

1583 :	"inconclusive"
		- NEIGH  = { ! , || , inconclusive , mSettings , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isNumber , inconclusive , tok , constStatementError , }
		- PRED   = { Match , Token , tok , inconclusive , }
		- SUCC   = { }

1583 :	"||"
		- NEIGH  = { ! , || , inconclusive , mSettings , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isNumber , inconclusive , tok , constStatementError , }
		- PRED   = { Match , Token , tok , inconclusive , }
		- SUCC   = { }

1583 :	"!"
		- NEIGH  = { ! , || , inconclusive , mSettings , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isNumber , inconclusive , tok , constStatementError , }
		- PRED   = { Match , Token , tok , inconclusive , }
		- SUCC   = { }

1583 :	"inconclusive"
		- NEIGH  = { ! , || , inconclusive , mSettings , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isNumber , inconclusive , tok , constStatementError , }
		- PRED   = { Match , Token , tok , inconclusive , }
		- SUCC   = { }

1584 :	"constStatementError"
		- NEIGH  = { isNumber , inconclusive , tok , constStatementError , }
		- PARENT = { ! , || , inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1584 :	"tok"
		- NEIGH  = { isNumber , inconclusive , tok , constStatementError , }
		- PARENT = { ! , || , inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1584 :	"tok"
		- NEIGH  = { isNumber , inconclusive , tok , constStatementError , }
		- PARENT = { ! , || , inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1584 :	"isNumber"
		- NEIGH  = { isNumber , inconclusive , tok , constStatementError , }
		- PARENT = { ! , || , inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1584 :	"inconclusive"
		- NEIGH  = { isNumber , inconclusive , tok , constStatementError , }
		- PARENT = { ! , || , inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"constStatementError"
		- NEIGH  = { constStatementError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1588 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1590 :	"Token"
		- NEIGH  = { tok , valueTok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isCast , && , valueTok , while , }

1590 :	"*"
		- NEIGH  = { tok , valueTok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isCast , && , valueTok , while , }

1590 :	"valueTok"
		- NEIGH  = { tok , valueTok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isCast , && , valueTok , while , }

1590 :	"tok"
		- NEIGH  = { tok , valueTok , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isCast , && , valueTok , while , }

1591 :	"while"
		- NEIGH  = { isCast , && , valueTok , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , astOperand2 , valueTok , }
		- PRED   = { tok , valueTok , * , Token , }
		- SUCC   = { msg , string , std , }

1591 :	"valueTok"
		- NEIGH  = { isCast , && , valueTok , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , astOperand2 , valueTok , }
		- PRED   = { tok , valueTok , * , Token , }
		- SUCC   = { msg , string , std , }

1591 :	"&&"
		- NEIGH  = { isCast , && , valueTok , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , astOperand2 , valueTok , }
		- PRED   = { tok , valueTok , * , Token , }
		- SUCC   = { msg , string , std , }

1591 :	"valueTok"
		- NEIGH  = { isCast , && , valueTok , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , astOperand2 , valueTok , }
		- PRED   = { tok , valueTok , * , Token , }
		- SUCC   = { msg , string , std , }

1591 :	"isCast"
		- NEIGH  = { isCast , && , valueTok , while , }
		- PARENT = { }
		- CHILD  = { astOperand1 , astOperand2 , valueTok , }
		- PRED   = { tok , valueTok , * , Token , }
		- SUCC   = { msg , string , std , }

1592 :	"valueTok"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1592 :	"valueTok"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1592 :	"astOperand2"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1592 :	"valueTok"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1592 :	"astOperand2"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1592 :	"valueTok"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1592 :	"astOperand1"
		- NEIGH  = { astOperand1 , astOperand2 , valueTok , }
		- PARENT = { isCast , && , valueTok , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1594 :	"std"
		- NEIGH  = { msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isCast , && , valueTok , while , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1594 :	"string"
		- NEIGH  = { msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isCast , && , valueTok , while , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1594 :	"msg"
		- NEIGH  = { msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isCast , && , valueTok , while , }
		- SUCC   = { tok , simpleMatch , Token , if , }

1595 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , Token , Match , if , msg , }
		- PRED   = { msg , string , std , }
		- SUCC   = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }

1595 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , Token , Match , if , msg , }
		- PRED   = { msg , string , std , }
		- SUCC   = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }

1595 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , Token , Match , if , msg , }
		- PRED   = { msg , string , std , }
		- SUCC   = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }

1595 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { tok , Token , Match , if , msg , }
		- PRED   = { msg , string , std , }
		- SUCC   = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }

1596 :	"msg"
		- NEIGH  = { msg , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1597 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1597 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1597 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1597 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1598 :	"msg"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1598 :	"+"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1598 :	"tok"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1598 :	"str"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1598 :	"+"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1599 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { valueTok , Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1599 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { valueTok , Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1599 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { valueTok , Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1599 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { valueTok , Match , Token , + , if , str , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1600 :	"msg"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1600 :	"+"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1600 :	"tok"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1600 :	"str"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1600 :	"+"
		- NEIGH  = { str , tok , + , msg , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1601 :	"if"
		- NEIGH  = { valueTok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { isNumber , string , std , valueTok , ! , if , + , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1601 :	"Token"
		- NEIGH  = { valueTok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { isNumber , string , std , valueTok , ! , if , + , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1601 :	"Match"
		- NEIGH  = { valueTok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { isNumber , string , std , valueTok , ! , if , + , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1601 :	"valueTok"
		- NEIGH  = { valueTok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { isNumber , string , std , valueTok , ! , if , + , tok , msg , }
		- PRED   = { }
		- SUCC   = { }

1602 :	"msg"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1602 :	"+"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1602 :	"std"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1602 :	"string"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1602 :	"valueTok"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1602 :	"isNumber"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1602 :	"+"
		- NEIGH  = { isNumber , string , std , valueTok , + , msg , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1603 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { type , return , + , msg , }
		- PRED   = { }
		- SUCC   = { }

1603 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { type , return , + , msg , }
		- PRED   = { }
		- SUCC   = { }

1603 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { valueTok , Token , Match , if , }
		- CHILD  = { type , return , + , msg , }
		- PRED   = { }
		- SUCC   = { }

1604 :	"msg"
		- NEIGH  = { type , + , msg , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1604 :	"+"
		- NEIGH  = { type , + , msg , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1604 :	"type"
		- NEIGH  = { type , + , msg , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1604 :	"+"
		- NEIGH  = { type , + , msg , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1606 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1607 :	"reportError"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1607 :	"tok"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1607 :	"Severity"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1607 :	"warning"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1607 :	"msg"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1607 :	"CWE398"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1607 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE398 , msg , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

1613 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1613 :	"checkZeroDivision"
		- NEIGH  = { checkZeroDivision , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1615 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1615 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { getValue , value , * , isEnabled , Value , ValueFlow , && , if , str , isIntegral , astOperand1 , valueType , mSettings , != , tok , || , astOperand2 , ! , }
		- PRED   = { }
		- SUCC   = { }

1616 :	"if"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"!"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"tok"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"astOperand2"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"||"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"!"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"tok"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1616 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { && , str , != , tok , if , }

1617 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1618 :	"if"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"&&"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"tok"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"str"
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1618 :	"!="
		- NEIGH  = { && , str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { isIntegral , valueType , tok , || , ! , if , }

1619 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { && , str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1620 :	"if"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"!"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"tok"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"valueType"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"||"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"!"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"tok"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"valueType"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1620 :	"isIntegral"
		- NEIGH  = { isIntegral , valueType , tok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { && , str , != , tok , if , }
		- SUCC   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }

1621 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isIntegral , valueType , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1624 :	"ValueFlow"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1624 :	"Value"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1624 :	"*"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1624 :	"value"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1624 :	"tok"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1624 :	"astOperand2"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1624 :	"getValue"
		- NEIGH  = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isIntegral , valueType , tok , || , ! , if , }
		- SUCC   = { isEnabled , mSettings , && , value , if , }

1625 :	"if"
		- NEIGH  = { isEnabled , mSettings , && , value , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , value , zerodivError , }
		- PRED   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- SUCC   = { }

1625 :	"value"
		- NEIGH  = { isEnabled , mSettings , && , value , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , value , zerodivError , }
		- PRED   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- SUCC   = { }

1625 :	"&&"
		- NEIGH  = { isEnabled , mSettings , && , value , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , value , zerodivError , }
		- PRED   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- SUCC   = { }

1625 :	"mSettings"
		- NEIGH  = { isEnabled , mSettings , && , value , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , value , zerodivError , }
		- PRED   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- SUCC   = { }

1625 :	"isEnabled"
		- NEIGH  = { isEnabled , mSettings , && , value , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , value , zerodivError , }
		- PRED   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- SUCC   = { }

1625 :	"value"
		- NEIGH  = { isEnabled , mSettings , && , value , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , value , zerodivError , }
		- PRED   = { getValue , astOperand2 , value , * , tok , Value , ValueFlow , }
		- SUCC   = { }

1626 :	"zerodivError"
		- NEIGH  = { tok , value , zerodivError , }
		- PARENT = { isEnabled , mSettings , && , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1626 :	"tok"
		- NEIGH  = { tok , value , zerodivError , }
		- PARENT = { isEnabled , mSettings , && , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1626 :	"value"
		- NEIGH  = { tok , value , zerodivError , }
		- PARENT = { isEnabled , mSettings , && , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"zerodivError"
		- NEIGH  = { zerodivError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1630 :	"value"
		- NEIGH  = { value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1632 :	"if"
		- NEIGH  = { && , tok , ! , value , if , }
		- PARENT = { }
		- CHILD  = { + , return , ValueFlow , CWE369 , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PRED   = { }
		- SUCC   = { value , tok , getErrorPath , errorPath , ErrorPath , }

1632 :	"!"
		- NEIGH  = { && , tok , ! , value , if , }
		- PARENT = { }
		- CHILD  = { + , return , ValueFlow , CWE369 , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PRED   = { }
		- SUCC   = { value , tok , getErrorPath , errorPath , ErrorPath , }

1632 :	"tok"
		- NEIGH  = { && , tok , ! , value , if , }
		- PARENT = { }
		- CHILD  = { + , return , ValueFlow , CWE369 , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PRED   = { }
		- SUCC   = { value , tok , getErrorPath , errorPath , ErrorPath , }

1632 :	"&&"
		- NEIGH  = { && , tok , ! , value , if , }
		- PARENT = { }
		- CHILD  = { + , return , ValueFlow , CWE369 , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PRED   = { }
		- SUCC   = { value , tok , getErrorPath , errorPath , ErrorPath , }

1632 :	"!"
		- NEIGH  = { && , tok , ! , value , if , }
		- PARENT = { }
		- CHILD  = { + , return , ValueFlow , CWE369 , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PRED   = { }
		- SUCC   = { value , tok , getErrorPath , errorPath , ErrorPath , }

1632 :	"value"
		- NEIGH  = { && , tok , ! , value , if , }
		- PARENT = { }
		- CHILD  = { + , return , ValueFlow , CWE369 , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PRED   = { }
		- SUCC   = { value , tok , getErrorPath , errorPath , ErrorPath , }

1633 :	"reportError"
		- NEIGH  = { CWE369 , error , tok , Severity , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }

1633 :	"tok"
		- NEIGH  = { CWE369 , error , tok , Severity , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }

1633 :	"Severity"
		- NEIGH  = { CWE369 , error , tok , Severity , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }

1633 :	"error"
		- NEIGH  = { CWE369 , error , tok , Severity , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }

1633 :	"CWE369"
		- NEIGH  = { CWE369 , error , tok , Severity , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }

1634 :	"reportError"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"tok"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"Severity"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"error"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"ValueFlow"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"eitherTheConditionIsRedundant"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"+"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1634 :	"CWE369"
		- NEIGH  = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , error , tok , Severity , reportError , }
		- SUCC   = { return , }

1635 :	"return"
		- NEIGH  = { return , }
		- PARENT = { && , tok , ! , value , if , }
		- CHILD  = { }
		- PRED   = { CWE369 , + , ValueFlow , error , tok , Severity , eitherTheConditionIsRedundant , reportError , }
		- SUCC   = { }

1638 :	"ErrorPath"
		- NEIGH  = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , tok , ! , value , if , }
		- SUCC   = { errmsg , ostringstream , std , }

1638 :	"errorPath"
		- NEIGH  = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , tok , ! , value , if , }
		- SUCC   = { errmsg , ostringstream , std , }

1638 :	"getErrorPath"
		- NEIGH  = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , tok , ! , value , if , }
		- SUCC   = { errmsg , ostringstream , std , }

1638 :	"tok"
		- NEIGH  = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , tok , ! , value , if , }
		- SUCC   = { errmsg , ostringstream , std , }

1638 :	"value"
		- NEIGH  = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , tok , ! , value , if , }
		- SUCC   = { errmsg , ostringstream , std , }

1640 :	"std"
		- NEIGH  = { errmsg , ostringstream , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { condition , value , if , }

1640 :	"ostringstream"
		- NEIGH  = { errmsg , ostringstream , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { condition , value , if , }

1640 :	"errmsg"
		- NEIGH  = { errmsg , ostringstream , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { condition , value , if , }

1641 :	"if"
		- NEIGH  = { condition , value , if , }
		- PARENT = { }
		- CHILD  = { condition , value , eitherTheConditionIsRedundant , ValueFlow , << , linenr , errmsg , tok , line , }
		- PRED   = { errmsg , ostringstream , std , }
		- SUCC   = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }

1641 :	"value"
		- NEIGH  = { condition , value , if , }
		- PARENT = { }
		- CHILD  = { condition , value , eitherTheConditionIsRedundant , ValueFlow , << , linenr , errmsg , tok , line , }
		- PRED   = { errmsg , ostringstream , std , }
		- SUCC   = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }

1641 :	"condition"
		- NEIGH  = { condition , value , if , }
		- PARENT = { }
		- CHILD  = { condition , value , eitherTheConditionIsRedundant , ValueFlow , << , linenr , errmsg , tok , line , }
		- PRED   = { errmsg , ostringstream , std , }
		- SUCC   = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }

1642 :	"line"
		- NEIGH  = { linenr , tok , line , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }

1642 :	"tok"
		- NEIGH  = { linenr , tok , line , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }

1642 :	"tok"
		- NEIGH  = { linenr , tok , line , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }

1642 :	"linenr"
		- NEIGH  = { linenr , tok , line , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }

1643 :	"errmsg"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1643 :	"<<"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1643 :	"ValueFlow"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1643 :	"eitherTheConditionIsRedundant"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1643 :	"value"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1643 :	"condition"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1644 :	"<<"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1644 :	"<<"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1644 :	"line"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1644 :	"<<"
		- NEIGH  = { line , condition , eitherTheConditionIsRedundant , value , ValueFlow , << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { linenr , tok , line , }
		- SUCC   = { }

1646 :	"errmsg"
		- NEIGH  = { << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1646 :	"<<"
		- NEIGH  = { << , errmsg , }
		- PARENT = { condition , value , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1648 :	"reportError"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1648 :	"errorPath"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1649 :	"value"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1649 :	"errorSeverity"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1649 :	"Severity"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1649 :	"error"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1649 :	"Severity"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1649 :	"warning"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1650 :	"value"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1650 :	"condition"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1651 :	"errmsg"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1651 :	"str"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1651 :	"CWE369"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1651 :	"value"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1651 :	"isInconclusive"
		- NEIGH  = { isInconclusive , CWE369 , str , errmsg , warning , error , errorSeverity , condition , errorPath , Severity , value , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { condition , value , if , }
		- SUCC   = { }

1659 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1659 :	"checkNanInArithmeticExpression"
		- NEIGH  = { checkNanInArithmeticExpression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1661 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1661 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1661 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1661 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1661 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1661 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

1662 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1663 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1663 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , astParent , Match , Token , astOperand2 , if , ! , str , != , tok , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

1664 :	"if"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , Token , if , ! , Match , }

1664 :	"tok"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , Token , if , ! , Match , }

1664 :	"str"
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , Token , if , ! , Match , }

1664 :	"!="
		- NEIGH  = { str , != , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astParent , tok , Token , if , ! , Match , }

1665 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { str , != , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1666 :	"if"
		- NEIGH  = { astParent , tok , Token , if , ! , Match , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , tok , simpleMatch , Token , if , }

1666 :	"!"
		- NEIGH  = { astParent , tok , Token , if , ! , Match , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , tok , simpleMatch , Token , if , }

1666 :	"Token"
		- NEIGH  = { astParent , tok , Token , if , ! , Match , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , tok , simpleMatch , Token , if , }

1666 :	"Match"
		- NEIGH  = { astParent , tok , Token , if , ! , Match , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , tok , simpleMatch , Token , if , }

1666 :	"tok"
		- NEIGH  = { astParent , tok , Token , if , ! , Match , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , tok , simpleMatch , Token , if , }

1666 :	"astParent"
		- NEIGH  = { astParent , tok , Token , if , ! , Match , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { str , != , tok , if , }
		- SUCC   = { astOperand2 , tok , simpleMatch , Token , if , }

1667 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astParent , tok , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1668 :	"if"
		- NEIGH  = { astOperand2 , tok , simpleMatch , Token , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , nanInArithmeticExpressionError , }
		- PRED   = { astParent , tok , Token , if , ! , Match , }
		- SUCC   = { }

1668 :	"Token"
		- NEIGH  = { astOperand2 , tok , simpleMatch , Token , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , nanInArithmeticExpressionError , }
		- PRED   = { astParent , tok , Token , if , ! , Match , }
		- SUCC   = { }

1668 :	"simpleMatch"
		- NEIGH  = { astOperand2 , tok , simpleMatch , Token , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , nanInArithmeticExpressionError , }
		- PRED   = { astParent , tok , Token , if , ! , Match , }
		- SUCC   = { }

1668 :	"tok"
		- NEIGH  = { astOperand2 , tok , simpleMatch , Token , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , nanInArithmeticExpressionError , }
		- PRED   = { astParent , tok , Token , if , ! , Match , }
		- SUCC   = { }

1668 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , simpleMatch , Token , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { tok , nanInArithmeticExpressionError , }
		- PRED   = { astParent , tok , Token , if , ! , Match , }
		- SUCC   = { }

1669 :	"nanInArithmeticExpressionError"
		- NEIGH  = { tok , nanInArithmeticExpressionError , }
		- PARENT = { astOperand2 , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1669 :	"tok"
		- NEIGH  = { tok , nanInArithmeticExpressionError , }
		- PARENT = { astOperand2 , tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1673 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1673 :	"nanInArithmeticExpressionError"
		- NEIGH  = { nanInArithmeticExpressionError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1673 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1673 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1673 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1675 :	"reportError"
		- NEIGH  = { CWE369 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1675 :	"tok"
		- NEIGH  = { CWE369 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1675 :	"Severity"
		- NEIGH  = { CWE369 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1675 :	"style"
		- NEIGH  = { CWE369 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1678 :	"CWE369"
		- NEIGH  = { CWE369 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1684 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1684 :	"checkMisusedScopedObject"
		- NEIGH  = { checkMisusedScopedObject , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1687 :	"if"
		- NEIGH  = { isC , mTokenizer , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1687 :	"mTokenizer"
		- NEIGH  = { isC , mTokenizer , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1687 :	"isC"
		- NEIGH  = { isC , mTokenizer , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { Settings , STYLE , isEnabled , mSettings , ! , if , }

1688 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isC , mTokenizer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1690 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isC , mTokenizer , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1690 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isC , mTokenizer , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1690 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isC , mTokenizer , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1690 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isC , mTokenizer , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1690 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isC , mTokenizer , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1690 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isC , mTokenizer , if , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1691 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1693 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1693 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1693 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1693 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1693 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1694 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1694 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1694 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1694 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1694 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1694 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1695 :	"for"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"Token"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"*"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"bodyStart"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"&&"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"!="
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"scope"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"bodyEnd"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"tok"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1695 :	"next"
		- NEIGH  = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"if"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"next"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"type"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"||"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"next"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"function"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"&&"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"next"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"function"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1696 :	"isConstructor"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1697 :	"&&"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1697 :	"Token"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1697 :	"Match"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1697 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1698 :	"&&"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1698 :	"Token"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1698 :	"Match"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1698 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1698 :	"linkAt"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1699 :	"&&"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1699 :	"!"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1699 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1699 :	"next"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1699 :	"function"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1699 :	"||"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1700 :	"tok"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1700 :	"next"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1700 :	"function"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1700 :	"isConstructor"
		- NEIGH  = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- PARENT = { && , scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { str , next , misusedScopeObjectError , tok , }
		- PRED   = { }
		- SUCC   = { }

1701 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok , misusedScopeObjectError , }

1701 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok , misusedScopeObjectError , }

1701 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok , misusedScopeObjectError , }

1702 :	"misusedScopeObjectError"
		- NEIGH  = { str , tok , misusedScopeObjectError , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { next , tok , }
		- SUCC   = { next , tok , }

1702 :	"tok"
		- NEIGH  = { str , tok , misusedScopeObjectError , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { next , tok , }
		- SUCC   = { next , tok , }

1702 :	"tok"
		- NEIGH  = { str , tok , misusedScopeObjectError , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { next , tok , }
		- SUCC   = { next , tok , }

1702 :	"str"
		- NEIGH  = { str , tok , misusedScopeObjectError , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { next , tok , }
		- SUCC   = { next , tok , }

1703 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { str , tok , misusedScopeObjectError , }
		- SUCC   = { }

1703 :	"tok"
		- NEIGH  = { next , tok , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { str , tok , misusedScopeObjectError , }
		- SUCC   = { }

1703 :	"next"
		- NEIGH  = { next , tok , }
		- PARENT = { Match , isConstructor , && , || , type , linkAt , function , tok , ! , Token , next , if , }
		- CHILD  = { }
		- PRED   = { str , tok , misusedScopeObjectError , }
		- SUCC   = { }

1709 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"misusedScopeObjectError"
		- NEIGH  = { misusedScopeObjectError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1709 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1711 :	"reportError"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1711 :	"tok"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1711 :	"Severity"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1711 :	"style"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1713 :	"+"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1713 :	"varname"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1713 :	"+"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1714 :	"CWE563"
		- NEIGH  = { CWE563 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1717 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1717 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1717 :	"getSingleExpressionInBlock"
		- NEIGH  = { getSingleExpressionInBlock , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1717 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1717 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1717 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1719 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , top , astTop , * , Token , }

1719 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , top , astTop , * , Token , }

1719 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , top , astTop , * , Token , }

1720 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1721 :	"Token"
		- NEIGH  = { tok , top , astTop , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { top , ! , if , }

1721 :	"*"
		- NEIGH  = { tok , top , astTop , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { top , ! , if , }

1721 :	"top"
		- NEIGH  = { tok , top , astTop , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { top , ! , if , }

1721 :	"tok"
		- NEIGH  = { tok , top , astTop , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { top , ! , if , }

1721 :	"astTop"
		- NEIGH  = { tok , top , astTop , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { top , ! , if , }

1722 :	"if"
		- NEIGH  = { top , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , top , astTop , * , Token , }
		- SUCC   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }

1722 :	"!"
		- NEIGH  = { top , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , top , astTop , * , Token , }
		- SUCC   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }

1722 :	"top"
		- NEIGH  = { top , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { tok , top , astTop , * , Token , }
		- SUCC   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }

1723 :	"return"
		- NEIGH  = { return , }
		- PARENT = { top , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1724 :	"Token"
		- NEIGH  = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { top , ! , if , }
		- SUCC   = { simpleMatch , Token , nextExpression , ! , if , }

1724 :	"*"
		- NEIGH  = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { top , ! , if , }
		- SUCC   = { simpleMatch , Token , nextExpression , ! , if , }

1724 :	"nextExpression"
		- NEIGH  = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { top , ! , if , }
		- SUCC   = { simpleMatch , Token , nextExpression , ! , if , }

1724 :	"nextAfterAstRightmostLeaf"
		- NEIGH  = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { top , ! , if , }
		- SUCC   = { simpleMatch , Token , nextExpression , ! , if , }

1724 :	"top"
		- NEIGH  = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { top , ! , if , }
		- SUCC   = { simpleMatch , Token , nextExpression , ! , if , }

1725 :	"if"
		- NEIGH  = { simpleMatch , Token , nextExpression , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- SUCC   = { top , return , }

1725 :	"!"
		- NEIGH  = { simpleMatch , Token , nextExpression , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- SUCC   = { top , return , }

1725 :	"Token"
		- NEIGH  = { simpleMatch , Token , nextExpression , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- SUCC   = { top , return , }

1725 :	"simpleMatch"
		- NEIGH  = { simpleMatch , Token , nextExpression , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- SUCC   = { top , return , }

1725 :	"nextExpression"
		- NEIGH  = { simpleMatch , Token , nextExpression , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { top , nextAfterAstRightmostLeaf , nextExpression , * , Token , }
		- SUCC   = { top , return , }

1726 :	"return"
		- NEIGH  = { return , }
		- PARENT = { simpleMatch , Token , nextExpression , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1727 :	"return"
		- NEIGH  = { top , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , Token , nextExpression , ! , if , }
		- SUCC   = { }

1727 :	"top"
		- NEIGH  = { top , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { simpleMatch , Token , nextExpression , ! , if , }
		- SUCC   = { }

1734 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1734 :	"checkDuplicateBranch"
		- NEIGH  = { checkDuplicateBranch , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1744 :	"if"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"!"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"mSettings"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"isEnabled"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"Settings"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"STYLE"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"||"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"!"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"mSettings"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1744 :	"inconclusive"
		- NEIGH  = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1745 :	"return"
		- NEIGH  = { return , }
		- PARENT = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1747 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

1747 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

1747 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

1747 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

1747 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , Settings , STYLE , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

1749 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , Token , eIf , bodyEnd , Scope , != , type , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1749 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , Token , eIf , bodyEnd , Scope , != , type , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1749 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , Token , eIf , bodyEnd , Scope , != , type , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1749 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , Token , eIf , bodyEnd , Scope , != , type , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1749 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , Token , eIf , bodyEnd , Scope , != , type , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1749 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { simpleMatch , Token , eIf , bodyEnd , Scope , != , type , scope , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1750 :	"if"
		- NEIGH  = { eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { bodyEnd , scope , simpleMatch , Token , if , }

1750 :	"scope"
		- NEIGH  = { eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { bodyEnd , scope , simpleMatch , Token , if , }

1750 :	"type"
		- NEIGH  = { eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { bodyEnd , scope , simpleMatch , Token , if , }

1750 :	"!="
		- NEIGH  = { eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { bodyEnd , scope , simpleMatch , Token , if , }

1750 :	"Scope"
		- NEIGH  = { eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { bodyEnd , scope , simpleMatch , Token , if , }

1750 :	"eIf"
		- NEIGH  = { eIf , Scope , != , type , scope , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { bodyEnd , scope , simpleMatch , Token , if , }

1751 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eIf , Scope , != , type , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1754 :	"if"
		- NEIGH  = { bodyEnd , scope , simpleMatch , Token , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { && , & , astOperand1 , isCPP , str , || , mTokenizer , ! , branchTop2 , branchTop1 , astOperand2 , isSameExpression , != , errorPath , ErrorPath , tokAt , == , Token , scope , empty , branch2 , std , bodyStart , if , mSettings , * , getSingleExpressionInBlock , macro , next , library , string , for , linkAt , bodyEnd , stringifyList , branch1 , tok , }
		- PRED   = { eIf , Scope , != , type , scope , if , }
		- SUCC   = { }

1754 :	"Token"
		- NEIGH  = { bodyEnd , scope , simpleMatch , Token , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { && , & , astOperand1 , isCPP , str , || , mTokenizer , ! , branchTop2 , branchTop1 , astOperand2 , isSameExpression , != , errorPath , ErrorPath , tokAt , == , Token , scope , empty , branch2 , std , bodyStart , if , mSettings , * , getSingleExpressionInBlock , macro , next , library , string , for , linkAt , bodyEnd , stringifyList , branch1 , tok , }
		- PRED   = { eIf , Scope , != , type , scope , if , }
		- SUCC   = { }

1754 :	"simpleMatch"
		- NEIGH  = { bodyEnd , scope , simpleMatch , Token , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { && , & , astOperand1 , isCPP , str , || , mTokenizer , ! , branchTop2 , branchTop1 , astOperand2 , isSameExpression , != , errorPath , ErrorPath , tokAt , == , Token , scope , empty , branch2 , std , bodyStart , if , mSettings , * , getSingleExpressionInBlock , macro , next , library , string , for , linkAt , bodyEnd , stringifyList , branch1 , tok , }
		- PRED   = { eIf , Scope , != , type , scope , if , }
		- SUCC   = { }

1754 :	"scope"
		- NEIGH  = { bodyEnd , scope , simpleMatch , Token , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { && , & , astOperand1 , isCPP , str , || , mTokenizer , ! , branchTop2 , branchTop1 , astOperand2 , isSameExpression , != , errorPath , ErrorPath , tokAt , == , Token , scope , empty , branch2 , std , bodyStart , if , mSettings , * , getSingleExpressionInBlock , macro , next , library , string , for , linkAt , bodyEnd , stringifyList , branch1 , tok , }
		- PRED   = { eIf , Scope , != , type , scope , if , }
		- SUCC   = { }

1754 :	"bodyEnd"
		- NEIGH  = { bodyEnd , scope , simpleMatch , Token , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { && , & , astOperand1 , isCPP , str , || , mTokenizer , ! , branchTop2 , branchTop1 , astOperand2 , isSameExpression , != , errorPath , ErrorPath , tokAt , == , Token , scope , empty , branch2 , std , bodyStart , if , mSettings , * , getSingleExpressionInBlock , macro , next , library , string , for , linkAt , bodyEnd , stringifyList , branch1 , tok , }
		- PRED   = { eIf , Scope , != , type , scope , if , }
		- SUCC   = { }

1757 :	"macro"
		- NEIGH  = { macro , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }

1758 :	"for"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"Token"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"*"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"tok"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"scope"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"bodyStart"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"tok"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"!="
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"scope"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"bodyEnd"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"linkAt"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"tok"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"tok"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1758 :	"next"
		- NEIGH  = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { isExpandedMacro , tok , if , }
		- PRED   = { macro , }
		- SUCC   = { macro , if , }

1759 :	"if"
		- NEIGH  = { isExpandedMacro , tok , if , }
		- PARENT = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , macro , }
		- PRED   = { }
		- SUCC   = { }

1759 :	"tok"
		- NEIGH  = { isExpandedMacro , tok , if , }
		- PARENT = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , macro , }
		- PRED   = { }
		- SUCC   = { }

1759 :	"isExpandedMacro"
		- NEIGH  = { isExpandedMacro , tok , if , }
		- PARENT = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { break , macro , }
		- PRED   = { }
		- SUCC   = { }

1760 :	"macro"
		- NEIGH  = { macro , }
		- PARENT = { isExpandedMacro , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

1761 :	"break"
		- NEIGH  = { break , }
		- PARENT = { isExpandedMacro , tok , if , }
		- CHILD  = { }
		- PRED   = { macro , }
		- SUCC   = { }

1764 :	"if"
		- NEIGH  = { macro , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- SUCC   = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }

1764 :	"macro"
		- NEIGH  = { macro , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { scope , linkAt , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- SUCC   = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }

1765 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { macro , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1768 :	"std"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"string"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"branch1"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"scope"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"bodyStart"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"next"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"stringifyList"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"scope"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1768 :	"bodyEnd"
		- NEIGH  = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { macro , if , }
		- SUCC   = { empty , branch1 , if , }

1770 :	"if"
		- NEIGH  = { empty , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- SUCC   = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }

1770 :	"branch1"
		- NEIGH  = { empty , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- SUCC   = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }

1770 :	"empty"
		- NEIGH  = { empty , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { bodyEnd , bodyStart , scope , next , string , stringifyList , branch1 , std , }
		- SUCC   = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }

1771 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { empty , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1774 :	"std"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"string"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"branch2"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"scope"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"bodyEnd"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"tokAt"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"stringifyList"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"scope"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"bodyEnd"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1774 :	"linkAt"
		- NEIGH  = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { empty , branch1 , if , }
		- SUCC   = { errorPath , ErrorPath , }

1776 :	"ErrorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- SUCC   = { branch2 , == , branch1 , if , }

1776 :	"errorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { stringifyList , tokAt , linkAt , bodyEnd , scope , branch2 , string , std , }
		- SUCC   = { branch2 , == , branch1 , if , }

1778 :	"if"
		- NEIGH  = { branch2 , == , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }

1778 :	"branch1"
		- NEIGH  = { branch2 , == , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }

1778 :	"=="
		- NEIGH  = { branch2 , == , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }

1778 :	"branch2"
		- NEIGH  = { branch2 , == , branch1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }

1779 :	"duplicateBranchError"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1779 :	"scope"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1779 :	"classDef"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1779 :	"scope"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1779 :	"bodyEnd"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1779 :	"next"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1779 :	"errorPath"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

1780 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { branch2 , == , branch1 , if , }
		- CHILD  = { }
		- PRED   = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- SUCC   = { }

1784 :	"Token"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1784 :	"*"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1784 :	"branchTop1"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1784 :	"getSingleExpressionInBlock"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1784 :	"scope"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1784 :	"bodyStart"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1784 :	"next"
		- NEIGH  = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { branch2 , == , branch1 , if , }
		- SUCC   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }

1785 :	"Token"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1785 :	"*"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1785 :	"branchTop2"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1785 :	"getSingleExpressionInBlock"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1785 :	"scope"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1785 :	"bodyEnd"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1785 :	"tokAt"
		- NEIGH  = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { scope , bodyStart , * , getSingleExpressionInBlock , branchTop1 , next , Token , }
		- SUCC   = { branchTop2 , || , ! , branchTop1 , if , }

1786 :	"if"
		- NEIGH  = { branchTop2 , || , ! , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- SUCC   = { branchTop2 , != , str , branchTop1 , if , }

1786 :	"!"
		- NEIGH  = { branchTop2 , || , ! , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- SUCC   = { branchTop2 , != , str , branchTop1 , if , }

1786 :	"branchTop1"
		- NEIGH  = { branchTop2 , || , ! , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- SUCC   = { branchTop2 , != , str , branchTop1 , if , }

1786 :	"||"
		- NEIGH  = { branchTop2 , || , ! , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- SUCC   = { branchTop2 , != , str , branchTop1 , if , }

1786 :	"!"
		- NEIGH  = { branchTop2 , || , ! , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- SUCC   = { branchTop2 , != , str , branchTop1 , if , }

1786 :	"branchTop2"
		- NEIGH  = { branchTop2 , || , ! , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { tokAt , bodyEnd , scope , * , getSingleExpressionInBlock , branchTop2 , Token , }
		- SUCC   = { branchTop2 , != , str , branchTop1 , if , }

1787 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { branchTop2 , || , ! , branchTop1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1788 :	"if"
		- NEIGH  = { branchTop2 , != , str , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { branchTop2 , || , ! , branchTop1 , if , }
		- SUCC   = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }

1788 :	"branchTop1"
		- NEIGH  = { branchTop2 , != , str , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { branchTop2 , || , ! , branchTop1 , if , }
		- SUCC   = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }

1788 :	"str"
		- NEIGH  = { branchTop2 , != , str , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { branchTop2 , || , ! , branchTop1 , if , }
		- SUCC   = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }

1788 :	"!="
		- NEIGH  = { branchTop2 , != , str , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { branchTop2 , || , ! , branchTop1 , if , }
		- SUCC   = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }

1788 :	"branchTop2"
		- NEIGH  = { branchTop2 , != , str , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { branchTop2 , || , ! , branchTop1 , if , }
		- SUCC   = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }

1788 :	"str"
		- NEIGH  = { branchTop2 , != , str , branchTop1 , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { continue , }
		- PRED   = { branchTop2 , || , ! , branchTop1 , if , }
		- SUCC   = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }

1789 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { branchTop2 , != , str , branchTop1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1790 :	"if"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"isSameExpression"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"mTokenizer"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"isCPP"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"branchTop1"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"astOperand1"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"branchTop2"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"astOperand1"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"mSettings"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"library"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"&"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"errorPath"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1790 :	"&&"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"isSameExpression"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"mTokenizer"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"isCPP"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"branchTop1"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"astOperand2"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"branchTop2"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"astOperand2"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"mSettings"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"library"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"&"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1791 :	"errorPath"
		- NEIGH  = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- PARENT = { bodyEnd , scope , simpleMatch , Token , if , }
		- CHILD  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PRED   = { branchTop2 , != , str , branchTop1 , if , }
		- SUCC   = { }

1792 :	"duplicateBranchError"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1792 :	"scope"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1792 :	"classDef"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1792 :	"scope"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1792 :	"bodyEnd"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1792 :	"next"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1792 :	"errorPath"
		- NEIGH  = { bodyEnd , errorPath , duplicateBranchError , classDef , scope , next , }
		- PARENT = { mSettings , astOperand1 , mTokenizer , & , astOperand2 , branchTop1 , errorPath , library , branchTop2 , && , isSameExpression , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"duplicateBranchError"
		- NEIGH  = { duplicateBranchError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"ErrorPath"
		- NEIGH  = { ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1797 :	"errors"
		- NEIGH  = { errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1799 :	"errors"
		- NEIGH  = { tok2 , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok1 , emplace_back , errors , }

1799 :	"emplace_back"
		- NEIGH  = { tok2 , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok1 , emplace_back , errors , }

1799 :	"tok2"
		- NEIGH  = { tok2 , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok1 , emplace_back , errors , }

1800 :	"errors"
		- NEIGH  = { tok1 , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , emplace_back , errors , }
		- SUCC   = { CWE398 , style , errors , Severity , reportError , }

1800 :	"emplace_back"
		- NEIGH  = { tok1 , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , emplace_back , errors , }
		- SUCC   = { CWE398 , style , errors , Severity , reportError , }

1800 :	"tok1"
		- NEIGH  = { tok1 , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , emplace_back , errors , }
		- SUCC   = { CWE398 , style , errors , Severity , reportError , }

1802 :	"reportError"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , emplace_back , errors , }
		- SUCC   = { }

1802 :	"errors"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , emplace_back , errors , }
		- SUCC   = { }

1802 :	"Severity"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , emplace_back , errors , }
		- SUCC   = { }

1802 :	"style"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , emplace_back , errors , }
		- SUCC   = { }

1805 :	"CWE398"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , emplace_back , errors , }
		- SUCC   = { }

1814 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1814 :	"checkInvalidFree"
		- NEIGH  = { checkInvalidFree , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1816 :	"std"
		- NEIGH  = { > , inconclusive , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { allocation , > , string , < , map , std , }

1816 :	"map"
		- NEIGH  = { > , inconclusive , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { allocation , > , string , < , map , std , }

1816 :	"<"
		- NEIGH  = { > , inconclusive , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { allocation , > , string , < , map , std , }

1816 :	">"
		- NEIGH  = { > , inconclusive , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { allocation , > , string , < , map , std , }

1816 :	"inconclusive"
		- NEIGH  = { > , inconclusive , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { allocation , > , string , < , map , std , }

1817 :	"std"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1817 :	"map"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1817 :	"<"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1817 :	"std"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1817 :	"string"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1817 :	">"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1817 :	"allocation"
		- NEIGH  = { allocation , > , string , < , map , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , inconclusive , < , map , std , }
		- SUCC   = { inconclusive , mSettings , printInconclusive , }

1819 :	"printInconclusive"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { allocation , > , string , < , map , std , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1819 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { allocation , > , string , < , map , std , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1819 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , printInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { allocation , > , string , < , map , std , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1820 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1820 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1820 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1820 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1820 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , printInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1821 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1821 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1821 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1821 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1821 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1821 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

1822 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1822 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1825 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { != , find , tokAt , == , && , end , Token , if , inconclusive , Match , allocation , varId , insert , tok , strAt , make_pair , std , }
		- PRED   = { }
		- SUCC   = { }

1825 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { != , find , tokAt , == , && , end , Token , if , inconclusive , Match , allocation , varId , insert , tok , strAt , make_pair , std , }
		- PRED   = { }
		- SUCC   = { }

1825 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { != , find , tokAt , == , && , end , Token , if , inconclusive , Match , allocation , varId , insert , tok , strAt , make_pair , std , }
		- PRED   = { }
		- SUCC   = { }

1825 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { != , find , tokAt , == , && , end , Token , if , inconclusive , Match , allocation , varId , insert , tok , strAt , make_pair , std , }
		- PRED   = { }
		- SUCC   = { }

1826 :	"allocation"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"insert"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"std"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"make_pair"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"tok"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"varId"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"tok"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1826 :	"strAt"
		- NEIGH  = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , make_pair , std , insert , tok , inconclusive , }

1827 :	"inconclusive"
		- NEIGH  = { varId , make_pair , std , insert , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- SUCC   = { }

1827 :	"insert"
		- NEIGH  = { varId , make_pair , std , insert , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- SUCC   = { }

1827 :	"std"
		- NEIGH  = { varId , make_pair , std , insert , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- SUCC   = { }

1827 :	"make_pair"
		- NEIGH  = { varId , make_pair , std , insert , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- SUCC   = { }

1827 :	"tok"
		- NEIGH  = { varId , make_pair , std , insert , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- SUCC   = { }

1827 :	"varId"
		- NEIGH  = { varId , make_pair , std , insert , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , insert , tok , strAt , make_pair , std , allocation , }
		- SUCC   = { }

1833 :	"if"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1833 :	"Token"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1833 :	"Match"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1833 :	"tok"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1833 :	"&&"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"tok"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"varId"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"=="
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"tok"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"tokAt"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"varId"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1834 :	"&&"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"allocation"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"find"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"tok"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"varId"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"!="
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"allocation"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1835 :	"end"
		- NEIGH  = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { tok , Token , printInconclusive , Match , if , }
		- PRED   = { }
		- SUCC   = { }

1836 :	"if"
		- NEIGH  = { printInconclusive , if , }
		- PARENT = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- CHILD  = { erase , allocation , varId , tok , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

1836 :	"printInconclusive"
		- NEIGH  = { printInconclusive , if , }
		- PARENT = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- CHILD  = { erase , allocation , varId , tok , inconclusive , }
		- PRED   = { }
		- SUCC   = { }

1837 :	"inconclusive"
		- NEIGH  = { varId , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1837 :	"tok"
		- NEIGH  = { varId , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1837 :	"varId"
		- NEIGH  = { varId , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1839 :	"allocation"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1839 :	"erase"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1839 :	"tok"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1839 :	"varId"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1840 :	"inconclusive"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1840 :	"erase"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1840 :	"tok"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1840 :	"varId"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { printInconclusive , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1846 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- CHILD  = { || , Token , if , Match , erase , varId , inconclusive , tok , allocation , }
		- PRED   = { }
		- SUCC   = { }

1846 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- CHILD  = { || , Token , if , Match , erase , varId , inconclusive , tok , allocation , }
		- PRED   = { }
		- SUCC   = { }

1846 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- CHILD  = { || , Token , if , Match , erase , varId , inconclusive , tok , allocation , }
		- PRED   = { }
		- SUCC   = { }

1846 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { find , tokAt , varId , allocation , == , && , != , tok , end , Token , Match , if , }
		- CHILD  = { || , Token , if , Match , erase , varId , inconclusive , tok , allocation , }
		- PRED   = { }
		- SUCC   = { }

1847 :	"allocation"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1847 :	"erase"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1847 :	"tok"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1847 :	"varId"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , erase , tok , inconclusive , }

1848 :	"inconclusive"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1848 :	"erase"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1848 :	"tok"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1848 :	"varId"
		- NEIGH  = { varId , erase , tok , inconclusive , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { }

1853 :	"if"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1853 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1853 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1853 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1853 :	"||"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1854 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1854 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1854 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1854 :	"||"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1855 :	"Token"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1855 :	"Match"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1855 :	"tok"
		- NEIGH  = { || , tok , Token , Match , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , isFunctionConst , library , mSettings , && , Match , var1 , != , if , inconclusive , > , alloc2 , < , var2 , == , Token , end , tokAt , map , std , + , varIndex , varId , find , const_iterator , tok , strAt , ! , alloc1 , }
		- PRED   = { }
		- SUCC   = { }

1857 :	"varIndex"
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1857 :	"tok"
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1857 :	"strAt"
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1857 :	"=="
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1858 :	"tok"
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1858 :	"strAt"
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1858 :	"=="
		- NEIGH  = { strAt , == , tok , varIndex , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , varIndex , tokAt , tok , var1 , }

1859 :	"var1"
		- NEIGH  = { varId , varIndex , tokAt , tok , var1 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , varIndex , }
		- SUCC   = { varId , + , varIndex , tokAt , tok , var2 , }

1859 :	"tok"
		- NEIGH  = { varId , varIndex , tokAt , tok , var1 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , varIndex , }
		- SUCC   = { varId , + , varIndex , tokAt , tok , var2 , }

1859 :	"tokAt"
		- NEIGH  = { varId , varIndex , tokAt , tok , var1 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , varIndex , }
		- SUCC   = { varId , + , varIndex , tokAt , tok , var2 , }

1859 :	"varIndex"
		- NEIGH  = { varId , varIndex , tokAt , tok , var1 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , varIndex , }
		- SUCC   = { varId , + , varIndex , tokAt , tok , var2 , }

1859 :	"varId"
		- NEIGH  = { varId , varIndex , tokAt , tok , var1 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { strAt , == , tok , varIndex , }
		- SUCC   = { varId , + , varIndex , tokAt , tok , var2 , }

1860 :	"var2"
		- NEIGH  = { varId , + , varIndex , tokAt , tok , var2 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , varIndex , tokAt , tok , var1 , }
		- SUCC   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }

1860 :	"tok"
		- NEIGH  = { varId , + , varIndex , tokAt , tok , var2 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , varIndex , tokAt , tok , var1 , }
		- SUCC   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }

1860 :	"tokAt"
		- NEIGH  = { varId , + , varIndex , tokAt , tok , var2 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , varIndex , tokAt , tok , var1 , }
		- SUCC   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }

1860 :	"varIndex"
		- NEIGH  = { varId , + , varIndex , tokAt , tok , var2 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , varIndex , tokAt , tok , var1 , }
		- SUCC   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }

1860 :	"+"
		- NEIGH  = { varId , + , varIndex , tokAt , tok , var2 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , varIndex , tokAt , tok , var1 , }
		- SUCC   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }

1860 :	"varId"
		- NEIGH  = { varId , + , varIndex , tokAt , tok , var2 , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , varIndex , tokAt , tok , var1 , }
		- SUCC   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }

1861 :	"std"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"map"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"<"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	">"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"const_iterator"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"alloc1"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"inconclusive"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"find"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1861 :	"var1"
		- NEIGH  = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { varId , + , varIndex , tokAt , tok , var2 , }
		- SUCC   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }

1862 :	"std"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"map"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"<"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	">"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"const_iterator"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"alloc2"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"inconclusive"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"find"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1862 :	"var2"
		- NEIGH  = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { var1 , find , inconclusive , alloc1 , const_iterator , > , < , map , std , }
		- SUCC   = { end , inconclusive , != , alloc1 , if , }

1863 :	"if"
		- NEIGH  = { end , inconclusive , != , alloc1 , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { inconclusive , if , second , invalidFreeError , alloc1 , end , alloc2 , var1 , allocation , != , tok , }
		- PRED   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- SUCC   = { }

1863 :	"alloc1"
		- NEIGH  = { end , inconclusive , != , alloc1 , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { inconclusive , if , second , invalidFreeError , alloc1 , end , alloc2 , var1 , allocation , != , tok , }
		- PRED   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- SUCC   = { }

1863 :	"!="
		- NEIGH  = { end , inconclusive , != , alloc1 , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { inconclusive , if , second , invalidFreeError , alloc1 , end , alloc2 , var1 , allocation , != , tok , }
		- PRED   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- SUCC   = { }

1863 :	"inconclusive"
		- NEIGH  = { end , inconclusive , != , alloc1 , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { inconclusive , if , second , invalidFreeError , alloc1 , end , alloc2 , var1 , allocation , != , tok , }
		- PRED   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- SUCC   = { }

1863 :	"end"
		- NEIGH  = { end , inconclusive , != , alloc1 , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { inconclusive , if , second , invalidFreeError , alloc1 , end , alloc2 , var1 , allocation , != , tok , }
		- PRED   = { find , inconclusive , alloc2 , const_iterator , var2 , > , < , map , std , }
		- SUCC   = { }

1864 :	"invalidFreeError"
		- NEIGH  = { second , invalidFreeError , alloc1 , var1 , allocation , tok , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1864 :	"tok"
		- NEIGH  = { second , invalidFreeError , alloc1 , var1 , allocation , tok , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1864 :	"allocation"
		- NEIGH  = { second , invalidFreeError , alloc1 , var1 , allocation , tok , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1864 :	"var1"
		- NEIGH  = { second , invalidFreeError , alloc1 , var1 , allocation , tok , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1864 :	"alloc1"
		- NEIGH  = { second , invalidFreeError , alloc1 , var1 , allocation , tok , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1864 :	"second"
		- NEIGH  = { second , invalidFreeError , alloc1 , var1 , allocation , tok , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1865 :	"if"
		- NEIGH  = { inconclusive , != , end , alloc2 , if , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PRED   = { }
		- SUCC   = { }

1865 :	"alloc2"
		- NEIGH  = { inconclusive , != , end , alloc2 , if , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PRED   = { }
		- SUCC   = { }

1865 :	"!="
		- NEIGH  = { inconclusive , != , end , alloc2 , if , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PRED   = { }
		- SUCC   = { }

1865 :	"inconclusive"
		- NEIGH  = { inconclusive , != , end , alloc2 , if , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PRED   = { }
		- SUCC   = { }

1865 :	"end"
		- NEIGH  = { inconclusive , != , end , alloc2 , if , }
		- PARENT = { end , inconclusive , != , alloc1 , if , }
		- CHILD  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PRED   = { }
		- SUCC   = { }

1866 :	"invalidFreeError"
		- NEIGH  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PARENT = { inconclusive , != , end , alloc2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1866 :	"tok"
		- NEIGH  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PARENT = { inconclusive , != , end , alloc2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1866 :	"allocation"
		- NEIGH  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PARENT = { inconclusive , != , end , alloc2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1866 :	"var2"
		- NEIGH  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PARENT = { inconclusive , != , end , alloc2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1866 :	"alloc2"
		- NEIGH  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PARENT = { inconclusive , != , end , alloc2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1866 :	"second"
		- NEIGH  = { second , alloc2 , allocation , tok , var2 , invalidFreeError , }
		- PARENT = { inconclusive , != , end , alloc2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1873 :	"if"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"Token"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"Match"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"tok"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"&&"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"!"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"mSettings"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"library"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"isFunctionConst"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"tok"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1873 :	"str"
		- NEIGH  = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- PARENT = { || , tok , Token , Match , if , }
		- CHILD  = { while , != , linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PRED   = { }
		- SUCC   = { }

1874 :	"Token"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"*"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"tok2"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"Token"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"findmatch"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"tok"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"next"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"tok"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1874 :	"linkAt"
		- NEIGH  = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , tok2 , while , }

1875 :	"while"
		- NEIGH  = { != , tok2 , while , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { findmatch , next , Token , erase , varId , tok2 , inconclusive , linkAt , tok , allocation , }
		- PRED   = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- SUCC   = { }

1875 :	"tok2"
		- NEIGH  = { != , tok2 , while , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { findmatch , next , Token , erase , varId , tok2 , inconclusive , linkAt , tok , allocation , }
		- PRED   = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- SUCC   = { }

1875 :	"!="
		- NEIGH  = { != , tok2 , while , }
		- PARENT = { str , library , mSettings , isFunctionConst , && , tok , Token , Match , ! , if , }
		- CHILD  = { findmatch , next , Token , erase , varId , tok2 , inconclusive , linkAt , tok , allocation , }
		- PRED   = { linkAt , tok , findmatch , tok2 , * , next , Token , }
		- SUCC   = { }

1876 :	"allocation"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , inconclusive , }

1876 :	"erase"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , inconclusive , }

1876 :	"tok"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , inconclusive , }

1876 :	"varId"
		- NEIGH  = { varId , tok , erase , allocation , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok2 , erase , inconclusive , }

1877 :	"inconclusive"
		- NEIGH  = { varId , tok2 , erase , inconclusive , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { linkAt , tok , Token , next , findmatch , tok2 , }

1877 :	"erase"
		- NEIGH  = { varId , tok2 , erase , inconclusive , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { linkAt , tok , Token , next , findmatch , tok2 , }

1877 :	"tok2"
		- NEIGH  = { varId , tok2 , erase , inconclusive , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { linkAt , tok , Token , next , findmatch , tok2 , }

1877 :	"varId"
		- NEIGH  = { varId , tok2 , erase , inconclusive , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok , erase , allocation , }
		- SUCC   = { linkAt , tok , Token , next , findmatch , tok2 , }

1878 :	"tok2"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1878 :	"Token"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1878 :	"findmatch"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1878 :	"tok2"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1878 :	"next"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1878 :	"tok"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1878 :	"linkAt"
		- NEIGH  = { linkAt , tok , Token , next , findmatch , tok2 , }
		- PARENT = { != , tok2 , while , }
		- CHILD  = { }
		- PRED   = { varId , tok2 , erase , inconclusive , }
		- SUCC   = { }

1885 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"invalidFreeError"
		- NEIGH  = { invalidFreeError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"allocation"
		- NEIGH  = { allocation , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1885 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1887 :	"std"
		- NEIGH  = { allocation , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , alloc , if , }

1887 :	"string"
		- NEIGH  = { allocation , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , alloc , if , }

1887 :	"alloc"
		- NEIGH  = { allocation , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , alloc , if , }

1887 :	"allocation"
		- NEIGH  = { allocation , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { != , alloc , if , }

1888 :	"if"
		- NEIGH  = { != , alloc , if , }
		- PARENT = { }
		- CHILD  = { += , alloc , }
		- PRED   = { allocation , string , alloc , std , }
		- SUCC   = { == , deallocated , string , alloc , std , }

1888 :	"alloc"
		- NEIGH  = { != , alloc , if , }
		- PARENT = { }
		- CHILD  = { += , alloc , }
		- PRED   = { allocation , string , alloc , std , }
		- SUCC   = { == , deallocated , string , alloc , std , }

1888 :	"!="
		- NEIGH  = { != , alloc , if , }
		- PARENT = { }
		- CHILD  = { += , alloc , }
		- PRED   = { allocation , string , alloc , std , }
		- SUCC   = { == , deallocated , string , alloc , std , }

1889 :	"alloc"
		- NEIGH  = { += , alloc , }
		- PARENT = { != , alloc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1889 :	"+="
		- NEIGH  = { += , alloc , }
		- PARENT = { != , alloc , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1890 :	"std"
		- NEIGH  = { == , deallocated , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , alloc , if , }
		- SUCC   = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }

1890 :	"string"
		- NEIGH  = { == , deallocated , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , alloc , if , }
		- SUCC   = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }

1890 :	"deallocated"
		- NEIGH  = { == , deallocated , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , alloc , if , }
		- SUCC   = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }

1890 :	"alloc"
		- NEIGH  = { == , deallocated , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , alloc , if , }
		- SUCC   = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }

1890 :	"=="
		- NEIGH  = { == , deallocated , string , alloc , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , alloc , if , }
		- SUCC   = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }

1891 :	"reportError"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"tok"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"Severity"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"error"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"+"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"deallocated"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"+"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"+"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"alloc"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"+"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"+"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"deallocated"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"+"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"CWE"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1891 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE , alloc , + , error , deallocated , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { == , deallocated , string , alloc , std , }
		- SUCC   = { }

1902 :	"notconst"
		- NEIGH  = { notconst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1902 :	"Function"
		- NEIGH  = { Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1902 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1902 :	"func"
		- NEIGH  = { func , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1904 :	"return"
		- NEIGH  = { isConst , func , ! , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1904 :	"!"
		- NEIGH  = { isConst , func , ! , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1904 :	"func"
		- NEIGH  = { isConst , func , ! , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1904 :	"isConst"
		- NEIGH  = { isConst , func , ! , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"getConstFunctions"
		- NEIGH  = { getConstFunctions , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"SymbolDatabase"
		- NEIGH  = { SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"list"
		- NEIGH  = { list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"<"
		- NEIGH  = { < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"Function"
		- NEIGH  = { Function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	">"
		- NEIGH  = { > , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1907 :	"constFunctions"
		- NEIGH  = { constFunctions , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1909 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { ++ , begin , it , iterator , functionList , func , & , functionsByName , > , scope , * , StringFunctionMap , Function , std , list , != , for , end , map , string , < , }
		- PRED   = { }
		- SUCC   = { }

1909 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { ++ , begin , it , iterator , functionList , func , & , functionsByName , > , scope , * , StringFunctionMap , Function , std , list , != , for , end , map , string , < , }
		- PRED   = { }
		- SUCC   = { }

1909 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { ++ , begin , it , iterator , functionList , func , & , functionsByName , > , scope , * , StringFunctionMap , Function , std , list , != , for , end , map , string , < , }
		- PRED   = { }
		- SUCC   = { }

1909 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { ++ , begin , it , iterator , functionList , func , & , functionsByName , > , scope , * , StringFunctionMap , Function , std , list , != , for , end , map , string , < , }
		- PRED   = { }
		- SUCC   = { }

1909 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { ++ , begin , it , iterator , functionList , func , & , functionsByName , > , scope , * , StringFunctionMap , Function , std , list , != , for , end , map , string , < , }
		- PRED   = { }
		- SUCC   = { }

1909 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { ++ , begin , it , iterator , functionList , func , & , functionsByName , > , scope , * , StringFunctionMap , Function , std , list , != , for , end , map , string , < , }
		- PRED   = { }
		- SUCC   = { }

1912 :	"std"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"map"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"<"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"std"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"string"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"std"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"list"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"<"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"Function"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"*"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	">"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	">"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1912 :	"StringFunctionMap"
		- NEIGH  = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { functionsByName , StringFunctionMap , }

1913 :	"StringFunctionMap"
		- NEIGH  = { functionsByName , StringFunctionMap , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- SUCC   = { functionList , scope , func , & , Function , for , }

1913 :	"functionsByName"
		- NEIGH  = { functionsByName , StringFunctionMap , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { > , * , StringFunctionMap , Function , list , string , < , map , std , }
		- SUCC   = { functionList , scope , func , & , Function , for , }

1914 :	"for"
		- NEIGH  = { functionList , scope , func , & , Function , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PRED   = { functionsByName , StringFunctionMap , }
		- SUCC   = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }

1914 :	"Function"
		- NEIGH  = { functionList , scope , func , & , Function , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PRED   = { functionsByName , StringFunctionMap , }
		- SUCC   = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }

1914 :	"&"
		- NEIGH  = { functionList , scope , func , & , Function , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PRED   = { functionsByName , StringFunctionMap , }
		- SUCC   = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }

1914 :	"func"
		- NEIGH  = { functionList , scope , func , & , Function , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PRED   = { functionsByName , StringFunctionMap , }
		- SUCC   = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }

1914 :	"scope"
		- NEIGH  = { functionList , scope , func , & , Function , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PRED   = { functionsByName , StringFunctionMap , }
		- SUCC   = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }

1914 :	"functionList"
		- NEIGH  = { functionList , scope , func , & , Function , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PRED   = { functionsByName , StringFunctionMap , }
		- SUCC   = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }

1915 :	"functionsByName"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1915 :	"func"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1915 :	"tokenDef"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1915 :	"str"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1915 :	"push_back"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1915 :	"&"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1915 :	"func"
		- NEIGH  = { & , push_back , str , func , tokenDef , functionsByName , }
		- PARENT = { functionList , scope , func , & , Function , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1917 :	"for"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1917 :	"StringFunctionMap"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1917 :	"iterator"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1917 :	"it"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1917 :	"functionsByName"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1917 :	"begin"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1918 :	"it"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1918 :	"!="
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1918 :	"functionsByName"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1918 :	"end"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1918 :	"++"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1918 :	"it"
		- NEIGH  = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { notconst , end , if , begin , it , second , nc , find_if , > , < , * , == , const_iterator , std , list , Function , }
		- PRED   = { functionList , scope , func , & , Function , for , }
		- SUCC   = { }

1919 :	"std"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"list"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"<"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"Function"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"*"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	">"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"const_iterator"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"nc"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"std"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"find_if"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"it"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"second"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"begin"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"it"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"second"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"end"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1919 :	"notconst"
		- NEIGH  = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { second , end , == , nc , it , if , }

1920 :	"if"
		- NEIGH  = { second , end , == , nc , it , if , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { second , it , splice , end , constFunctions , }
		- PRED   = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- SUCC   = { }

1920 :	"nc"
		- NEIGH  = { second , end , == , nc , it , if , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { second , it , splice , end , constFunctions , }
		- PRED   = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- SUCC   = { }

1920 :	"=="
		- NEIGH  = { second , end , == , nc , it , if , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { second , it , splice , end , constFunctions , }
		- PRED   = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- SUCC   = { }

1920 :	"it"
		- NEIGH  = { second , end , == , nc , it , if , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { second , it , splice , end , constFunctions , }
		- PRED   = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- SUCC   = { }

1920 :	"second"
		- NEIGH  = { second , end , == , nc , it , if , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { second , it , splice , end , constFunctions , }
		- PRED   = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- SUCC   = { }

1920 :	"end"
		- NEIGH  = { second , end , == , nc , it , if , }
		- PARENT = { ++ , != , functionsByName , end , begin , iterator , StringFunctionMap , it , for , }
		- CHILD  = { second , it , splice , end , constFunctions , }
		- PRED   = { notconst , end , begin , it , second , nc , find_if , > , < , * , const_iterator , std , list , Function , }
		- SUCC   = { }

1922 :	"constFunctions"
		- NEIGH  = { second , it , splice , end , constFunctions , }
		- PARENT = { second , end , == , nc , it , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1922 :	"splice"
		- NEIGH  = { second , it , splice , end , constFunctions , }
		- PARENT = { second , end , == , nc , it , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1922 :	"constFunctions"
		- NEIGH  = { second , it , splice , end , constFunctions , }
		- PARENT = { second , end , == , nc , it , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1922 :	"end"
		- NEIGH  = { second , it , splice , end , constFunctions , }
		- PARENT = { second , end , == , nc , it , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1922 :	"it"
		- NEIGH  = { second , it , splice , end , constFunctions , }
		- PARENT = { second , end , == , nc , it , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1922 :	"second"
		- NEIGH  = { second , it , splice , end , constFunctions , }
		- PARENT = { second , end , == , nc , it , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1929 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1929 :	"checkDuplicateExpression"
		- NEIGH  = { checkDuplicateExpression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1931 :	"styleEnabled"
		- NEIGH  = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }

1931 :	"mSettings"
		- NEIGH  = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }

1931 :	"isEnabled"
		- NEIGH  = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }

1931 :	"Settings"
		- NEIGH  = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }

1931 :	"STYLE"
		- NEIGH  = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }

1932 :	"warningEnabled"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- SUCC   = { warningEnabled , && , styleEnabled , ! , if , }

1932 :	"mSettings"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- SUCC   = { warningEnabled , && , styleEnabled , ! , if , }

1932 :	"isEnabled"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- SUCC   = { warningEnabled , && , styleEnabled , ! , if , }

1932 :	"Settings"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- SUCC   = { warningEnabled , && , styleEnabled , ! , if , }

1932 :	"WARNING"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , isEnabled , mSettings , Settings , styleEnabled , }
		- SUCC   = { warningEnabled , && , styleEnabled , ! , if , }

1933 :	"if"
		- NEIGH  = { warningEnabled , && , styleEnabled , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1933 :	"!"
		- NEIGH  = { warningEnabled , && , styleEnabled , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1933 :	"styleEnabled"
		- NEIGH  = { warningEnabled , && , styleEnabled , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1933 :	"&&"
		- NEIGH  = { warningEnabled , && , styleEnabled , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1933 :	"!"
		- NEIGH  = { warningEnabled , && , styleEnabled , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1933 :	"warningEnabled"
		- NEIGH  = { warningEnabled , && , styleEnabled , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warningEnabled , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

1934 :	"return"
		- NEIGH  = { return , }
		- PARENT = { warningEnabled , && , styleEnabled , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1937 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warningEnabled , && , styleEnabled , ! , if , }
		- SUCC   = { > , < , constFunctions , * , list , Function , std , }

1937 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warningEnabled , && , styleEnabled , ! , if , }
		- SUCC   = { > , < , constFunctions , * , list , Function , std , }

1937 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warningEnabled , && , styleEnabled , ! , if , }
		- SUCC   = { > , < , constFunctions , * , list , Function , std , }

1937 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warningEnabled , && , styleEnabled , ! , if , }
		- SUCC   = { > , < , constFunctions , * , list , Function , std , }

1937 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { warningEnabled , && , styleEnabled , ! , if , }
		- SUCC   = { > , < , constFunctions , * , list , Function , std , }

1939 :	"std"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1939 :	"list"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1939 :	"<"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1939 :	"Function"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1939 :	"*"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1939 :	">"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1939 :	"constFunctions"
		- NEIGH  = { > , < , constFunctions , * , list , Function , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { constFunctions , symbolDatabase , getConstFunctions , }

1940 :	"getConstFunctions"
		- NEIGH  = { constFunctions , symbolDatabase , getConstFunctions , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , < , constFunctions , * , list , Function , std , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1940 :	"symbolDatabase"
		- NEIGH  = { constFunctions , symbolDatabase , getConstFunctions , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , < , constFunctions , * , list , Function , std , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1940 :	"constFunctions"
		- NEIGH  = { constFunctions , symbolDatabase , getConstFunctions , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { > , < , constFunctions , * , list , Function , std , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

1942 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { constFunctions , symbolDatabase , getConstFunctions , }
		- SUCC   = { }

1942 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { constFunctions , symbolDatabase , getConstFunctions , }
		- SUCC   = { }

1942 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { constFunctions , symbolDatabase , getConstFunctions , }
		- SUCC   = { }

1942 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { constFunctions , symbolDatabase , getConstFunctions , }
		- SUCC   = { }

1942 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { constFunctions , symbolDatabase , getConstFunctions , }
		- SUCC   = { }

1942 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { constFunctions , symbolDatabase , getConstFunctions , }
		- SUCC   = { }

1943 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1943 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { == , astOperand1 , errorPath , Match , isOp , && , ErrorPath , ! , Token , if , str , tok , }
		- PRED   = { }
		- SUCC   = { }

1944 :	"if"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"tok"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"str"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"=="
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"&&"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"Token"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"Match"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"tok"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1944 :	"astOperand1"
		- NEIGH  = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { Match , if , tok , findsimplematch , endStatement , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , ErrorPath , }

1945 :	"Token"
		- NEIGH  = { tok , findsimplematch , endStatement , * , Token , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endStatement , Token , Match , if , }

1945 :	"*"
		- NEIGH  = { tok , findsimplematch , endStatement , * , Token , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endStatement , Token , Match , if , }

1945 :	"endStatement"
		- NEIGH  = { tok , findsimplematch , endStatement , * , Token , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endStatement , Token , Match , if , }

1945 :	"Token"
		- NEIGH  = { tok , findsimplematch , endStatement , * , Token , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endStatement , Token , Match , if , }

1945 :	"findsimplematch"
		- NEIGH  = { tok , findsimplematch , endStatement , * , Token , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endStatement , Token , Match , if , }

1945 :	"tok"
		- NEIGH  = { tok , findsimplematch , endStatement , * , Token , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { endStatement , Token , Match , if , }

1946 :	"if"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { tokAt , endStatement , }
		- PRED   = { tok , findsimplematch , endStatement , * , Token , }
		- SUCC   = { endStatement , Token , Match , if , }

1946 :	"Token"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { tokAt , endStatement , }
		- PRED   = { tok , findsimplematch , endStatement , * , Token , }
		- SUCC   = { endStatement , Token , Match , if , }

1946 :	"Match"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { tokAt , endStatement , }
		- PRED   = { tok , findsimplematch , endStatement , * , Token , }
		- SUCC   = { endStatement , Token , Match , if , }

1946 :	"endStatement"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { tokAt , endStatement , }
		- PRED   = { tok , findsimplematch , endStatement , * , Token , }
		- SUCC   = { endStatement , Token , Match , if , }

1947 :	"endStatement"
		- NEIGH  = { tokAt , endStatement , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1947 :	"endStatement"
		- NEIGH  = { tokAt , endStatement , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1947 :	"tokAt"
		- NEIGH  = { tokAt , endStatement , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1949 :	"if"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { expressionString , library , mTokenizer , eType , tokType , next , isCPP , str , || , isSameExpression , var1 , astOperand2 , != , varId , constness , tok , previous , Match , astOperand1 , isArithmeticalOp , if , Token , == , endStatement , var2 , originalTypeName , && , mSettings , valueType , * , pointer , tokAt , nextAssign , }
		- PRED   = { endStatement , Token , Match , if , }
		- SUCC   = { }

1949 :	"Token"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { expressionString , library , mTokenizer , eType , tokType , next , isCPP , str , || , isSameExpression , var1 , astOperand2 , != , varId , constness , tok , previous , Match , astOperand1 , isArithmeticalOp , if , Token , == , endStatement , var2 , originalTypeName , && , mSettings , valueType , * , pointer , tokAt , nextAssign , }
		- PRED   = { endStatement , Token , Match , if , }
		- SUCC   = { }

1949 :	"Match"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { expressionString , library , mTokenizer , eType , tokType , next , isCPP , str , || , isSameExpression , var1 , astOperand2 , != , varId , constness , tok , previous , Match , astOperand1 , isArithmeticalOp , if , Token , == , endStatement , var2 , originalTypeName , && , mSettings , valueType , * , pointer , tokAt , nextAssign , }
		- PRED   = { endStatement , Token , Match , if , }
		- SUCC   = { }

1949 :	"endStatement"
		- NEIGH  = { endStatement , Token , Match , if , }
		- PARENT = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- CHILD  = { expressionString , library , mTokenizer , eType , tokType , next , isCPP , str , || , isSameExpression , var1 , astOperand2 , != , varId , constness , tok , previous , Match , astOperand1 , isArithmeticalOp , if , Token , == , endStatement , var2 , originalTypeName , && , mSettings , valueType , * , pointer , tokAt , nextAssign , }
		- PRED   = { endStatement , Token , Match , if , }
		- SUCC   = { }

1950 :	"Token"
		- NEIGH  = { endStatement , tokAt , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , var1 , astOperand1 , * , Token , }

1950 :	"*"
		- NEIGH  = { endStatement , tokAt , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , var1 , astOperand1 , * , Token , }

1950 :	"nextAssign"
		- NEIGH  = { endStatement , tokAt , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , var1 , astOperand1 , * , Token , }

1950 :	"endStatement"
		- NEIGH  = { endStatement , tokAt , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , var1 , astOperand1 , * , Token , }

1950 :	"tokAt"
		- NEIGH  = { endStatement , tokAt , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , var1 , astOperand1 , * , Token , }

1951 :	"Token"
		- NEIGH  = { tok , var1 , astOperand1 , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endStatement , tokAt , nextAssign , * , Token , }
		- SUCC   = { var2 , astOperand1 , nextAssign , * , Token , }

1951 :	"*"
		- NEIGH  = { tok , var1 , astOperand1 , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endStatement , tokAt , nextAssign , * , Token , }
		- SUCC   = { var2 , astOperand1 , nextAssign , * , Token , }

1951 :	"var1"
		- NEIGH  = { tok , var1 , astOperand1 , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endStatement , tokAt , nextAssign , * , Token , }
		- SUCC   = { var2 , astOperand1 , nextAssign , * , Token , }

1951 :	"tok"
		- NEIGH  = { tok , var1 , astOperand1 , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endStatement , tokAt , nextAssign , * , Token , }
		- SUCC   = { var2 , astOperand1 , nextAssign , * , Token , }

1951 :	"astOperand1"
		- NEIGH  = { tok , var1 , astOperand1 , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { endStatement , tokAt , nextAssign , * , Token , }
		- SUCC   = { var2 , astOperand1 , nextAssign , * , Token , }

1952 :	"Token"
		- NEIGH  = { var2 , astOperand1 , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , var1 , astOperand1 , * , Token , }
		- SUCC   = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }

1952 :	"*"
		- NEIGH  = { var2 , astOperand1 , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , var1 , astOperand1 , * , Token , }
		- SUCC   = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }

1952 :	"var2"
		- NEIGH  = { var2 , astOperand1 , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , var1 , astOperand1 , * , Token , }
		- SUCC   = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }

1952 :	"nextAssign"
		- NEIGH  = { var2 , astOperand1 , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , var1 , astOperand1 , * , Token , }
		- SUCC   = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }

1952 :	"astOperand1"
		- NEIGH  = { var2 , astOperand1 , nextAssign , * , Token , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , var1 , astOperand1 , * , Token , }
		- SUCC   = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }

1953 :	"if"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1953 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1953 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1953 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1953 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1954 :	"Token"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1954 :	"Match"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1954 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1954 :	"previous"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1954 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1955 :	"Token"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1955 :	"Match"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1955 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1955 :	"previous"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1955 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1956 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1956 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1956 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1956 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1956 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1956 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"originalTypeName"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"=="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"originalTypeName"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1957 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"pointer"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"=="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"pointer"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1958 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"constness"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"=="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"valueType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"constness"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1959 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1960 :	"var2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1960 :	"varId"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1960 :	"!="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1960 :	"var1"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1960 :	"varId"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1960 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1961 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1961 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1961 :	"isArithmeticalOp"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1961 :	"||"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1962 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1962 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1962 :	"str"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1962 :	"=="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1962 :	"||"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1963 :	"Token"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1963 :	"Match"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1963 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1963 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1963 :	"previous"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1964 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"next"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"tokType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"!="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"Token"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"eType"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1965 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"isSameExpression"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"mTokenizer"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"isCPP"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"next"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"nextAssign"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"next"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"mSettings"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"library"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1966 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"isSameExpression"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"mTokenizer"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"isCPP"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"nextAssign"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"mSettings"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"library"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1967 :	"&&"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"tok"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"expressionString"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"=="
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"nextAssign"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"astOperand2"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1968 :	"expressionString"
		- NEIGH  = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- PARENT = { endStatement , Token , Match , if , }
		- CHILD  = { astOperand2 , tok , if , next , bodyEnd , && , isUniqueExpression , findsimplematch , ! , Token , != , for , * , scope , var1 , varScope , var2 , Scope , assignTok , assigned , }
		- PRED   = { var2 , astOperand1 , nextAssign , * , Token , }
		- SUCC   = { }

1969 :	"assigned"
		- NEIGH  = { assigned , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varScope , * , scope , var1 , Scope , }

1970 :	"Scope"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"*"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"varScope"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"var1"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"scope"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"var1"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"scope"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1970 :	"scope"
		- NEIGH  = { varScope , * , scope , var1 , Scope , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { }
		- PRED   = { assigned , }
		- SUCC   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }

1971 :	"for"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"Token"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"*"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"assignTok"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"Token"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"findsimplematch"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"var2"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"assignTok"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"&&"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"assignTok"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"!="
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"varScope"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"bodyEnd"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"assignTok"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"assignTok"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1971 :	"next"
		- NEIGH  = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PRED   = { varScope , * , scope , var1 , Scope , }
		- SUCC   = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }

1972 :	"if"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"Token"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"Match"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"assignTok"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"var1"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"varId"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"&&"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"Token"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"Match"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"assignTok"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"var2"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1972 :	"varId"
		- NEIGH  = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { }
		- SUCC   = { var1 , && , assignTok , Token , var2 , varId , Match , if , }

1973 :	"assigned"
		- NEIGH  = { assigned , }
		- PARENT = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1975 :	"if"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"Token"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"Match"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"assignTok"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"var2"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"varId"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"&&"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"Token"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"Match"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"assignTok"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"var1"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1975 :	"varId"
		- NEIGH  = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- PARENT = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- CHILD  = { assigned , }
		- PRED   = { var2 , && , var1 , assignTok , Token , varId , Match , if , }
		- SUCC   = { }

1976 :	"assigned"
		- NEIGH  = { assigned , }
		- PARENT = { var1 , && , assignTok , Token , var2 , varId , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1979 :	"if"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"!"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"assigned"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"&&"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"!"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"isUniqueExpression"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"tok"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1979 :	"astOperand2"
		- NEIGH  = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- PARENT = { expressionString , library , nextAssign , mTokenizer , || , var1 , isSameExpression , != , astOperand2 , previous , tok , eType , next , varId , constness , && , originalTypeName , pointer , Match , var2 , == , Token , mSettings , valueType , tokType , isCPP , str , isArithmeticalOp , if , }
		- CHILD  = { if , var2 , inconclusive , duplicateAssignExpressionError , mSettings , var1 , }
		- PRED   = { varScope , && , bodyEnd , != , var2 , findsimplematch , assignTok , * , next , Token , for , }
		- SUCC   = { }

1980 :	"duplicateAssignExpressionError"
		- NEIGH  = { var2 , var1 , duplicateAssignExpressionError , }
		- PARENT = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1980 :	"var1"
		- NEIGH  = { var2 , var1 , duplicateAssignExpressionError , }
		- PARENT = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1980 :	"var2"
		- NEIGH  = { var2 , var1 , duplicateAssignExpressionError , }
		- PARENT = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1981 :	"if"
		- NEIGH  = { inconclusive , mSettings , if , }
		- PARENT = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- CHILD  = { var2 , var1 , duplicateAssignExpressionError , }
		- PRED   = { }
		- SUCC   = { }

1981 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , if , }
		- PARENT = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- CHILD  = { var2 , var1 , duplicateAssignExpressionError , }
		- PRED   = { }
		- SUCC   = { }

1981 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , if , }
		- PARENT = { tok , isUniqueExpression , && , assigned , astOperand2 , ! , if , }
		- CHILD  = { var2 , var1 , duplicateAssignExpressionError , }
		- PRED   = { }
		- SUCC   = { }

1982 :	"duplicateAssignExpressionError"
		- NEIGH  = { var2 , var1 , duplicateAssignExpressionError , }
		- PARENT = { inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1982 :	"var1"
		- NEIGH  = { var2 , var1 , duplicateAssignExpressionError , }
		- PARENT = { inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1982 :	"var2"
		- NEIGH  = { var2 , var1 , duplicateAssignExpressionError , }
		- PARENT = { inconclusive , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1986 :	"ErrorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- SUCC   = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }

1986 :	"errorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { astOperand1 , Match , Token , == , && , str , tok , if , }
		- SUCC   = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }

1987 :	"if"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"tok"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"isOp"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"&&"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"tok"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"astOperand1"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"&&"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"!"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"Token"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"Match"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1987 :	"tok"
		- NEIGH  = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { & , astParent , mSettings , errorPath , library , astOperand2 , isCPP , mTokenizer , || , isConstVarExpression , styleEnabled , followVar , == , astOperand1 , isSameExpression , && , tok , ! , Token , astIsFloat , Match , str , if , }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { }

1988 :	"if"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"Token"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"Match"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"tok"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"&&"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"astIsFloat"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"tok"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1988 :	"astOperand1"
		- NEIGH  = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }

1989 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1990 :	"followVar"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"!"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"isConstVarExpression"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"tok"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"||"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"Token"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"Match"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1990 :	"tok"
		- NEIGH  = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { astOperand1 , && , tok , Token , astIsFloat , Match , if , }
		- SUCC   = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }

1991 :	"if"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1991 :	"isSameExpression"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1991 :	"mTokenizer"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1991 :	"isCPP"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1993 :	"tok"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1993 :	"astOperand1"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1994 :	"tok"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1994 :	"astOperand2"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1995 :	"mSettings"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1995 :	"library"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1997 :	"followVar"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1998 :	"&"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1998 :	"errorPath"
		- NEIGH  = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { mSettings , library , astOperand2 , simpleMatch , isSameExpression , && , astOperand1 , == , if , str , tok , mTokenizer , Token , isCPP , isWithoutSideEffects , }
		- PRED   = { Match , Token , tok , isConstVarExpression , || , ! , followVar , }
		- SUCC   = { }

1999 :	"if"
		- NEIGH  = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { warningEnabled , if , str , && , == , tok , assignment , }
		- PRED   = { }
		- SUCC   = { }

1999 :	"isWithoutSideEffects"
		- NEIGH  = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { warningEnabled , if , str , && , == , tok , assignment , }
		- PRED   = { }
		- SUCC   = { }

1999 :	"mTokenizer"
		- NEIGH  = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { warningEnabled , if , str , && , == , tok , assignment , }
		- PRED   = { }
		- SUCC   = { }

1999 :	"isCPP"
		- NEIGH  = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { warningEnabled , if , str , && , == , tok , assignment , }
		- PRED   = { }
		- SUCC   = { }

1999 :	"tok"
		- NEIGH  = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { warningEnabled , if , str , && , == , tok , assignment , }
		- PRED   = { }
		- SUCC   = { }

1999 :	"astOperand1"
		- NEIGH  = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { warningEnabled , if , str , && , == , tok , assignment , }
		- PRED   = { }
		- SUCC   = { }

2000 :	"assignment"
		- NEIGH  = { str , == , tok , assignment , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { warningEnabled , && , assignment , if , }

2000 :	"tok"
		- NEIGH  = { str , == , tok , assignment , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { warningEnabled , && , assignment , if , }

2000 :	"str"
		- NEIGH  = { str , == , tok , assignment , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { warningEnabled , && , assignment , if , }

2000 :	"=="
		- NEIGH  = { str , == , tok , assignment , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { warningEnabled , && , assignment , if , }

2001 :	"if"
		- NEIGH  = { warningEnabled , && , assignment , if , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { styleEnabled , if , selfAssignmentError , astOperand1 , expressionString , tok , }
		- PRED   = { str , == , tok , assignment , }
		- SUCC   = { }

2001 :	"assignment"
		- NEIGH  = { warningEnabled , && , assignment , if , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { styleEnabled , if , selfAssignmentError , astOperand1 , expressionString , tok , }
		- PRED   = { str , == , tok , assignment , }
		- SUCC   = { }

2001 :	"&&"
		- NEIGH  = { warningEnabled , && , assignment , if , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { styleEnabled , if , selfAssignmentError , astOperand1 , expressionString , tok , }
		- PRED   = { str , == , tok , assignment , }
		- SUCC   = { }

2001 :	"warningEnabled"
		- NEIGH  = { warningEnabled , && , assignment , if , }
		- PARENT = { tok , mTokenizer , isCPP , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { styleEnabled , if , selfAssignmentError , astOperand1 , expressionString , tok , }
		- PRED   = { str , == , tok , assignment , }
		- SUCC   = { }

2002 :	"selfAssignmentError"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2002 :	"tok"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2002 :	"tok"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2002 :	"astOperand1"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2002 :	"expressionString"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2003 :	"if"
		- NEIGH  = { styleEnabled , if , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { errorPath , astOperand2 , duplicateExpressionError , isCPP , CPP11 , standards , mSettings , astOperand1 , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PRED   = { }
		- SUCC   = { }

2003 :	"styleEnabled"
		- NEIGH  = { styleEnabled , if , }
		- PARENT = { warningEnabled , && , assignment , if , }
		- CHILD  = { errorPath , astOperand2 , duplicateExpressionError , isCPP , CPP11 , standards , mSettings , astOperand1 , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PRED   = { }
		- SUCC   = { }

2004 :	"if"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"mTokenizer"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"isCPP"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"&&"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"mSettings"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"standards"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"cpp"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"=="
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"Standards"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"CPP11"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"&&"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"tok"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"str"
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2004 :	"=="
		- NEIGH  = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { previous , if , == , && , str , while , astParent , tok , parent , * , Token , }
		- PRED   = { }
		- SUCC   = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }

2005 :	"Token"
		- NEIGH  = { astParent , tok , parent , * , Token , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astParent , && , parent , while , }

2005 :	"*"
		- NEIGH  = { astParent , tok , parent , * , Token , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astParent , && , parent , while , }

2005 :	"parent"
		- NEIGH  = { astParent , tok , parent , * , Token , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astParent , && , parent , while , }

2005 :	"tok"
		- NEIGH  = { astParent , tok , parent , * , Token , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astParent , && , parent , while , }

2005 :	"astParent"
		- NEIGH  = { astParent , tok , parent , * , Token , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { astParent , && , parent , while , }

2006 :	"while"
		- NEIGH  = { astParent , && , parent , while , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { astParent , parent , }
		- PRED   = { astParent , tok , parent , * , Token , }
		- SUCC   = { str , == , && , parent , previous , if , }

2006 :	"parent"
		- NEIGH  = { astParent , && , parent , while , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { astParent , parent , }
		- PRED   = { astParent , tok , parent , * , Token , }
		- SUCC   = { str , == , && , parent , previous , if , }

2006 :	"&&"
		- NEIGH  = { astParent , && , parent , while , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { astParent , parent , }
		- PRED   = { astParent , tok , parent , * , Token , }
		- SUCC   = { str , == , && , parent , previous , if , }

2006 :	"parent"
		- NEIGH  = { astParent , && , parent , while , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { astParent , parent , }
		- PRED   = { astParent , tok , parent , * , Token , }
		- SUCC   = { str , == , && , parent , previous , if , }

2006 :	"astParent"
		- NEIGH  = { astParent , && , parent , while , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { astParent , parent , }
		- PRED   = { astParent , tok , parent , * , Token , }
		- SUCC   = { str , == , && , parent , previous , if , }

2007 :	"parent"
		- NEIGH  = { astParent , parent , }
		- PARENT = { astParent , && , parent , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2007 :	"parent"
		- NEIGH  = { astParent , parent , }
		- PARENT = { astParent , && , parent , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2007 :	"astParent"
		- NEIGH  = { astParent , parent , }
		- PARENT = { astParent , && , parent , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2009 :	"if"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"parent"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"&&"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"parent"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"previous"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"&&"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"parent"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"previous"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"str"
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2009 :	"=="
		- NEIGH  = { str , == , && , parent , previous , if , }
		- PARENT = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- CHILD  = { continue , }
		- PRED   = { astParent , && , parent , while , }
		- SUCC   = { }

2010 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { str , == , && , parent , previous , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2013 :	"duplicateExpressionError"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2013 :	"tok"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2013 :	"astOperand1"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2013 :	"tok"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2013 :	"astOperand2"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2013 :	"tok"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2013 :	"errorPath"
		- NEIGH  = { errorPath , astOperand2 , astOperand1 , tok , duplicateExpressionError , }
		- PARENT = { styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { isCPP , CPP11 , standards , mSettings , == , && , tok , Standards , cpp , mTokenizer , str , if , }
		- SUCC   = { }

2016 :	"if"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"tok"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"str"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"=="
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"&&"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"Token"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"simpleMatch"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"tok"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"astOperand2"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2016 :	"&&"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2017 :	"isSameExpression"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2017 :	"mTokenizer"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2017 :	"isCPP"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2019 :	"tok"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2019 :	"astOperand1"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2020 :	"tok"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2020 :	"astOperand2"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2020 :	"astOperand1"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2021 :	"mSettings"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2021 :	"library"
		- NEIGH  = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- PARENT = { followVar , mSettings , astOperand1 , tok , mTokenizer , & , errorPath , astOperand2 , library , isSameExpression , isCPP , if , }
		- CHILD  = { Match , Token , ! , & , mSettings , isWithoutSideEffects , styleEnabled , isOppositeExpression , isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , errorPath , library , astOperand2 , if , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"if"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"warningEnabled"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"&&"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"isWithoutSideEffects"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"mTokenizer"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"isCPP"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"tok"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2024 :	"astOperand1"
		- NEIGH  = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { }

2025 :	"selfAssignmentError"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2025 :	"tok"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2025 :	"tok"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2025 :	"astOperand1"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2025 :	"expressionString"
		- NEIGH  = { expressionString , tok , astOperand1 , selfAssignmentError , }
		- PARENT = { isCPP , tok , mTokenizer , && , warningEnabled , astOperand1 , isWithoutSideEffects , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2027 :	"if"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2027 :	"styleEnabled"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2027 :	"&&"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2028 :	"isOppositeExpression"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2028 :	"mTokenizer"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2028 :	"isCPP"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2029 :	"tok"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2029 :	"astOperand1"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2030 :	"tok"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2030 :	"astOperand2"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2031 :	"mSettings"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2031 :	"library"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2034 :	"&"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2034 :	"errorPath"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2034 :	"&&"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2035 :	"!"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2035 :	"Token"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2035 :	"Match"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2035 :	"tok"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2035 :	"&&"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2036 :	"isWithoutSideEffects"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2036 :	"mTokenizer"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2036 :	"isCPP"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2036 :	"tok"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2036 :	"astOperand1"
		- NEIGH  = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- PARENT = { mSettings , && , isSameExpression , simpleMatch , isCPP , Token , astOperand1 , == , if , str , mTokenizer , tok , library , astOperand2 , }
		- CHILD  = { Token , if , ! , Match , errorPath , tok , oppositeExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2037 :	"oppositeExpressionError"
		- NEIGH  = { errorPath , tok , oppositeExpressionError , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2037 :	"tok"
		- NEIGH  = { errorPath , tok , oppositeExpressionError , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2037 :	"errorPath"
		- NEIGH  = { errorPath , tok , oppositeExpressionError , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2038 :	"if"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PRED   = { }
		- SUCC   = { }

2038 :	"!"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PRED   = { }
		- SUCC   = { }

2038 :	"Token"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PRED   = { }
		- SUCC   = { }

2038 :	"Match"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PRED   = { }
		- SUCC   = { }

2038 :	"tok"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { Match , Token , ! , & , errorPath , astOperand2 , library , mSettings , astOperand1 , tok , mTokenizer , && , isCPP , isOppositeExpression , isWithoutSideEffects , styleEnabled , if , }
		- CHILD  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"if"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"styleEnabled"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"&&"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"tok"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"astOperand2"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"&&"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"tok"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"str"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"=="
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"tok"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"astOperand1"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"str"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2039 :	"&&"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2040 :	"isSameExpression"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2040 :	"mTokenizer"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2040 :	"isCPP"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2042 :	"tok"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2042 :	"astOperand2"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2043 :	"tok"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2043 :	"astOperand1"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2043 :	"astOperand2"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2044 :	"mSettings"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2044 :	"library"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2046 :	"followVar"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2047 :	"&"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2047 :	"errorPath"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2047 :	"&&"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2048 :	"isWithoutSideEffects"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2048 :	"mTokenizer"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2048 :	"isCPP"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2048 :	"tok"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2048 :	"astOperand2"
		- NEIGH  = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { isCPP , astOperand2 , errorPath , library , mSettings , && , astOperand1 , if , mTokenizer , tok , isConstExpression , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { }

2049 :	"duplicateExpressionError"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"tok"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"astOperand2"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"tok"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"astOperand1"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"astOperand2"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"tok"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2049 :	"errorPath"
		- NEIGH  = { astOperand1 , errorPath , astOperand2 , tok , duplicateExpressionError , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2050 :	"if"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"tok"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"astOperand2"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"&&"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"isConstExpression"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"tok"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"astOperand1"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"mSettings"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"library"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"mTokenizer"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2050 :	"isCPP"
		- NEIGH  = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- PARENT = { & , mSettings , isCPP , && , isSameExpression , == , astOperand1 , str , if , errorPath , library , astOperand2 , mTokenizer , tok , isWithoutSideEffects , followVar , styleEnabled , }
		- CHILD  = { == , && , tok , astOperand1 , str , while , ast1 , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2051 :	"Token"
		- NEIGH  = { tok , astOperand1 , ast1 , * , Token , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , while , ast1 , str , == , && , }

2051 :	"*"
		- NEIGH  = { tok , astOperand1 , ast1 , * , Token , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , while , ast1 , str , == , && , }

2051 :	"ast1"
		- NEIGH  = { tok , astOperand1 , ast1 , * , Token , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , while , ast1 , str , == , && , }

2051 :	"tok"
		- NEIGH  = { tok , astOperand1 , ast1 , * , Token , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , while , ast1 , str , == , && , }

2051 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , ast1 , * , Token , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , while , ast1 , str , == , && , }

2052 :	"while"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"ast1"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"&&"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"tok"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"str"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"=="
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"ast1"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2052 :	"str"
		- NEIGH  = { tok , while , ast1 , str , == , && , }
		- PARENT = { library , mSettings , astOperand1 , isCPP , isConstExpression , && , if , astOperand2 , mTokenizer , tok , }
		- CHILD  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PRED   = { tok , astOperand1 , ast1 , * , Token , }
		- SUCC   = { }

2053 :	"if"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"isSameExpression"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"mTokenizer"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"isCPP"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"ast1"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"astOperand1"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"tok"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"astOperand2"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"mSettings"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"library"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"&"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"errorPath"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2053 :	"&&"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2054 :	"isWithoutSideEffects"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2054 :	"mTokenizer"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2054 :	"isCPP"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2054 :	"ast1"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2054 :	"astOperand1"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2054 :	"&&"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2055 :	"isWithoutSideEffects"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2055 :	"mTokenizer"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2055 :	"isCPP"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2055 :	"ast1"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2055 :	"astOperand2"
		- NEIGH  = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PRED   = { }
		- SUCC   = { astOperand1 , ast1 , }

2057 :	"duplicateExpressionError"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2057 :	"ast1"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2057 :	"astOperand1"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2057 :	"tok"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2057 :	"astOperand2"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2057 :	"tok"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2057 :	"errorPath"
		- NEIGH  = { errorPath , astOperand2 , tok , astOperand1 , ast1 , duplicateExpressionError , }
		- PARENT = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2058 :	"ast1"
		- NEIGH  = { astOperand1 , ast1 , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { }
		- PRED   = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- SUCC   = { }

2058 :	"ast1"
		- NEIGH  = { astOperand1 , ast1 , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { }
		- PRED   = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- SUCC   = { }

2058 :	"astOperand1"
		- NEIGH  = { astOperand1 , ast1 , }
		- PARENT = { tok , while , ast1 , str , == , && , }
		- CHILD  = { }
		- PRED   = { isWithoutSideEffects , mSettings , astOperand1 , tok , mTokenizer , if , ast1 , & , errorPath , astOperand2 , library , && , isSameExpression , isCPP , }
		- SUCC   = { }

2062 :	"if"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"styleEnabled"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"&&"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"tok"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"astOperand1"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"&&"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"tok"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"astOperand2"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"&&"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"tok"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"str"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"=="
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"&&"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"tok"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"astParent"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"&&"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"tok"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"astParent"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"str"
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2062 :	"=="
		- NEIGH  = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- PARENT = { Match , astOperand1 , && , Token , isOp , tok , ! , if , }
		- CHILD  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"if"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"!"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"tok"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"astOperand1"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"values"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"empty"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"&&"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"!"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"tok"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"astOperand2"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"values"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"empty"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"&&"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"isEqualKnownValue"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"tok"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"astOperand1"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"tok"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2063 :	"astOperand2"
		- NEIGH  = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { astParent , str , astOperand1 , == , && , tok , styleEnabled , astOperand2 , if , }
		- CHILD  = { mSettings , astOperand1 , duplicateValueTernaryError , isCPP , tok , mTokenizer , errorPath , library , astOperand2 , if , & , isSameExpression , }
		- PRED   = { }
		- SUCC   = { }

2064 :	"duplicateValueTernaryError"
		- NEIGH  = { tok , duplicateValueTernaryError , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2064 :	"tok"
		- NEIGH  = { tok , duplicateValueTernaryError , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2065 :	"if"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"isSameExpression"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"mTokenizer"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"isCPP"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"tok"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"astOperand1"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"tok"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"astOperand2"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"mSettings"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"library"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"&"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2065 :	"errorPath"
		- NEIGH  = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- PARENT = { isEqualKnownValue , && , empty , values , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PRED   = { }
		- SUCC   = { }

2066 :	"duplicateExpressionTernaryError"
		- NEIGH  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PARENT = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2066 :	"tok"
		- NEIGH  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PARENT = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2066 :	"errorPath"
		- NEIGH  = { errorPath , tok , duplicateExpressionTernaryError , }
		- PARENT = { errorPath , mSettings , astOperand1 , tok , mTokenizer , & , library , isSameExpression , isCPP , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"oppositeExpressionError"
		- NEIGH  = { oppositeExpressionError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"opTok"
		- NEIGH  = { opTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"ErrorPath"
		- NEIGH  = { ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2072 :	"errors"
		- NEIGH  = { errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2074 :	"errors"
		- NEIGH  = { opTok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , string , op , & , opTok , std , }

2074 :	"emplace_back"
		- NEIGH  = { opTok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , string , op , & , opTok , std , }

2074 :	"opTok"
		- NEIGH  = { opTok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , string , op , & , opTok , std , }

2076 :	"std"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2076 :	"string"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2076 :	"&"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2076 :	"op"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2076 :	"opTok"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2076 :	"opTok"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2076 :	"str"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { CWE398 , op , + , Severity , style , errors , reportError , }

2078 :	"reportError"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2078 :	"errors"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2078 :	"Severity"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2078 :	"style"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2078 :	"+"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2078 :	"op"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2078 :	"+"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2081 :	"CWE398"
		- NEIGH  = { CWE398 , op , + , Severity , style , errors , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { }

2084 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"duplicateExpressionError"
		- NEIGH  = { duplicateExpressionError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"opTok"
		- NEIGH  = { opTok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"ErrorPath"
		- NEIGH  = { ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2084 :	"errors"
		- NEIGH  = { errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2086 :	"errors"
		- NEIGH  = { opTok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok1 , expressionString , expr1 , & , string , std , }

2086 :	"emplace_back"
		- NEIGH  = { opTok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok1 , expressionString , expr1 , & , string , std , }

2086 :	"opTok"
		- NEIGH  = { opTok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok1 , expressionString , expr1 , & , string , std , }

2088 :	"std"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2088 :	"string"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2088 :	"&"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2088 :	"expr1"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2088 :	"tok1"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2088 :	"tok1"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2088 :	"expressionString"
		- NEIGH  = { tok1 , expressionString , expr1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opTok , emplace_back , errors , }
		- SUCC   = { expressionString , expr2 , tok2 , & , string , std , }

2089 :	"std"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2089 :	"string"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2089 :	"&"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2089 :	"expr2"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2089 :	"tok2"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2089 :	"tok2"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2089 :	"expressionString"
		- NEIGH  = { expressionString , expr2 , tok2 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok1 , expressionString , expr1 , & , string , std , }
		- SUCC   = { str , string , op , & , opTok , std , }

2091 :	"std"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2091 :	"string"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2091 :	"&"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2091 :	"op"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2091 :	"opTok"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2091 :	"opTok"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2091 :	"str"
		- NEIGH  = { str , string , op , & , opTok , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { expressionString , expr2 , tok2 , & , string , std , }
		- SUCC   = { op , + , msg , string , std , }

2092 :	"std"
		- NEIGH  = { op , + , msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { id , string , std , }

2092 :	"string"
		- NEIGH  = { op , + , msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { id , string , std , }

2092 :	"msg"
		- NEIGH  = { op , + , msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { id , string , std , }

2092 :	"+"
		- NEIGH  = { op , + , msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { id , string , std , }

2092 :	"op"
		- NEIGH  = { op , + , msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { id , string , std , }

2092 :	"+"
		- NEIGH  = { op , + , msg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , string , op , & , opTok , std , }
		- SUCC   = { id , string , std , }

2093 :	"std"
		- NEIGH  = { id , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , msg , string , std , }
		- SUCC   = { != , expr1 , expr2 , if , }

2093 :	"string"
		- NEIGH  = { id , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , msg , string , std , }
		- SUCC   = { != , expr1 , expr2 , if , }

2093 :	"id"
		- NEIGH  = { id , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { op , + , msg , string , std , }
		- SUCC   = { != , expr1 , expr2 , if , }

2094 :	"if"
		- NEIGH  = { != , expr1 , expr2 , if , }
		- PARENT = { }
		- CHILD  = { && , Match , expr2 , expr1 , op , exprMsg , ! , opTok , Token , string , + , std , tok1 , if , tok2 , id , }
		- PRED   = { id , string , std , }
		- SUCC   = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }

2094 :	"expr1"
		- NEIGH  = { != , expr1 , expr2 , if , }
		- PARENT = { }
		- CHILD  = { && , Match , expr2 , expr1 , op , exprMsg , ! , opTok , Token , string , + , std , tok1 , if , tok2 , id , }
		- PRED   = { id , string , std , }
		- SUCC   = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }

2094 :	"!="
		- NEIGH  = { != , expr1 , expr2 , if , }
		- PARENT = { }
		- CHILD  = { && , Match , expr2 , expr1 , op , exprMsg , ! , opTok , Token , string , + , std , tok1 , if , tok2 , id , }
		- PRED   = { id , string , std , }
		- SUCC   = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }

2094 :	"expr2"
		- NEIGH  = { != , expr1 , expr2 , if , }
		- PARENT = { }
		- CHILD  = { && , Match , expr2 , expr1 , op , exprMsg , ! , opTok , Token , string , + , std , tok1 , if , tok2 , id , }
		- PRED   = { id , string , std , }
		- SUCC   = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }

2095 :	"id"
		- NEIGH  = { id , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { expr2 , + , expr1 , exprMsg , op , string , std , }

2096 :	"std"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"string"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"exprMsg"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"+"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"expr1"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"+"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"+"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"op"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"+"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"+"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"expr2"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2096 :	"+"
		- NEIGH  = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { }
		- PRED   = { id , }
		- SUCC   = { Token , opTok , Match , if , }

2097 :	"if"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { opTok , Match , Token , + , if , exprMsg , msg , }
		- PRED   = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- SUCC   = { tok2 , && , Match , tok1 , Token , ! , if , }

2097 :	"Token"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { opTok , Match , Token , + , if , exprMsg , msg , }
		- PRED   = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- SUCC   = { tok2 , && , Match , tok1 , Token , ! , if , }

2097 :	"Match"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { opTok , Match , Token , + , if , exprMsg , msg , }
		- PRED   = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- SUCC   = { tok2 , && , Match , tok1 , Token , ! , if , }

2097 :	"opTok"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { opTok , Match , Token , + , if , exprMsg , msg , }
		- PRED   = { expr2 , + , expr1 , exprMsg , op , string , std , }
		- SUCC   = { tok2 , && , Match , tok1 , Token , ! , if , }

2098 :	"msg"
		- NEIGH  = { exprMsg , + , msg , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2098 :	"exprMsg"
		- NEIGH  = { exprMsg , + , msg , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2098 :	"+"
		- NEIGH  = { exprMsg , + , msg , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2099 :	"if"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { exprMsg , + , msg , }
		- PRED   = { }
		- SUCC   = { }

2099 :	"Token"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { exprMsg , + , msg , }
		- PRED   = { }
		- SUCC   = { }

2099 :	"Match"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { exprMsg , + , msg , }
		- PRED   = { }
		- SUCC   = { }

2099 :	"opTok"
		- NEIGH  = { Token , opTok , Match , if , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { exprMsg , + , msg , }
		- PRED   = { }
		- SUCC   = { }

2100 :	"msg"
		- NEIGH  = { exprMsg , + , msg , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2100 :	"exprMsg"
		- NEIGH  = { exprMsg , + , msg , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2100 :	"+"
		- NEIGH  = { exprMsg , + , msg , }
		- PARENT = { Token , opTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2101 :	"if"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"!"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"Token"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"Match"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"tok1"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"&&"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"!"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"Token"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"Match"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2101 :	"tok2"
		- NEIGH  = { tok2 , && , Match , tok1 , Token , ! , if , }
		- PARENT = { != , expr1 , expr2 , if , }
		- CHILD  = { expr2 , expr1 , += , + , msg , }
		- PRED   = { Token , opTok , Match , if , }
		- SUCC   = { }

2102 :	"msg"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"+="
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"+"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"expr1"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"+"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"+"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"expr2"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2102 :	"+"
		- NEIGH  = { expr2 , expr1 , += , + , msg , }
		- PARENT = { tok2 , && , Match , tok1 , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2105 :	"reportError"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"errors"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"Severity"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"style"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"id"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"c_str"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"msg"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2105 :	"+"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2108 :	"CWE398"
		- NEIGH  = { CWE398 , + , msg , c_str , reportError , id , Severity , style , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { != , expr1 , expr2 , if , }
		- SUCC   = { }

2111 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"duplicateAssignExpressionError"
		- NEIGH  = { duplicateAssignExpressionError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"tok1"
		- NEIGH  = { tok1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"tok2"
		- NEIGH  = { tok2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2111 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2113 :	"std"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"list"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"<"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"Token"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"*"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	">"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"toks"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"tok2"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2113 :	"tok1"
		- NEIGH  = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , tok1 , var1 , & , string , std , }

2115 :	"std"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2115 :	"string"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2115 :	"&"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2115 :	"var1"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2115 :	"tok1"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2115 :	"tok1"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2115 :	"str"
		- NEIGH  = { str , tok1 , var1 , & , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok2 , toks , > , tok1 , < , * , Token , list , std , }
		- SUCC   = { str , tok2 , & , string , var2 , std , }

2116 :	"std"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2116 :	"string"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2116 :	"&"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2116 :	"var2"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2116 :	"tok2"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2116 :	"tok2"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2116 :	"str"
		- NEIGH  = { str , tok2 , & , string , var2 , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok1 , var1 , & , string , std , }
		- SUCC   = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }

2118 :	"reportError"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2118 :	"toks"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2118 :	"Severity"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2118 :	"style"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2119 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2119 :	"var1"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2119 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2119 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2119 :	"var2"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2119 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2120 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2120 :	"var1"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2120 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2120 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2120 :	"var2"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2120 :	"+"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2122 :	"CWE398"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2122 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE398 , var2 , toks , + , style , Severity , var1 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , tok2 , & , string , var2 , std , }
		- SUCC   = { }

2125 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2125 :	"duplicateExpressionTernaryError"
		- NEIGH  = { duplicateExpressionTernaryError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2125 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2125 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2125 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2125 :	"ErrorPath"
		- NEIGH  = { ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2125 :	"errors"
		- NEIGH  = { errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2127 :	"errors"
		- NEIGH  = { tok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE398 , style , errors , Severity , reportError , }

2127 :	"emplace_back"
		- NEIGH  = { tok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE398 , style , errors , Severity , reportError , }

2127 :	"tok"
		- NEIGH  = { tok , emplace_back , errors , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE398 , style , errors , Severity , reportError , }

2128 :	"reportError"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errors , }
		- SUCC   = { }

2128 :	"errors"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errors , }
		- SUCC   = { }

2128 :	"Severity"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errors , }
		- SUCC   = { }

2128 :	"style"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errors , }
		- SUCC   = { }

2130 :	"CWE398"
		- NEIGH  = { CWE398 , style , errors , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errors , }
		- SUCC   = { }

2133 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2133 :	"duplicateValueTernaryError"
		- NEIGH  = { duplicateValueTernaryError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2133 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2133 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2133 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2135 :	"reportError"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2135 :	"tok"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2135 :	"Severity"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2135 :	"style"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2137 :	"CWE398"
		- NEIGH  = { CWE398 , style , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"selfAssignmentError"
		- NEIGH  = { selfAssignmentError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2140 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2142 :	"reportError"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2142 :	"tok"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2142 :	"Severity"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2142 :	"warning"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2144 :	"+"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2144 :	"varname"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2144 :	"+"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2145 :	"CWE398"
		- NEIGH  = { CWE398 , varname , + , warning , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2157 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2157 :	"checkComparisonFunctionIsAlwaysTrueOrFalse"
		- NEIGH  = { checkComparisonFunctionIsAlwaysTrueOrFalse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2159 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2159 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2159 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2159 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2159 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2159 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2160 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2162 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2162 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2162 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2162 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2162 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2163 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2163 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2163 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2163 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2163 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2163 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2164 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2164 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"if"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"tok"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"isName"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"&&"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"Token"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"Match"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2165 :	"tok"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { if , varId , == , varidRight , tokAt , tok , varidLeft , }
		- PRED   = { }
		- SUCC   = { }

2166 :	"varidLeft"
		- NEIGH  = { varId , tokAt , tok , varidLeft , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok , tokAt , varidRight , }

2166 :	"tok"
		- NEIGH  = { varId , tokAt , tok , varidLeft , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok , tokAt , varidRight , }

2166 :	"tokAt"
		- NEIGH  = { varId , tokAt , tok , varidLeft , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok , tokAt , varidRight , }

2166 :	"varId"
		- NEIGH  = { varId , tokAt , tok , varidLeft , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { varId , tok , tokAt , varidRight , }

2167 :	"varidRight"
		- NEIGH  = { varId , tok , tokAt , varidRight , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { varId , tokAt , tok , varidLeft , }
		- SUCC   = { varidRight , == , varidLeft , if , }

2167 :	"tok"
		- NEIGH  = { varId , tok , tokAt , varidRight , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { varId , tokAt , tok , varidLeft , }
		- SUCC   = { varidRight , == , varidLeft , if , }

2167 :	"tokAt"
		- NEIGH  = { varId , tok , tokAt , varidRight , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { varId , tokAt , tok , varidLeft , }
		- SUCC   = { varidRight , == , varidLeft , if , }

2167 :	"varId"
		- NEIGH  = { varId , tok , tokAt , varidRight , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { varId , tokAt , tok , varidLeft , }
		- SUCC   = { varidRight , == , varidLeft , if , }

2170 :	"if"
		- NEIGH  = { varidRight , == , varidLeft , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { || , == , if , varNameLeft , str , tok , strAt , & , string , functionName , std , }
		- PRED   = { varId , tok , tokAt , varidRight , }
		- SUCC   = { }

2170 :	"varidLeft"
		- NEIGH  = { varidRight , == , varidLeft , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { || , == , if , varNameLeft , str , tok , strAt , & , string , functionName , std , }
		- PRED   = { varId , tok , tokAt , varidRight , }
		- SUCC   = { }

2170 :	"=="
		- NEIGH  = { varidRight , == , varidLeft , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { || , == , if , varNameLeft , str , tok , strAt , & , string , functionName , std , }
		- PRED   = { varId , tok , tokAt , varidRight , }
		- SUCC   = { }

2170 :	"varidRight"
		- NEIGH  = { varidRight , == , varidLeft , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { || , == , if , varNameLeft , str , tok , strAt , & , string , functionName , std , }
		- PRED   = { varId , tok , tokAt , varidRight , }
		- SUCC   = { }

2171 :	"std"
		- NEIGH  = { str , tok , & , string , functionName , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , varNameLeft , strAt , & , string , std , }

2171 :	"string"
		- NEIGH  = { str , tok , & , string , functionName , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , varNameLeft , strAt , & , string , std , }

2171 :	"&"
		- NEIGH  = { str , tok , & , string , functionName , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , varNameLeft , strAt , & , string , std , }

2171 :	"functionName"
		- NEIGH  = { str , tok , & , string , functionName , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , varNameLeft , strAt , & , string , std , }

2171 :	"tok"
		- NEIGH  = { str , tok , & , string , functionName , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , varNameLeft , strAt , & , string , std , }

2171 :	"str"
		- NEIGH  = { str , tok , & , string , functionName , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , varNameLeft , strAt , & , string , std , }

2172 :	"std"
		- NEIGH  = { tok , varNameLeft , strAt , & , string , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { str , tok , & , string , functionName , std , }
		- SUCC   = { || , == , functionName , if , }

2172 :	"string"
		- NEIGH  = { tok , varNameLeft , strAt , & , string , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { str , tok , & , string , functionName , std , }
		- SUCC   = { || , == , functionName , if , }

2172 :	"&"
		- NEIGH  = { tok , varNameLeft , strAt , & , string , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { str , tok , & , string , functionName , std , }
		- SUCC   = { || , == , functionName , if , }

2172 :	"varNameLeft"
		- NEIGH  = { tok , varNameLeft , strAt , & , string , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { str , tok , & , string , functionName , std , }
		- SUCC   = { || , == , functionName , if , }

2172 :	"tok"
		- NEIGH  = { tok , varNameLeft , strAt , & , string , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { str , tok , & , string , functionName , std , }
		- SUCC   = { || , == , functionName , if , }

2172 :	"strAt"
		- NEIGH  = { tok , varNameLeft , strAt , & , string , std , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { }
		- PRED   = { str , tok , & , string , functionName , std , }
		- SUCC   = { || , == , functionName , if , }

2173 :	"if"
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"functionName"
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"=="
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"||"
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"functionName"
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"=="
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"||"
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"functionName"
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2173 :	"=="
		- NEIGH  = { || , == , functionName , if , }
		- PARENT = { varidRight , == , varidLeft , if , }
		- CHILD  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PRED   = { tok , varNameLeft , strAt , & , string , std , }
		- SUCC   = { }

2175 :	"checkComparisonFunctionIsAlwaysTrueOrFalseError"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2175 :	"tok"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2175 :	"functionName"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2175 :	"varNameLeft"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2178 :	"checkComparisonFunctionIsAlwaysTrueOrFalseError"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2178 :	"tok"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2178 :	"functionName"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2178 :	"varNameLeft"
		- NEIGH  = { varNameLeft , tok , functionName , checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { || , == , functionName , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"checkComparisonFunctionIsAlwaysTrueOrFalseError"
		- NEIGH  = { checkComparisonFunctionIsAlwaysTrueOrFalseError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"functionName"
		- NEIGH  = { functionName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"varName"
		- NEIGH  = { varName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2185 :	"result"
		- NEIGH  = { result , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2187 :	"std"
		- NEIGH  = { result , strResult , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE570 , result , cweResult , CWE571 , CWE , }

2187 :	"string"
		- NEIGH  = { result , strResult , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE570 , result , cweResult , CWE571 , CWE , }

2187 :	"strResult"
		- NEIGH  = { result , strResult , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE570 , result , cweResult , CWE571 , CWE , }

2187 :	"result"
		- NEIGH  = { result , strResult , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE570 , result , cweResult , CWE571 , CWE , }

2188 :	"CWE"
		- NEIGH  = { CWE570 , result , cweResult , CWE571 , CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { result , strResult , string , std , }
		- SUCC   = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }

2188 :	"cweResult"
		- NEIGH  = { CWE570 , result , cweResult , CWE571 , CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { result , strResult , string , std , }
		- SUCC   = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }

2188 :	"result"
		- NEIGH  = { CWE570 , result , cweResult , CWE571 , CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { result , strResult , string , std , }
		- SUCC   = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }

2188 :	"CWE571"
		- NEIGH  = { CWE570 , result , cweResult , CWE571 , CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { result , strResult , string , std , }
		- SUCC   = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }

2188 :	"CWE570"
		- NEIGH  = { CWE570 , result , cweResult , CWE571 , CWE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { result , strResult , string , std , }
		- SUCC   = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }

2190 :	"reportError"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2190 :	"tok"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2190 :	"Severity"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2190 :	"warning"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2191 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2191 :	"functionName"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2191 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"varName"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"varName"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"strResult"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2192 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2193 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2193 :	"varName"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2193 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2194 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2194 :	"strResult"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2194 :	"+"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2194 :	"cweResult"
		- NEIGH  = { strResult , varName , functionName , + , warning , tok , Severity , cweResult , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CWE570 , result , cweResult , CWE571 , CWE , }
		- SUCC   = { }

2200 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2200 :	"checkSignOfUnsignedVariable"
		- NEIGH  = { checkSignOfUnsignedVariable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2202 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2202 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2202 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2202 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2202 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2202 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2203 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2205 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2205 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2205 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2205 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2205 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2207 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2207 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2207 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2207 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2207 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2207 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2209 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2209 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { && , v2 , getValue , * , Value , v1 , ValueFlow , Match , isComparisonOp , isKnown , tok , astOperand1 , || , astOperand2 , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2210 :	"if"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"!"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"tok"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"isComparisonOp"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"||"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"!"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"tok"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"astOperand1"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"||"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"!"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"tok"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2210 :	"astOperand2"
		- NEIGH  = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }

2211 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2213 :	"ValueFlow"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2213 :	"Value"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2213 :	"*"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2213 :	"v1"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2213 :	"tok"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2213 :	"astOperand1"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2213 :	"getValue"
		- NEIGH  = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isComparisonOp , tok , astOperand1 , || , astOperand2 , ! , if , }
		- SUCC   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }

2214 :	"ValueFlow"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2214 :	"Value"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2214 :	"*"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2214 :	"v2"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2214 :	"tok"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2214 :	"astOperand2"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2214 :	"getValue"
		- NEIGH  = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getValue , astOperand1 , ValueFlow , v1 , * , tok , Value , }
		- SUCC   = { isKnown , v2 , && , tok , Token , Match , if , }

2216 :	"if"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"Token"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"Match"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"tok"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"&&"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"v2"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"&&"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"v2"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2216 :	"isKnown"
		- NEIGH  = { isKnown , v2 , && , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { v1 , Token , Match , UNSIGNED , astOperand1 , valueType , == , && , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { getValue , astOperand2 , v2 , * , tok , Value , ValueFlow , }
		- SUCC   = { }

2217 :	"ValueType"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2217 :	"*"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2217 :	"vt"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2217 :	"tok"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2217 :	"astOperand1"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2217 :	"valueType"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2218 :	"if"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , tok , pointerLessThanZeroError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2218 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , tok , pointerLessThanZeroError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2218 :	"&&"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , tok , pointerLessThanZeroError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2218 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , tok , pointerLessThanZeroError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2218 :	"pointer"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , tok , pointerLessThanZeroError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2219 :	"pointerLessThanZeroError"
		- NEIGH  = { v2 , tok , pointerLessThanZeroError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2219 :	"tok"
		- NEIGH  = { v2 , tok , pointerLessThanZeroError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2219 :	"v2"
		- NEIGH  = { v2 , tok , pointerLessThanZeroError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2220 :	"if"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"&&"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"sign"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"=="
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"ValueType"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2220 :	"UNSIGNED"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2221 :	"unsignedLessThanZeroError"
		- NEIGH  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2221 :	"tok"
		- NEIGH  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2221 :	"v2"
		- NEIGH  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2221 :	"tok"
		- NEIGH  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2221 :	"astOperand1"
		- NEIGH  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2221 :	"expressionString"
		- NEIGH  = { expressionString , astOperand1 , v2 , tok , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2222 :	"if"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"Token"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"Match"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"tok"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"&&"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"v1"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"&&"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"v1"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2222 :	"isKnown"
		- NEIGH  = { isKnown , v1 , && , tok , Token , Match , if , }
		- PARENT = { isKnown , v2 , && , tok , Token , Match , if , }
		- CHILD  = { v2 , Token , UNSIGNED , valueType , == , && , simpleMatch , sign , if , astOperand2 , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2223 :	"ValueType"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2223 :	"*"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2223 :	"vt"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2223 :	"tok"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2223 :	"astOperand2"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2223 :	"valueType"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2224 :	"if"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , tok , pointerLessThanZeroError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2224 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , tok , pointerLessThanZeroError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2224 :	"&&"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , tok , pointerLessThanZeroError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2224 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , tok , pointerLessThanZeroError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2224 :	"pointer"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , tok , pointerLessThanZeroError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2225 :	"pointerLessThanZeroError"
		- NEIGH  = { v1 , tok , pointerLessThanZeroError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2225 :	"tok"
		- NEIGH  = { v1 , tok , pointerLessThanZeroError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2225 :	"v1"
		- NEIGH  = { v1 , tok , pointerLessThanZeroError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2226 :	"if"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"&&"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"sign"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"=="
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"ValueType"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2226 :	"UNSIGNED"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2227 :	"unsignedLessThanZeroError"
		- NEIGH  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2227 :	"tok"
		- NEIGH  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2227 :	"v1"
		- NEIGH  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2227 :	"tok"
		- NEIGH  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2227 :	"astOperand2"
		- NEIGH  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2227 :	"expressionString"
		- NEIGH  = { expressionString , v1 , tok , astOperand2 , unsignedLessThanZeroError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2228 :	"if"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"Token"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"simpleMatch"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"tok"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"&&"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"v2"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"&&"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"v2"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2228 :	"isKnown"
		- NEIGH  = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { isKnown , v1 , && , tok , Token , Match , if , }
		- CHILD  = { v1 , Token , UNSIGNED , astOperand1 , valueType , == , && , simpleMatch , sign , if , isKnown , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2229 :	"ValueType"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2229 :	"*"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2229 :	"vt"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2229 :	"tok"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2229 :	"astOperand1"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2229 :	"valueType"
		- NEIGH  = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2230 :	"if"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v2 , tok , pointerPositiveError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2230 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v2 , tok , pointerPositiveError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2230 :	"&&"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v2 , tok , pointerPositiveError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2230 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v2 , tok , pointerPositiveError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2230 :	"pointer"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v2 , tok , pointerPositiveError , }
		- PRED   = { valueType , tok , astOperand1 , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2231 :	"pointerPositiveError"
		- NEIGH  = { v2 , tok , pointerPositiveError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2231 :	"tok"
		- NEIGH  = { v2 , tok , pointerPositiveError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2231 :	"v2"
		- NEIGH  = { v2 , tok , pointerPositiveError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2232 :	"if"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"&&"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"sign"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"=="
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"ValueType"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2232 :	"UNSIGNED"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2233 :	"unsignedPositiveError"
		- NEIGH  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2233 :	"tok"
		- NEIGH  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2233 :	"v2"
		- NEIGH  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2233 :	"tok"
		- NEIGH  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2233 :	"astOperand1"
		- NEIGH  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2233 :	"expressionString"
		- NEIGH  = { astOperand1 , v2 , tok , expressionString , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2234 :	"if"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"Token"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"simpleMatch"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"tok"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"&&"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"v1"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"&&"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"v1"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2234 :	"isKnown"
		- NEIGH  = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- PARENT = { v2 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { UNSIGNED , valueType , == , && , sign , if , astOperand2 , tok , * , vt , pointer , ValueType , }
		- PRED   = { }
		- SUCC   = { }

2235 :	"ValueType"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2235 :	"*"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2235 :	"vt"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2235 :	"tok"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2235 :	"astOperand2"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2235 :	"valueType"
		- NEIGH  = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , && , vt , if , }

2236 :	"if"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v1 , tok , pointerPositiveError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2236 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v1 , tok , pointerPositiveError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2236 :	"&&"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v1 , tok , pointerPositiveError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2236 :	"vt"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v1 , tok , pointerPositiveError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2236 :	"pointer"
		- NEIGH  = { pointer , && , vt , if , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { v1 , tok , pointerPositiveError , }
		- PRED   = { astOperand2 , valueType , tok , * , vt , ValueType , }
		- SUCC   = { ValueType , UNSIGNED , && , == , if , sign , vt , }

2237 :	"pointerPositiveError"
		- NEIGH  = { v1 , tok , pointerPositiveError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2237 :	"tok"
		- NEIGH  = { v1 , tok , pointerPositiveError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2237 :	"v1"
		- NEIGH  = { v1 , tok , pointerPositiveError , }
		- PARENT = { pointer , && , vt , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2238 :	"if"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"&&"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"vt"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"sign"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"=="
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"ValueType"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2238 :	"UNSIGNED"
		- NEIGH  = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- PARENT = { v1 , && , tok , isKnown , simpleMatch , Token , if , }
		- CHILD  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PRED   = { pointer , && , vt , if , }
		- SUCC   = { }

2239 :	"unsignedPositiveError"
		- NEIGH  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2239 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2239 :	"v1"
		- NEIGH  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2239 :	"tok"
		- NEIGH  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2239 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2239 :	"expressionString"
		- NEIGH  = { astOperand2 , tok , expressionString , v1 , unsignedPositiveError , }
		- PARENT = { ValueType , UNSIGNED , && , == , if , sign , vt , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"unsignedLessThanZeroError"
		- NEIGH  = { unsignedLessThanZeroError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"v"
		- NEIGH  = { v , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2245 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2247 :	"reportError"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2247 :	"getErrorPath"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2247 :	"tok"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2247 :	"v"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2247 :	"Severity"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2247 :	"style"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2248 :	"+"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2248 :	"varname"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2248 :	"+"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2251 :	"CWE570"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"pointerLessThanZeroError"
		- NEIGH  = { pointerLessThanZeroError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2254 :	"v"
		- NEIGH  = { v , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2256 :	"reportError"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2256 :	"getErrorPath"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2256 :	"tok"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2256 :	"v"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2256 :	"Severity"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2256 :	"style"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2257 :	"CWE570"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"unsignedPositiveError"
		- NEIGH  = { unsignedPositiveError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"v"
		- NEIGH  = { v , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2260 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2262 :	"reportError"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2262 :	"getErrorPath"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2262 :	"tok"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2262 :	"v"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2262 :	"Severity"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2262 :	"style"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2263 :	"+"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2263 :	"varname"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2263 :	"+"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2264 :	"CWE570"
		- NEIGH  = { CWE570 , varname , + , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"pointerPositiveError"
		- NEIGH  = { pointerPositiveError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2267 :	"v"
		- NEIGH  = { v , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2269 :	"reportError"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2269 :	"getErrorPath"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2269 :	"tok"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2269 :	"v"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2269 :	"Severity"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2269 :	"style"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2270 :	"CWE570"
		- NEIGH  = { CWE570 , v , tok , getErrorPath , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2274 :	"constructorTakesReference"
		- NEIGH  = { constructorTakesReference , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2274 :	"Scope"
		- NEIGH  = { Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2274 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2274 :	"classScope"
		- NEIGH  = { classScope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2276 :	"for"
		- NEIGH  = { functionList , classScope , constructor , & , Function , for , }
		- PARENT = { }
		- CHILD  = { constructor , isConstructor , if , }
		- PRED   = { }
		- SUCC   = { return , }

2276 :	"Function"
		- NEIGH  = { functionList , classScope , constructor , & , Function , for , }
		- PARENT = { }
		- CHILD  = { constructor , isConstructor , if , }
		- PRED   = { }
		- SUCC   = { return , }

2276 :	"&"
		- NEIGH  = { functionList , classScope , constructor , & , Function , for , }
		- PARENT = { }
		- CHILD  = { constructor , isConstructor , if , }
		- PRED   = { }
		- SUCC   = { return , }

2276 :	"constructor"
		- NEIGH  = { functionList , classScope , constructor , & , Function , for , }
		- PARENT = { }
		- CHILD  = { constructor , isConstructor , if , }
		- PRED   = { }
		- SUCC   = { return , }

2276 :	"classScope"
		- NEIGH  = { functionList , classScope , constructor , & , Function , for , }
		- PARENT = { }
		- CHILD  = { constructor , isConstructor , if , }
		- PRED   = { }
		- SUCC   = { return , }

2276 :	"functionList"
		- NEIGH  = { functionList , classScope , constructor , & , Function , for , }
		- PARENT = { }
		- CHILD  = { constructor , isConstructor , if , }
		- PRED   = { }
		- SUCC   = { return , }

2277 :	"if"
		- NEIGH  = { constructor , isConstructor , if , }
		- PARENT = { functionList , classScope , constructor , & , Function , for , }
		- CHILD  = { ++ , argCount , constructor , < , argnr , for , }
		- PRED   = { }
		- SUCC   = { }

2277 :	"constructor"
		- NEIGH  = { constructor , isConstructor , if , }
		- PARENT = { functionList , classScope , constructor , & , Function , for , }
		- CHILD  = { ++ , argCount , constructor , < , argnr , for , }
		- PRED   = { }
		- SUCC   = { }

2277 :	"isConstructor"
		- NEIGH  = { constructor , isConstructor , if , }
		- PARENT = { functionList , classScope , constructor , & , Function , for , }
		- CHILD  = { ++ , argCount , constructor , < , argnr , for , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"for"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"argnr"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"argnr"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"<"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"constructor"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"argCount"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"argnr"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2278 :	"++"
		- NEIGH  = { ++ , argCount , constructor , < , argnr , for , }
		- PARENT = { constructor , isConstructor , if , }
		- CHILD  = { argnr , if , constructor , isReference , getArgumentVar , argVar , * , && , Variable , }
		- PRED   = { }
		- SUCC   = { }

2279 :	"Variable"
		- NEIGH  = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , argVar , if , }

2279 :	"*"
		- NEIGH  = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , argVar , if , }

2279 :	"argVar"
		- NEIGH  = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , argVar , if , }

2279 :	"constructor"
		- NEIGH  = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , argVar , if , }

2279 :	"getArgumentVar"
		- NEIGH  = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , argVar , if , }

2279 :	"argnr"
		- NEIGH  = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isReference , && , argVar , if , }

2280 :	"if"
		- NEIGH  = { isReference , && , argVar , if , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { return , }
		- PRED   = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- SUCC   = { }

2280 :	"argVar"
		- NEIGH  = { isReference , && , argVar , if , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { return , }
		- PRED   = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- SUCC   = { }

2280 :	"&&"
		- NEIGH  = { isReference , && , argVar , if , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { return , }
		- PRED   = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- SUCC   = { }

2280 :	"argVar"
		- NEIGH  = { isReference , && , argVar , if , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { return , }
		- PRED   = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- SUCC   = { }

2280 :	"isReference"
		- NEIGH  = { isReference , && , argVar , if , }
		- PARENT = { ++ , argCount , constructor , < , argnr , for , }
		- CHILD  = { return , }
		- PRED   = { argnr , constructor , getArgumentVar , argVar , * , Variable , }
		- SUCC   = { }

2281 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isReference , && , argVar , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2286 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { functionList , classScope , constructor , & , Function , for , }
		- SUCC   = { }

2293 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2293 :	"checkRedundantCopy"
		- NEIGH  = { checkRedundantCopy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2295 :	"if"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"!"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"mSettings"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"isEnabled"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"Settings"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"PERFORMANCE"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"||"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"mTokenizer"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"isC"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"||"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"!"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"mSettings"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2295 :	"inconclusive"
		- NEIGH  = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2296 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2298 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

2298 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

2298 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

2298 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

2298 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { isC , mTokenizer , || , PERFORMANCE , Settings , isEnabled , inconclusive , mSettings , ! , if , }
		- SUCC   = { Variable , symbolDatabase , * , var , variableList , for , }

2300 :	"for"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { - , func , type , tok , previous , Token , == , Function , Match , function , ! , nameToken , strAt , isStlType , || , && , startTok , astOperand2 , if , var , tokenDef , isPointer , link , next , isConst , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2300 :	"Variable"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { - , func , type , tok , previous , Token , == , Function , Match , function , ! , nameToken , strAt , isStlType , || , && , startTok , astOperand2 , if , var , tokenDef , isPointer , link , next , isConst , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2300 :	"*"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { - , func , type , tok , previous , Token , == , Function , Match , function , ! , nameToken , strAt , isStlType , || , && , startTok , astOperand2 , if , var , tokenDef , isPointer , link , next , isConst , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2300 :	"var"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { - , func , type , tok , previous , Token , == , Function , Match , function , ! , nameToken , strAt , isStlType , || , && , startTok , astOperand2 , if , var , tokenDef , isPointer , link , next , isConst , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2300 :	"symbolDatabase"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { - , func , type , tok , previous , Token , == , Function , Match , function , ! , nameToken , strAt , isStlType , || , && , startTok , astOperand2 , if , var , tokenDef , isPointer , link , next , isConst , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2300 :	"variableList"
		- NEIGH  = { Variable , symbolDatabase , * , var , variableList , for , }
		- PARENT = { }
		- CHILD  = { - , func , type , tok , previous , Token , == , Function , Match , function , ! , nameToken , strAt , isStlType , || , && , startTok , astOperand2 , if , var , tokenDef , isPointer , link , next , isConst , * , isReference , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2301 :	"if"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"!"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"var"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"||"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"var"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"isReference"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"||"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"!"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"var"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"isConst"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"||"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"var"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"isPointer"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"||"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"!"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"var"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"type"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"&&"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"!"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"var"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2301 :	"isStlType"
		- NEIGH  = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { var , nameToken , startTok , * , Token , }

2302 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2304 :	"Token"
		- NEIGH  = { var , nameToken , startTok , * , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- SUCC   = { == , strAt , startTok , if , }

2304 :	"*"
		- NEIGH  = { var , nameToken , startTok , * , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- SUCC   = { == , strAt , startTok , if , }

2304 :	"startTok"
		- NEIGH  = { var , nameToken , startTok , * , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- SUCC   = { == , strAt , startTok , if , }

2304 :	"var"
		- NEIGH  = { var , nameToken , startTok , * , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- SUCC   = { == , strAt , startTok , if , }

2304 :	"nameToken"
		- NEIGH  = { var , nameToken , startTok , * , Token , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { isStlType , type , && , isPointer , isConst , var , isReference , || , ! , if , }
		- SUCC   = { == , strAt , startTok , if , }

2305 :	"if"
		- NEIGH  = { == , strAt , startTok , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PRED   = { var , nameToken , startTok , * , Token , }
		- SUCC   = { astOperand2 , Token , next , tok , startTok , * , }

2305 :	"startTok"
		- NEIGH  = { == , strAt , startTok , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PRED   = { var , nameToken , startTok , * , Token , }
		- SUCC   = { astOperand2 , Token , next , tok , startTok , * , }

2305 :	"strAt"
		- NEIGH  = { == , strAt , startTok , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PRED   = { var , nameToken , startTok , * , Token , }
		- SUCC   = { astOperand2 , Token , next , tok , startTok , * , }

2305 :	"=="
		- NEIGH  = { == , strAt , startTok , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PRED   = { var , nameToken , startTok , * , Token , }
		- SUCC   = { astOperand2 , Token , next , tok , startTok , * , }

2307 :	"if"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"startTok"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"strAt"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"=="
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"&&"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"var"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"isClass"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"&&"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"var"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2307 :	"typeScope"
		- NEIGH  = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- PARENT = { == , strAt , startTok , if , }
		- CHILD  = { continue , typeScope , constructorTakesReference , var , if , }
		- PRED   = { }
		- SUCC   = { }

2309 :	"if"
		- NEIGH  = { typeScope , constructorTakesReference , var , if , }
		- PARENT = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

2309 :	"constructorTakesReference"
		- NEIGH  = { typeScope , constructorTakesReference , var , if , }
		- PARENT = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

2309 :	"var"
		- NEIGH  = { typeScope , constructorTakesReference , var , if , }
		- PARENT = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

2309 :	"typeScope"
		- NEIGH  = { typeScope , constructorTakesReference , var , if , }
		- PARENT = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { }

2310 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { typeScope , constructorTakesReference , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2312 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { typeScope , isClass , var , == , && , strAt , startTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2314 :	"Token"
		- NEIGH  = { astOperand2 , Token , next , tok , startTok , * , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { == , strAt , startTok , if , }
		- SUCC   = { tok , ! , if , }

2314 :	"*"
		- NEIGH  = { astOperand2 , Token , next , tok , startTok , * , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { == , strAt , startTok , if , }
		- SUCC   = { tok , ! , if , }

2314 :	"tok"
		- NEIGH  = { astOperand2 , Token , next , tok , startTok , * , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { == , strAt , startTok , if , }
		- SUCC   = { tok , ! , if , }

2314 :	"startTok"
		- NEIGH  = { astOperand2 , Token , next , tok , startTok , * , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { == , strAt , startTok , if , }
		- SUCC   = { tok , ! , if , }

2314 :	"next"
		- NEIGH  = { astOperand2 , Token , next , tok , startTok , * , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { == , strAt , startTok , if , }
		- SUCC   = { tok , ! , if , }

2314 :	"astOperand2"
		- NEIGH  = { astOperand2 , Token , next , tok , startTok , * , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { == , strAt , startTok , if , }
		- SUCC   = { tok , ! , if , }

2315 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , Token , next , tok , startTok , * , }
		- SUCC   = { previous , tok , Token , if , ! , Match , }

2315 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , Token , next , tok , startTok , * , }
		- SUCC   = { previous , tok , Token , if , ! , Match , }

2315 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , Token , next , tok , startTok , * , }
		- SUCC   = { previous , tok , Token , if , ! , Match , }

2316 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2317 :	"if"
		- NEIGH  = { previous , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { link , tok , Token , if , ! , Match , }

2317 :	"!"
		- NEIGH  = { previous , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { link , tok , Token , if , ! , Match , }

2317 :	"Token"
		- NEIGH  = { previous , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { link , tok , Token , if , ! , Match , }

2317 :	"Match"
		- NEIGH  = { previous , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { link , tok , Token , if , ! , Match , }

2317 :	"tok"
		- NEIGH  = { previous , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { link , tok , Token , if , ! , Match , }

2317 :	"previous"
		- NEIGH  = { previous , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , if , }
		- SUCC   = { link , tok , Token , if , ! , Match , }

2318 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { previous , tok , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2319 :	"if"
		- NEIGH  = { link , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , tok , Token , if , ! , Match , }
		- SUCC   = { function , tok , func , * , previous , Function , }

2319 :	"!"
		- NEIGH  = { link , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , tok , Token , if , ! , Match , }
		- SUCC   = { function , tok , func , * , previous , Function , }

2319 :	"Token"
		- NEIGH  = { link , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , tok , Token , if , ! , Match , }
		- SUCC   = { function , tok , func , * , previous , Function , }

2319 :	"Match"
		- NEIGH  = { link , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , tok , Token , if , ! , Match , }
		- SUCC   = { function , tok , func , * , previous , Function , }

2319 :	"tok"
		- NEIGH  = { link , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , tok , Token , if , ! , Match , }
		- SUCC   = { function , tok , func , * , previous , Function , }

2319 :	"link"
		- NEIGH  = { link , tok , Token , if , ! , Match , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , tok , Token , if , ! , Match , }
		- SUCC   = { function , tok , func , * , previous , Function , }

2320 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { link , tok , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2322 :	"Function"
		- NEIGH  = { function , tok , func , * , previous , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { link , tok , Token , if , ! , Match , }
		- SUCC   = { - , if , tokenDef , strAt , == , && , func , }

2322 :	"*"
		- NEIGH  = { function , tok , func , * , previous , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { link , tok , Token , if , ! , Match , }
		- SUCC   = { - , if , tokenDef , strAt , == , && , func , }

2322 :	"func"
		- NEIGH  = { function , tok , func , * , previous , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { link , tok , Token , if , ! , Match , }
		- SUCC   = { - , if , tokenDef , strAt , == , && , func , }

2322 :	"tok"
		- NEIGH  = { function , tok , func , * , previous , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { link , tok , Token , if , ! , Match , }
		- SUCC   = { - , if , tokenDef , strAt , == , && , func , }

2322 :	"previous"
		- NEIGH  = { function , tok , func , * , previous , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { link , tok , Token , if , ! , Match , }
		- SUCC   = { - , if , tokenDef , strAt , == , && , func , }

2322 :	"function"
		- NEIGH  = { function , tok , func , * , previous , Function , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { }
		- PRED   = { link , tok , Token , if , ! , Match , }
		- SUCC   = { - , if , tokenDef , strAt , == , && , func , }

2323 :	"if"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"func"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"&&"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"func"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"tokenDef"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"strAt"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"-"
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2323 :	"=="
		- NEIGH  = { - , if , tokenDef , strAt , == , && , func , }
		- PARENT = { Variable , symbolDatabase , * , var , variableList , for , }
		- CHILD  = { str , startTok , redundantCopyError , }
		- PRED   = { function , tok , func , * , previous , Function , }
		- SUCC   = { }

2324 :	"redundantCopyError"
		- NEIGH  = { str , startTok , redundantCopyError , }
		- PARENT = { - , if , tokenDef , strAt , == , && , func , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2324 :	"startTok"
		- NEIGH  = { str , startTok , redundantCopyError , }
		- PARENT = { - , if , tokenDef , strAt , == , && , func , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2324 :	"startTok"
		- NEIGH  = { str , startTok , redundantCopyError , }
		- PARENT = { - , if , tokenDef , strAt , == , && , func , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2324 :	"str"
		- NEIGH  = { str , startTok , redundantCopyError , }
		- PARENT = { - , if , tokenDef , strAt , == , && , func , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"redundantCopyError"
		- NEIGH  = { redundantCopyError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2328 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2330 :	"reportError"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2330 :	"tok"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2330 :	"Severity"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2330 :	"performance"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2331 :	"+"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2331 :	"varname"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2331 :	"+"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2335 :	"CWE398"
		- NEIGH  = { CWE398 , varname , + , performance , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"isNegative"
		- NEIGH  = { isNegative , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"Settings"
		- NEIGH  = { Settings , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2343 :	"settings"
		- NEIGH  = { settings , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"return"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"tok"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"valueType"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"&&"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"tok"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"valueType"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"sign"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"=="
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"ValueType"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"SIGNED"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"&&"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"tok"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"getValueLE"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"-"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2345 :	"settings"
		- NEIGH  = { getValueLE , SIGNED , ValueType , == , && , settings , tok , valueType , sign , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2348 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2348 :	"checkNegativeBitwiseShift"
		- NEIGH  = { checkNegativeBitwiseShift , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2350 :	"portability"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2350 :	"mSettings"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2350 :	"isEnabled"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2350 :	"Settings"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2350 :	"PORTABILITY"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2352 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2352 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { && , portability , parent , * , mSettings , astParent , for , Match , isCPP , ! , Token , ternary , || , astOperand1 , mTokenizer , tok , isNegative , astOperand2 , if , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , portability , }
		- SUCC   = { }

2353 :	"if"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"!"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"tok"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"astOperand1"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"||"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"!"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"tok"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2353 :	"astOperand2"
		- NEIGH  = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , Token , ! , Match , if , }

2354 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2356 :	"if"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- SUCC   = { mTokenizer , isCPP , if , }

2356 :	"!"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- SUCC   = { mTokenizer , isCPP , if , }

2356 :	"Token"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- SUCC   = { mTokenizer , isCPP , if , }

2356 :	"Match"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- SUCC   = { mTokenizer , isCPP , if , }

2356 :	"tok"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , astOperand1 , tok , astOperand2 , ! , if , }
		- SUCC   = { mTokenizer , isCPP , if , }

2357 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2360 :	"if"
		- NEIGH  = { mTokenizer , isCPP , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isIntegral , valueType , tok , ! , if , lhsType , || , astOperand1 , * , ValueType , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { ternary , }

2360 :	"mTokenizer"
		- NEIGH  = { mTokenizer , isCPP , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isIntegral , valueType , tok , ! , if , lhsType , || , astOperand1 , * , ValueType , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { ternary , }

2360 :	"isCPP"
		- NEIGH  = { mTokenizer , isCPP , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { isIntegral , valueType , tok , ! , if , lhsType , || , astOperand1 , * , ValueType , }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { ternary , }

2361 :	"ValueType"
		- NEIGH  = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isIntegral , lhsType , || , ! , if , }

2361 :	"*"
		- NEIGH  = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isIntegral , lhsType , || , ! , if , }

2361 :	"lhsType"
		- NEIGH  = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isIntegral , lhsType , || , ! , if , }

2361 :	"tok"
		- NEIGH  = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isIntegral , lhsType , || , ! , if , }

2361 :	"astOperand1"
		- NEIGH  = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isIntegral , lhsType , || , ! , if , }

2361 :	"valueType"
		- NEIGH  = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { isIntegral , lhsType , || , ! , if , }

2362 :	"if"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2362 :	"!"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2362 :	"lhsType"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2362 :	"||"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2362 :	"!"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2362 :	"lhsType"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2362 :	"isIntegral"
		- NEIGH  = { isIntegral , lhsType , || , ! , if , }
		- PARENT = { mTokenizer , isCPP , if , }
		- CHILD  = { continue , }
		- PRED   = { valueType , tok , lhsType , astOperand1 , * , ValueType , }
		- SUCC   = { }

2363 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isIntegral , lhsType , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2367 :	"ternary"
		- NEIGH  = { ternary , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { mTokenizer , isCPP , if , }
		- SUCC   = { astParent , tok , parent , * , Token , for , }

2368 :	"for"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"Token"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"*"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"parent"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"tok"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"parent"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"parent"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"parent"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2368 :	"astParent"
		- NEIGH  = { astParent , tok , parent , * , Token , for , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { parent , Token , Match , if , }
		- PRED   = { ternary , }
		- SUCC   = { ternary , if , }

2369 :	"if"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , parent , * , Token , for , }
		- CHILD  = { break , ternary , }
		- PRED   = { }
		- SUCC   = { }

2369 :	"Token"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , parent , * , Token , for , }
		- CHILD  = { break , ternary , }
		- PRED   = { }
		- SUCC   = { }

2369 :	"Match"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , parent , * , Token , for , }
		- CHILD  = { break , ternary , }
		- PRED   = { }
		- SUCC   = { }

2369 :	"parent"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , parent , * , Token , for , }
		- CHILD  = { break , ternary , }
		- PRED   = { }
		- SUCC   = { }

2370 :	"ternary"
		- NEIGH  = { ternary , }
		- PARENT = { parent , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2371 :	"break"
		- NEIGH  = { break , }
		- PARENT = { parent , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { ternary , }
		- SUCC   = { }

2374 :	"if"
		- NEIGH  = { ternary , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , parent , * , Token , for , }
		- SUCC   = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }

2374 :	"ternary"
		- NEIGH  = { ternary , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , parent , * , Token , for , }
		- SUCC   = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }

2375 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { ternary , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2378 :	"if"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2378 :	"portability"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2378 :	"&&"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2378 :	"isNegative"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2378 :	"tok"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2378 :	"astOperand1"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2378 :	"mSettings"
		- NEIGH  = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { mSettings , if , astOperand2 , isNegative , tok , negativeBitwiseShiftError , }
		- PRED   = { ternary , if , }
		- SUCC   = { }

2379 :	"negativeBitwiseShiftError"
		- NEIGH  = { tok , negativeBitwiseShiftError , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2379 :	"tok"
		- NEIGH  = { tok , negativeBitwiseShiftError , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2380 :	"if"
		- NEIGH  = { mSettings , astOperand2 , tok , isNegative , if , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { tok , negativeBitwiseShiftError , }
		- PRED   = { }
		- SUCC   = { }

2380 :	"isNegative"
		- NEIGH  = { mSettings , astOperand2 , tok , isNegative , if , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { tok , negativeBitwiseShiftError , }
		- PRED   = { }
		- SUCC   = { }

2380 :	"tok"
		- NEIGH  = { mSettings , astOperand2 , tok , isNegative , if , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { tok , negativeBitwiseShiftError , }
		- PRED   = { }
		- SUCC   = { }

2380 :	"astOperand2"
		- NEIGH  = { mSettings , astOperand2 , tok , isNegative , if , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { tok , negativeBitwiseShiftError , }
		- PRED   = { }
		- SUCC   = { }

2380 :	"mSettings"
		- NEIGH  = { mSettings , astOperand2 , tok , isNegative , if , }
		- PARENT = { mSettings , astOperand1 , && , tok , portability , isNegative , if , }
		- CHILD  = { tok , negativeBitwiseShiftError , }
		- PRED   = { }
		- SUCC   = { }

2381 :	"negativeBitwiseShiftError"
		- NEIGH  = { tok , negativeBitwiseShiftError , }
		- PARENT = { mSettings , astOperand2 , tok , isNegative , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2381 :	"tok"
		- NEIGH  = { tok , negativeBitwiseShiftError , }
		- PARENT = { mSettings , astOperand2 , tok , isNegative , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2386 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2386 :	"negativeBitwiseShiftError"
		- NEIGH  = { negativeBitwiseShiftError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2386 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2386 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2386 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2386 :	"op"
		- NEIGH  = { op , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2388 :	"if"
		- NEIGH  = { == , op , if , }
		- PARENT = { }
		- CHILD  = { error , Severity , CWE758 , portability , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2388 :	"op"
		- NEIGH  = { == , op , if , }
		- PARENT = { }
		- CHILD  = { error , Severity , CWE758 , portability , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2388 :	"=="
		- NEIGH  = { == , op , if , }
		- PARENT = { }
		- CHILD  = { error , Severity , CWE758 , portability , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2392 :	"reportError"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2392 :	"tok"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2392 :	"Severity"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2392 :	"portability"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2392 :	"CWE758"
		- NEIGH  = { CWE758 , portability , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2394 :	"reportError"
		- NEIGH  = { CWE758 , error , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2394 :	"tok"
		- NEIGH  = { CWE758 , error , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2394 :	"Severity"
		- NEIGH  = { CWE758 , error , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2394 :	"error"
		- NEIGH  = { CWE758 , error , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2394 :	"CWE758"
		- NEIGH  = { CWE758 , error , tok , Severity , reportError , }
		- PARENT = { == , op , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2400 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2400 :	"checkIncompleteArrayFill"
		- NEIGH  = { checkIncompleteArrayFill , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2402 :	"if"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { WARNING , isEnabled , mSettings , Settings , printWarning , }

2402 :	"!"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { WARNING , isEnabled , mSettings , Settings , printWarning , }

2402 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { WARNING , isEnabled , mSettings , Settings , printWarning , }

2402 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { WARNING , isEnabled , mSettings , Settings , printWarning , }

2403 :	"return"
		- NEIGH  = { return , }
		- PARENT = { inconclusive , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2404 :	"printWarning"
		- NEIGH  = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }

2404 :	"mSettings"
		- NEIGH  = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }

2404 :	"isEnabled"
		- NEIGH  = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }

2404 :	"Settings"
		- NEIGH  = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }

2404 :	"WARNING"
		- NEIGH  = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , ! , if , }
		- SUCC   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }

2405 :	"printPortability"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- SUCC   = { && , printWarning , printPortability , ! , if , }

2405 :	"mSettings"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- SUCC   = { && , printWarning , printPortability , ! , if , }

2405 :	"isEnabled"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- SUCC   = { && , printWarning , printPortability , ! , if , }

2405 :	"Settings"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- SUCC   = { && , printWarning , printPortability , ! , if , }

2405 :	"PORTABILITY"
		- NEIGH  = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , isEnabled , mSettings , Settings , printWarning , }
		- SUCC   = { && , printWarning , printPortability , ! , if , }

2406 :	"if"
		- NEIGH  = { && , printWarning , printPortability , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2406 :	"!"
		- NEIGH  = { && , printWarning , printPortability , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2406 :	"printPortability"
		- NEIGH  = { && , printWarning , printPortability , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2406 :	"&&"
		- NEIGH  = { && , printWarning , printPortability , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2406 :	"!"
		- NEIGH  = { && , printWarning , printPortability , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2406 :	"printWarning"
		- NEIGH  = { && , printWarning , printPortability , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { isEnabled , mSettings , PORTABILITY , Settings , printPortability , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2407 :	"return"
		- NEIGH  = { return , }
		- PARENT = { && , printWarning , printPortability , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2409 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , printWarning , printPortability , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2409 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , printWarning , printPortability , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2409 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , printWarning , printPortability , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2409 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , printWarning , printPortability , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2409 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { && , printWarning , printPortability , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2411 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2411 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2411 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2411 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2411 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2411 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2412 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2412 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"if"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"Token"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"Match"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"tok"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"&&"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"Token"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"Match"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"tok"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"linkAt"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"tokAt"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2413 :	"-"
		- NEIGH  = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { == , toLongNumber , - , linkAt , MathLib , || , ! , if , empty , isArray , dimensions , strAt , Variable , tok , dimension , variable , var , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2414 :	"Variable"
		- NEIGH  = { tok , variable , var , tokAt , * , Variable , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dimension , empty , dimensions , isArray , || , if , ! , var , }

2414 :	"*"
		- NEIGH  = { tok , variable , var , tokAt , * , Variable , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dimension , empty , dimensions , isArray , || , if , ! , var , }

2414 :	"var"
		- NEIGH  = { tok , variable , var , tokAt , * , Variable , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dimension , empty , dimensions , isArray , || , if , ! , var , }

2414 :	"tok"
		- NEIGH  = { tok , variable , var , tokAt , * , Variable , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dimension , empty , dimensions , isArray , || , if , ! , var , }

2414 :	"tokAt"
		- NEIGH  = { tok , variable , var , tokAt , * , Variable , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dimension , empty , dimensions , isArray , || , if , ! , var , }

2414 :	"variable"
		- NEIGH  = { tok , variable , var , tokAt , * , Variable , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dimension , empty , dimensions , isArray , || , if , ! , var , }

2415 :	"if"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"!"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"var"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"||"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"!"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"var"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"isArray"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"||"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"var"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"dimensions"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"empty"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"||"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"!"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"var"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2415 :	"dimension"
		- NEIGH  = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { continue , }
		- PRED   = { tok , variable , var , tokAt , * , Variable , }
		- SUCC   = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }

2416 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2418 :	"if"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"MathLib"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"toLongNumber"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"tok"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"linkAt"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"strAt"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"-"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"=="
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"var"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2418 :	"dimension"
		- NEIGH  = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- PARENT = { - , tokAt , && , linkAt , tok , Token , Match , if , }
		- CHILD  = { pointer , && , valueType , == , if , || , typeStartToken , isPointer , var , mTokenizer , sizeOfType , != , size , }
		- PRED   = { dimension , empty , dimensions , isArray , || , if , ! , var , }
		- SUCC   = { }

2419 :	"size"
		- NEIGH  = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , valueType , && , == , size , var , if , }

2419 :	"mTokenizer"
		- NEIGH  = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , valueType , && , == , size , var , if , }

2419 :	"sizeOfType"
		- NEIGH  = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , valueType , && , == , size , var , if , }

2419 :	"var"
		- NEIGH  = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , valueType , && , == , size , var , if , }

2419 :	"typeStartToken"
		- NEIGH  = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pointer , valueType , && , == , size , var , if , }

2420 :	"if"
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2420 :	"size"
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2420 :	"=="
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2420 :	"&&"
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2420 :	"var"
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2420 :	"valueType"
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2420 :	"pointer"
		- NEIGH  = { pointer , valueType , && , == , size , var , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { sizeof_pointer , mSettings , size , }
		- PRED   = { typeStartToken , var , sizeOfType , mTokenizer , size , }
		- SUCC   = { var , isPointer , && , != , || , size , if , }

2421 :	"size"
		- NEIGH  = { sizeof_pointer , mSettings , size , }
		- PARENT = { pointer , valueType , && , == , size , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2421 :	"mSettings"
		- NEIGH  = { sizeof_pointer , mSettings , size , }
		- PARENT = { pointer , valueType , && , == , size , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2421 :	"sizeof_pointer"
		- NEIGH  = { sizeof_pointer , mSettings , size , }
		- PARENT = { pointer , valueType , && , == , size , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2422 :	"if"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"size"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"!="
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"&&"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"size"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"!="
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"&&"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"size"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"!="
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"||"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"var"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2422 :	"isPointer"
		- NEIGH  = { var , isPointer , && , != , || , size , if , }
		- PARENT = { var , == , - , dimension , strAt , linkAt , tok , MathLib , toLongNumber , if , }
		- CHILD  = { printPortability , ValueType , && , Type , == , valueType , type , BOOL , printWarning , var , if , }
		- PRED   = { pointer , valueType , && , == , size , var , if , }
		- SUCC   = { }

2423 :	"if"
		- NEIGH  = { printWarning , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2423 :	"printWarning"
		- NEIGH  = { printWarning , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2424 :	"incompleteArrayFillError"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2424 :	"tok"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2424 :	"var"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2424 :	"name"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2424 :	"tok"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2424 :	"str"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printWarning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2425 :	"if"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"var"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"valueType"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"type"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"=="
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"ValueType"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"Type"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"BOOL"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"&&"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2425 :	"printPortability"
		- NEIGH  = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- PARENT = { var , isPointer , && , != , || , size , if , }
		- CHILD  = { str , tok , name , var , incompleteArrayFillError , }
		- PRED   = { }
		- SUCC   = { }

2426 :	"incompleteArrayFillError"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2426 :	"tok"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2426 :	"var"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2426 :	"name"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2426 :	"tok"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2426 :	"str"
		- NEIGH  = { str , tok , name , var , incompleteArrayFillError , }
		- PARENT = { printPortability , BOOL , ValueType , && , Type , == , type , valueType , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"incompleteArrayFillError"
		- NEIGH  = { incompleteArrayFillError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"buffer"
		- NEIGH  = { buffer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"function"
		- NEIGH  = { function , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2433 :	"boolean"
		- NEIGH  = { boolean , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2435 :	"if"
		- NEIGH  = { boolean , if , }
		- PARENT = { }
		- CHILD  = { + , warning , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PRED   = { }
		- SUCC   = { }

2435 :	"boolean"
		- NEIGH  = { boolean , if , }
		- PARENT = { }
		- CHILD  = { + , warning , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PRED   = { }
		- SUCC   = { }

2436 :	"reportError"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2436 :	"tok"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2436 :	"Severity"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2436 :	"portability"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2437 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2437 :	"buffer"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2437 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2438 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2438 :	"function"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2438 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"buffer"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"function"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"buffer"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2439 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"buffer"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"function"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"buffer"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"+"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2440 :	"CWE131"
		- NEIGH  = { + , function , portability , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2442 :	"reportError"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2442 :	"tok"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2442 :	"Severity"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2442 :	"warning"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2443 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2443 :	"buffer"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2443 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2444 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2444 :	"function"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2444 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"buffer"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"function"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"buffer"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2445 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"buffer"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"function"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"buffer"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"+"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2446 :	"CWE131"
		- NEIGH  = { + , function , warning , tok , CWE131 , Severity , buffer , reportError , }
		- PARENT = { boolean , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2453 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2453 :	"checkVarFuncNullUB"
		- NEIGH  = { checkVarFuncNullUB , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2455 :	"if"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2455 :	"!"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2455 :	"mSettings"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2455 :	"isEnabled"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2455 :	"Settings"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2455 :	"PORTABILITY"
		- NEIGH  = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2456 :	"return"
		- NEIGH  = { return , }
		- PARENT = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2458 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2458 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2458 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2458 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2458 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PORTABILITY , Settings , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2459 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2459 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2459 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2459 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2459 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2459 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2460 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2460 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { tok , Token , Match , if , }
		- PRED   = { }
		- SUCC   = { }

2462 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isName , str , if , previous , && , while , ftok , Token , argnr , != , tok , * , }
		- PRED   = { }
		- SUCC   = { }

2462 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isName , str , if , previous , && , while , ftok , Token , argnr , != , tok , * , }
		- PRED   = { }
		- SUCC   = { }

2462 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isName , str , if , previous , && , while , ftok , Token , argnr , != , tok , * , }
		- PRED   = { }
		- SUCC   = { }

2462 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { isName , str , if , previous , && , while , ftok , Token , argnr , != , tok , * , }
		- PRED   = { }
		- SUCC   = { }

2464 :	"Token"
		- NEIGH  = { tok , ftok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , }

2464 :	"*"
		- NEIGH  = { tok , ftok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , }

2464 :	"ftok"
		- NEIGH  = { tok , ftok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , }

2464 :	"tok"
		- NEIGH  = { tok , ftok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , }

2465 :	"argnr"
		- NEIGH  = { argnr , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , ftok , * , Token , }
		- SUCC   = { str , && , != , ftok , while , }

2466 :	"while"
		- NEIGH  = { str , && , != , ftok , while , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , == , ftok , previous , if , }
		- PRED   = { argnr , }
		- SUCC   = { previous , ftok , }

2466 :	"ftok"
		- NEIGH  = { str , && , != , ftok , while , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , == , ftok , previous , if , }
		- PRED   = { argnr , }
		- SUCC   = { previous , ftok , }

2466 :	"&&"
		- NEIGH  = { str , && , != , ftok , while , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , == , ftok , previous , if , }
		- PRED   = { argnr , }
		- SUCC   = { previous , ftok , }

2466 :	"ftok"
		- NEIGH  = { str , && , != , ftok , while , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , == , ftok , previous , if , }
		- PRED   = { argnr , }
		- SUCC   = { previous , ftok , }

2466 :	"str"
		- NEIGH  = { str , && , != , ftok , while , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , == , ftok , previous , if , }
		- PRED   = { argnr , }
		- SUCC   = { previous , ftok , }

2466 :	"!="
		- NEIGH  = { str , && , != , ftok , while , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { str , == , ftok , previous , if , }
		- PRED   = { argnr , }
		- SUCC   = { previous , ftok , }

2467 :	"if"
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { str , if , link , == , ftok , }
		- PRED   = { }
		- SUCC   = { previous , ftok , }

2467 :	"ftok"
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { str , if , link , == , ftok , }
		- PRED   = { }
		- SUCC   = { previous , ftok , }

2467 :	"str"
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { str , if , link , == , ftok , }
		- PRED   = { }
		- SUCC   = { previous , ftok , }

2467 :	"=="
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { str , if , link , == , ftok , }
		- PRED   = { }
		- SUCC   = { previous , ftok , }

2468 :	"ftok"
		- NEIGH  = { link , ftok , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2468 :	"ftok"
		- NEIGH  = { link , ftok , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2468 :	"link"
		- NEIGH  = { link , ftok , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2469 :	"if"
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { argnr , ++ , }
		- PRED   = { }
		- SUCC   = { }

2469 :	"ftok"
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { argnr , ++ , }
		- PRED   = { }
		- SUCC   = { }

2469 :	"str"
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { argnr , ++ , }
		- PRED   = { }
		- SUCC   = { }

2469 :	"=="
		- NEIGH  = { str , == , ftok , if , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { argnr , ++ , }
		- PRED   = { }
		- SUCC   = { }

2470 :	"++"
		- NEIGH  = { argnr , ++ , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2470 :	"argnr"
		- NEIGH  = { argnr , ++ , }
		- PARENT = { str , == , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2471 :	"ftok"
		- NEIGH  = { previous , ftok , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { }
		- PRED   = { str , == , ftok , if , }
		- SUCC   = { }

2471 :	"ftok"
		- NEIGH  = { previous , ftok , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { }
		- PRED   = { str , == , ftok , if , }
		- SUCC   = { }

2471 :	"previous"
		- NEIGH  = { previous , ftok , }
		- PARENT = { str , && , != , ftok , while , }
		- CHILD  = { }
		- PRED   = { str , == , ftok , if , }
		- SUCC   = { }

2473 :	"ftok"
		- NEIGH  = { previous , ftok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { str , && , != , ftok , while , }
		- SUCC   = { isName , && , ftok , if , }

2473 :	"ftok"
		- NEIGH  = { previous , ftok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { str , && , != , ftok , while , }
		- SUCC   = { isName , && , ftok , if , }

2473 :	"ftok"
		- NEIGH  = { previous , ftok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { str , && , != , ftok , while , }
		- SUCC   = { isName , && , ftok , if , }

2473 :	"previous"
		- NEIGH  = { previous , ftok , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { str , && , != , ftok , while , }
		- SUCC   = { isName , && , ftok , if , }

2474 :	"if"
		- NEIGH  = { isName , && , ftok , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { argCount , if , <= , function , argnr , ftok , && , f , * , Function , }
		- PRED   = { previous , ftok , }
		- SUCC   = { }

2474 :	"ftok"
		- NEIGH  = { isName , && , ftok , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { argCount , if , <= , function , argnr , ftok , && , f , * , Function , }
		- PRED   = { previous , ftok , }
		- SUCC   = { }

2474 :	"&&"
		- NEIGH  = { isName , && , ftok , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { argCount , if , <= , function , argnr , ftok , && , f , * , Function , }
		- PRED   = { previous , ftok , }
		- SUCC   = { }

2474 :	"ftok"
		- NEIGH  = { isName , && , ftok , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { argCount , if , <= , function , argnr , ftok , && , f , * , Function , }
		- PRED   = { previous , ftok , }
		- SUCC   = { }

2474 :	"isName"
		- NEIGH  = { isName , && , ftok , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { argCount , if , <= , function , argnr , ftok , && , f , * , Function , }
		- PRED   = { previous , ftok , }
		- SUCC   = { }

2476 :	"Function"
		- NEIGH  = { function , ftok , f , * , Function , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , <= , argCount , && , f , if , }

2476 :	"*"
		- NEIGH  = { function , ftok , f , * , Function , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , <= , argCount , && , f , if , }

2476 :	"f"
		- NEIGH  = { function , ftok , f , * , Function , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , <= , argCount , && , f , if , }

2476 :	"ftok"
		- NEIGH  = { function , ftok , f , * , Function , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , <= , argCount , && , f , if , }

2476 :	"function"
		- NEIGH  = { function , ftok , f , * , Function , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argnr , <= , argCount , && , f , if , }

2477 :	"if"
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2477 :	"f"
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2477 :	"&&"
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2477 :	"f"
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2477 :	"argCount"
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2477 :	"<="
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2477 :	"argnr"
		- NEIGH  = { argnr , <= , argCount , && , f , if , }
		- PARENT = { isName , && , ftok , if , }
		- CHILD  = { if , - , link , argDef , && , f , tokAt , simpleMatch , tok2 , * , Token , }
		- PRED   = { function , ftok , f , * , Function , }
		- SUCC   = { }

2478 :	"Token"
		- NEIGH  = { argDef , f , tok2 , * , Token , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { link , tok2 , }

2478 :	"*"
		- NEIGH  = { argDef , f , tok2 , * , Token , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { link , tok2 , }

2478 :	"tok2"
		- NEIGH  = { argDef , f , tok2 , * , Token , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { link , tok2 , }

2478 :	"f"
		- NEIGH  = { argDef , f , tok2 , * , Token , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { link , tok2 , }

2478 :	"argDef"
		- NEIGH  = { argDef , f , tok2 , * , Token , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { link , tok2 , }

2479 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { argDef , f , tok2 , * , Token , }
		- SUCC   = { - , tokAt , tok2 , simpleMatch , && , Token , if , }

2479 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { argDef , f , tok2 , * , Token , }
		- SUCC   = { - , tokAt , tok2 , simpleMatch , && , Token , if , }

2479 :	"tok2"
		- NEIGH  = { link , tok2 , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { argDef , f , tok2 , * , Token , }
		- SUCC   = { - , tokAt , tok2 , simpleMatch , && , Token , if , }

2479 :	"link"
		- NEIGH  = { link , tok2 , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { }
		- PRED   = { argDef , f , tok2 , * , Token , }
		- SUCC   = { - , tokAt , tok2 , simpleMatch , && , Token , if , }

2480 :	"if"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"tok2"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"&&"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"Token"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"simpleMatch"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"tok2"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"tokAt"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2480 :	"-"
		- NEIGH  = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- PARENT = { argnr , <= , argCount , && , f , if , }
		- CHILD  = { tok , varFuncNullUBError , }
		- PRED   = { link , tok2 , }
		- SUCC   = { }

2481 :	"varFuncNullUBError"
		- NEIGH  = { tok , varFuncNullUBError , }
		- PARENT = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2481 :	"tok"
		- NEIGH  = { tok , varFuncNullUBError , }
		- PARENT = { - , tokAt , tok2 , simpleMatch , && , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2489 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2489 :	"varFuncNullUBError"
		- NEIGH  = { varFuncNullUBError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2489 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2489 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2489 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2491 :	"reportError"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2491 :	"tok"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2492 :	"Severity"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2492 :	"portability"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2500 :	"n"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2501 :	"n"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2533 :	"CWE475"
		- NEIGH  = { CWE475 , n , portability , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2536 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2536 :	"checkRedundantPointerOp"
		- NEIGH  = { checkRedundantPointerOp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2538 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2538 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2538 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2538 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2538 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2538 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2539 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2541 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2541 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { name , redundantPointerOpError , variable , isPointer , var , * , if , varTok , ! , isUnaryOp , Token , Variable , tok , isExpandedMacro , astOperand1 , || , }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { }

2542 :	"if"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"!"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"tok"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"isUnaryOp"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"||"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"!"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"tok"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2542 :	"isUnaryOp"
		- NEIGH  = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , astOperand1 , varTok , * , Token , }

2543 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2546 :	"Token"
		- NEIGH  = { tok , astOperand1 , varTok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- SUCC   = { isExpandedMacro , varTok , || , ! , if , }

2546 :	"*"
		- NEIGH  = { tok , astOperand1 , varTok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- SUCC   = { isExpandedMacro , varTok , || , ! , if , }

2546 :	"varTok"
		- NEIGH  = { tok , astOperand1 , varTok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- SUCC   = { isExpandedMacro , varTok , || , ! , if , }

2546 :	"tok"
		- NEIGH  = { tok , astOperand1 , varTok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- SUCC   = { isExpandedMacro , varTok , || , ! , if , }

2546 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , varTok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- SUCC   = { isExpandedMacro , varTok , || , ! , if , }

2546 :	"astOperand1"
		- NEIGH  = { tok , astOperand1 , varTok , * , Token , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , astOperand1 , || , isUnaryOp , ! , if , }
		- SUCC   = { isExpandedMacro , varTok , || , ! , if , }

2547 :	"if"
		- NEIGH  = { isExpandedMacro , varTok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , varTok , * , Token , }
		- SUCC   = { variable , varTok , * , var , Variable , }

2547 :	"!"
		- NEIGH  = { isExpandedMacro , varTok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , varTok , * , Token , }
		- SUCC   = { variable , varTok , * , var , Variable , }

2547 :	"varTok"
		- NEIGH  = { isExpandedMacro , varTok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , varTok , * , Token , }
		- SUCC   = { variable , varTok , * , var , Variable , }

2547 :	"||"
		- NEIGH  = { isExpandedMacro , varTok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , varTok , * , Token , }
		- SUCC   = { variable , varTok , * , var , Variable , }

2547 :	"varTok"
		- NEIGH  = { isExpandedMacro , varTok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , varTok , * , Token , }
		- SUCC   = { variable , varTok , * , var , Variable , }

2547 :	"isExpandedMacro"
		- NEIGH  = { isExpandedMacro , varTok , || , ! , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , astOperand1 , varTok , * , Token , }
		- SUCC   = { variable , varTok , * , var , Variable , }

2548 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isExpandedMacro , varTok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2550 :	"Variable"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isExpandedMacro , varTok , || , ! , if , }
		- SUCC   = { || , ! , isPointer , var , if , }

2550 :	"*"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isExpandedMacro , varTok , || , ! , if , }
		- SUCC   = { || , ! , isPointer , var , if , }

2550 :	"var"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isExpandedMacro , varTok , || , ! , if , }
		- SUCC   = { || , ! , isPointer , var , if , }

2550 :	"varTok"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isExpandedMacro , varTok , || , ! , if , }
		- SUCC   = { || , ! , isPointer , var , if , }

2550 :	"variable"
		- NEIGH  = { variable , varTok , * , var , Variable , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { isExpandedMacro , varTok , || , ! , if , }
		- SUCC   = { || , ! , isPointer , var , if , }

2551 :	"if"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2551 :	"!"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2551 :	"var"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2551 :	"||"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2551 :	"!"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2551 :	"var"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2551 :	"isPointer"
		- NEIGH  = { || , ! , isPointer , var , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , varTok , * , var , Variable , }
		- SUCC   = { name , var , tok , redundantPointerOpError , }

2552 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { || , ! , isPointer , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2554 :	"redundantPointerOpError"
		- NEIGH  = { name , var , tok , redundantPointerOpError , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , ! , isPointer , var , if , }
		- SUCC   = { }

2554 :	"tok"
		- NEIGH  = { name , var , tok , redundantPointerOpError , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , ! , isPointer , var , if , }
		- SUCC   = { }

2554 :	"var"
		- NEIGH  = { name , var , tok , redundantPointerOpError , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , ! , isPointer , var , if , }
		- SUCC   = { }

2554 :	"name"
		- NEIGH  = { name , var , tok , redundantPointerOpError , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , ! , isPointer , var , if , }
		- SUCC   = { }

2558 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"redundantPointerOpError"
		- NEIGH  = { redundantPointerOpError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2558 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2560 :	"reportError"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2560 :	"tok"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2560 :	"Severity"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2560 :	"style"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2561 :	"+"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2561 :	"varname"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2561 :	"+"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2562 :	"CWE398"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2562 :	"inconclusive"
		- NEIGH  = { inconclusive , CWE398 , varname , + , Severity , style , tok , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2565 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2565 :	"checkInterlockedDecrement"
		- NEIGH  = { checkInterlockedDecrement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2567 :	"if"
		- NEIGH  = { isWindowsPlatform , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2567 :	"!"
		- NEIGH  = { isWindowsPlatform , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2567 :	"mSettings"
		- NEIGH  = { isWindowsPlatform , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2567 :	"isWindowsPlatform"
		- NEIGH  = { isWindowsPlatform , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tokens , mTokenizer , tok , * , next , Token , for , }

2568 :	"return"
		- NEIGH  = { return , }
		- PARENT = { isWindowsPlatform , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2571 :	"for"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"Token"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"*"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"mTokenizer"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"tokens"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"tok"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2571 :	"next"
		- NEIGH  = { tokens , mTokenizer , tok , * , next , Token , for , }
		- PARENT = { }
		- CHILD  = { Match , && , Token , isName , tok , if , }
		- PRED   = { isWindowsPlatform , mSettings , ! , if , }
		- SUCC   = { }

2572 :	"if"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2572 :	"tok"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2572 :	"isName"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2572 :	"&&"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2572 :	"Token"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2572 :	"Match"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2572 :	"tok"
		- NEIGH  = { Match , && , Token , isName , tok , if , }
		- PARENT = { tokens , mTokenizer , tok , * , next , Token , for , }
		- CHILD  = { || , Match , str , if , tok , strAt , checkStartTok , == , && , interlockedVarTok , tokAt , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2573 :	"Token"
		- NEIGH  = { tok , interlockedVarTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }

2573 :	"*"
		- NEIGH  = { tok , interlockedVarTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }

2573 :	"interlockedVarTok"
		- NEIGH  = { tok , interlockedVarTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }

2573 :	"tok"
		- NEIGH  = { tok , interlockedVarTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }

2573 :	"tokAt"
		- NEIGH  = { tok , interlockedVarTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }

2574 :	"Token"
		- NEIGH  = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , interlockedVarTok , tokAt , * , Token , }
		- SUCC   = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }

2574 :	"*"
		- NEIGH  = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , interlockedVarTok , tokAt , * , Token , }
		- SUCC   = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }

2574 :	"checkStartTok"
		- NEIGH  = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , interlockedVarTok , tokAt , * , Token , }
		- SUCC   = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }

2574 :	"interlockedVarTok"
		- NEIGH  = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , interlockedVarTok , tokAt , * , Token , }
		- SUCC   = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }

2574 :	"tokAt"
		- NEIGH  = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , interlockedVarTok , tokAt , * , Token , }
		- SUCC   = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }

2575 :	"if"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"Token"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"Match"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"&&"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"strAt"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"=="
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"interlockedVarTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"str"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2575 :	"||"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"Token"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"Match"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"&&"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"strAt"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"=="
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"interlockedVarTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"str"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2576 :	"||"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"Token"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"Match"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"&&"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"str"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"=="
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"interlockedVarTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"str"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2577 :	"||"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"Token"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"Match"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"&&"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"checkStartTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"str"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"=="
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"interlockedVarTok"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2578 :	"str"
		- NEIGH  = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PRED   = { interlockedVarTok , checkStartTok , tokAt , * , Token , }
		- SUCC   = { }

2579 :	"raceAfterInterlockedDecrementError"
		- NEIGH  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PARENT = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2579 :	"checkStartTok"
		- NEIGH  = { checkStartTok , raceAfterInterlockedDecrementError , }
		- PARENT = { || , str , interlockedVarTok , == , && , Token , strAt , checkStartTok , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2581 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { && , == , if , str , condEnd , firstAccessTok , funcTok , link , Token , next , tok , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2581 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { && , == , if , str , condEnd , firstAccessTok , funcTok , link , Token , next , tok , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2581 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { && , == , if , str , condEnd , firstAccessTok , funcTok , link , Token , next , tok , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2581 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { Match , && , Token , isName , tok , if , }
		- CHILD  = { && , == , if , str , condEnd , firstAccessTok , funcTok , link , Token , next , tok , tokAt , * , }
		- PRED   = { }
		- SUCC   = { }

2582 :	"Token"
		- NEIGH  = { link , Token , next , tok , condEnd , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , funcTok , tokAt , * , Token , }

2582 :	"*"
		- NEIGH  = { link , Token , next , tok , condEnd , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , funcTok , tokAt , * , Token , }

2582 :	"condEnd"
		- NEIGH  = { link , Token , next , tok , condEnd , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , funcTok , tokAt , * , Token , }

2582 :	"tok"
		- NEIGH  = { link , Token , next , tok , condEnd , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , funcTok , tokAt , * , Token , }

2582 :	"next"
		- NEIGH  = { link , Token , next , tok , condEnd , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , funcTok , tokAt , * , Token , }

2582 :	"link"
		- NEIGH  = { link , Token , next , tok , condEnd , * , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , funcTok , tokAt , * , Token , }

2583 :	"Token"
		- NEIGH  = { tok , funcTok , tokAt , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { link , Token , next , tok , condEnd , * , }
		- SUCC   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }

2583 :	"*"
		- NEIGH  = { tok , funcTok , tokAt , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { link , Token , next , tok , condEnd , * , }
		- SUCC   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }

2583 :	"funcTok"
		- NEIGH  = { tok , funcTok , tokAt , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { link , Token , next , tok , condEnd , * , }
		- SUCC   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }

2583 :	"tok"
		- NEIGH  = { tok , funcTok , tokAt , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { link , Token , next , tok , condEnd , * , }
		- SUCC   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }

2583 :	"tokAt"
		- NEIGH  = { tok , funcTok , tokAt , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { link , Token , next , tok , condEnd , * , }
		- SUCC   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }

2584 :	"Token"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"*"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"firstAccessTok"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"funcTok"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"str"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"=="
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"funcTok"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"tokAt"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"funcTok"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2584 :	"tokAt"
		- NEIGH  = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { tok , funcTok , tokAt , * , Token , }
		- SUCC   = { && , link , condEnd , next , if , }

2585 :	"if"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"condEnd"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"&&"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"condEnd"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"next"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"&&"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"condEnd"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"next"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2585 :	"link"
		- NEIGH  = { && , link , condEnd , next , if , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { Match , if , link , Token , next , condEnd , ifEndTok , * , }
		- PRED   = { tokAt , == , funcTok , str , firstAccessTok , * , Token , }
		- SUCC   = { }

2586 :	"Token"
		- NEIGH  = { link , Token , next , condEnd , ifEndTok , * , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ifEndTok , Token , Match , if , }

2586 :	"*"
		- NEIGH  = { link , Token , next , condEnd , ifEndTok , * , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ifEndTok , Token , Match , if , }

2586 :	"ifEndTok"
		- NEIGH  = { link , Token , next , condEnd , ifEndTok , * , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ifEndTok , Token , Match , if , }

2586 :	"condEnd"
		- NEIGH  = { link , Token , next , condEnd , ifEndTok , * , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ifEndTok , Token , Match , if , }

2586 :	"next"
		- NEIGH  = { link , Token , next , condEnd , ifEndTok , * , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ifEndTok , Token , Match , if , }

2586 :	"link"
		- NEIGH  = { link , Token , next , condEnd , ifEndTok , * , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ifEndTok , Token , Match , if , }

2587 :	"if"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , Match , secondAccessTok , * , Token , }
		- PRED   = { link , Token , next , condEnd , ifEndTok , * , }
		- SUCC   = { }

2587 :	"Token"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , Match , secondAccessTok , * , Token , }
		- PRED   = { link , Token , next , condEnd , ifEndTok , * , }
		- SUCC   = { }

2587 :	"Match"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , Match , secondAccessTok , * , Token , }
		- PRED   = { link , Token , next , condEnd , ifEndTok , * , }
		- SUCC   = { }

2587 :	"ifEndTok"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { && , link , condEnd , next , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , Match , secondAccessTok , * , Token , }
		- PRED   = { link , Token , next , condEnd , ifEndTok , * , }
		- SUCC   = { }

2588 :	"Token"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2588 :	"*"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2588 :	"secondAccessTok"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2588 :	"ifEndTok"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2588 :	"tokAt"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2589 :	"if"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2589 :	"secondAccessTok"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2589 :	"str"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2589 :	"=="
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2589 :	"firstAccessTok"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2589 :	"str"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2590 :	"raceAfterInterlockedDecrementError"
		- NEIGH  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PARENT = { firstAccessTok , str , == , secondAccessTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2590 :	"secondAccessTok"
		- NEIGH  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PARENT = { firstAccessTok , str , == , secondAccessTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2592 :	"if"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , secondAccessTok , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2592 :	"Token"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , secondAccessTok , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2592 :	"Match"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , secondAccessTok , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2592 :	"ifEndTok"
		- NEIGH  = { ifEndTok , Token , Match , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { firstAccessTok , == , str , if , tokAt , ifEndTok , secondAccessTok , * , Token , }
		- PRED   = { }
		- SUCC   = { }

2593 :	"Token"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2593 :	"*"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2593 :	"secondAccessTok"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2593 :	"ifEndTok"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2593 :	"tokAt"
		- NEIGH  = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { firstAccessTok , str , == , secondAccessTok , if , }

2594 :	"if"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2594 :	"secondAccessTok"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2594 :	"str"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2594 :	"=="
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2594 :	"firstAccessTok"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2594 :	"str"
		- NEIGH  = { firstAccessTok , str , == , secondAccessTok , if , }
		- PARENT = { ifEndTok , Token , Match , if , }
		- CHILD  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PRED   = { ifEndTok , secondAccessTok , tokAt , * , Token , }
		- SUCC   = { }

2595 :	"raceAfterInterlockedDecrementError"
		- NEIGH  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PARENT = { firstAccessTok , str , == , secondAccessTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2595 :	"secondAccessTok"
		- NEIGH  = { secondAccessTok , raceAfterInterlockedDecrementError , }
		- PARENT = { firstAccessTok , str , == , secondAccessTok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2603 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2603 :	"raceAfterInterlockedDecrementError"
		- NEIGH  = { raceAfterInterlockedDecrementError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2603 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2603 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2603 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2605 :	"reportError"
		- NEIGH  = { CWE362 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2605 :	"tok"
		- NEIGH  = { CWE362 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2605 :	"Severity"
		- NEIGH  = { CWE362 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2605 :	"error"
		- NEIGH  = { CWE362 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2606 :	"CWE362"
		- NEIGH  = { CWE362 , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2609 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2609 :	"checkUnusedLabel"
		- NEIGH  = { checkUnusedLabel , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2611 :	"if"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"!"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"mSettings"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"isEnabled"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"Settings"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"STYLE"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"&&"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"!"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"mSettings"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"isEnabled"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"Settings"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2611 :	"WARNING"
		- NEIGH  = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2612 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2614 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2614 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2614 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2614 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2614 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , && , Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2615 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2615 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2615 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2615 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2615 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2615 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2616 :	"for"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"*"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"bodyStart"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"!="
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2616 :	"next"
		- NEIGH  = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { strAt , && , Match , Token , != , tok , isExecutable , scope , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2617 :	"if"
		- NEIGH  = { isExecutable , scope , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { strAt , && , != , tok , Token , Match , if , }

2617 :	"!"
		- NEIGH  = { isExecutable , scope , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { strAt , && , != , tok , Token , Match , if , }

2617 :	"tok"
		- NEIGH  = { isExecutable , scope , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { strAt , && , != , tok , Token , Match , if , }

2617 :	"scope"
		- NEIGH  = { isExecutable , scope , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { strAt , && , != , tok , Token , Match , if , }

2617 :	"isExecutable"
		- NEIGH  = { isExecutable , scope , tok , ! , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { bodyEnd , scope , tok , }
		- PRED   = { }
		- SUCC   = { strAt , && , != , tok , Token , Match , if , }

2618 :	"tok"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isExecutable , scope , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2618 :	"tok"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isExecutable , scope , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2618 :	"scope"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isExecutable , scope , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2618 :	"bodyEnd"
		- NEIGH  = { bodyEnd , scope , tok , }
		- PARENT = { isExecutable , scope , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2620 :	"if"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"Token"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"Match"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"tok"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"&&"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"tok"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"strAt"
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2620 :	"!="
		- NEIGH  = { strAt , && , != , tok , Token , Match , if , }
		- PARENT = { scope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PRED   = { isExecutable , scope , tok , ! , if , }
		- SUCC   = { }

2621 :	"if"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"!"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"Token"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"findsimplematch"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"scope"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"bodyStart"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"next"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"+"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"tok"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"strAt"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"c_str"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"scope"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"bodyEnd"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2621 :	"previous"
		- NEIGH  = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- PARENT = { strAt , && , != , tok , Token , Match , if , }
		- CHILD  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PRED   = { }
		- SUCC   = { }

2622 :	"unusedLabelError"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"tok"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"next"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"tok"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"next"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"scope"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"type"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"=="
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"Scope"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2622 :	"eSwitch"
		- NEIGH  = { eSwitch , == , scope , next , type , Scope , tok , unusedLabelError , }
		- PARENT = { previous , bodyEnd , strAt , tok , bodyStart , scope , findsimplematch , c_str , next , ! , Token , + , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2628 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2628 :	"unusedLabelError"
		- NEIGH  = { unusedLabelError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2628 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2628 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2628 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2628 :	"inSwitch"
		- NEIGH  = { inSwitch , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2630 :	"if"
		- NEIGH  = { inSwitch , if , }
		- PARENT = { }
		- CHILD  = { Settings , STYLE , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2630 :	"inSwitch"
		- NEIGH  = { inSwitch , if , }
		- PARENT = { }
		- CHILD  = { Settings , STYLE , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"if"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"!"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"tok"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"||"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"mSettings"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"isEnabled"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"Settings"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2631 :	"WARNING"
		- NEIGH  = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PRED   = { }
		- SUCC   = { }

2632 :	"reportError"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2632 :	"tok"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2632 :	"Severity"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2632 :	"warning"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2633 :	"+"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2633 :	"tok"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2633 :	"tok"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2633 :	"str"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2633 :	"emptyString"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2633 :	"+"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2634 :	"CWE398"
		- NEIGH  = { CWE398 , str , emptyString , + , warning , tok , Severity , reportError , }
		- PARENT = { Settings , isEnabled , mSettings , tok , WARNING , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2636 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"tok"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"||"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2636 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- PARENT = { inSwitch , if , }
		- CHILD  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PRED   = { }
		- SUCC   = { }

2637 :	"reportError"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2637 :	"tok"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2637 :	"Severity"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2637 :	"style"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2638 :	"+"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2638 :	"tok"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2638 :	"tok"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2638 :	"str"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2638 :	"emptyString"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2638 :	"+"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2639 :	"CWE398"
		- NEIGH  = { CWE398 , str , emptyString , + , Severity , style , tok , reportError , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , tok , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2644 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2644 :	"checkEvaluationOrder"
		- NEIGH  = { checkEvaluationOrder , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2647 :	"if"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"mTokenizer"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"isCPP"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"&&"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"mSettings"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"standards"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"cpp"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	">="
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"Standards"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2647 :	"CPP11"
		- NEIGH  = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2648 :	"return"
		- NEIGH  = { return , }
		- PARENT = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2650 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

2650 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

2650 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

2650 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

2650 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CPP11 , >= , standards , mSettings , && , Standards , cpp , mTokenizer , isCPP , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

2651 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2651 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2651 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2651 :	"functionScope"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2651 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2651 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2652 :	"for"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"Token"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"*"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"functionScope"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"bodyStart"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"!="
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"functionScope"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"bodyEnd"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2652 :	"next"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { astOperand1 , tok2 , * , isAssignmentOp , && , tok , astParent , for , ! , Token , if , Match , }
		- PRED   = { }
		- SUCC   = { }

2653 :	"if"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"!"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"Token"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"Match"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"tok"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"&&"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"!"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"tok"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2653 :	"isAssignmentOp"
		- NEIGH  = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { astOperand1 , tok , ! , if , }

2654 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2655 :	"if"
		- NEIGH  = { astOperand1 , tok , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , tok , tok2 , * , Token , for , }

2655 :	"!"
		- NEIGH  = { astOperand1 , tok , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , tok , tok2 , * , Token , for , }

2655 :	"tok"
		- NEIGH  = { astOperand1 , tok , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , tok , tok2 , * , Token , for , }

2655 :	"astOperand1"
		- NEIGH  = { astOperand1 , tok , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { isAssignmentOp , && , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , tok , tok2 , * , Token , for , }

2656 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astOperand1 , tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2657 :	"for"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"Token"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"*"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"tok2"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"tok"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"tok2"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"tok2"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2657 :	"astParent"
		- NEIGH  = { astParent , tok , tok2 , * , Token , for , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { tok3 , & , visitAstNodes , str , isCPP , ! , mTokenizer , tok , library , != , astOperand2 , isSameExpression , tok2 , && , astOperand1 , Token , == , if , Match , foundError , * , mSettings , astParent , parent , }
		- PRED   = { astOperand1 , tok , ! , if , }
		- SUCC   = { }

2659 :	"Token"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { parent , ! , if , }

2659 :	"*"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { parent , ! , if , }

2659 :	"parent"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { parent , ! , if , }

2659 :	"tok2"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { parent , ! , if , }

2659 :	"astParent"
		- NEIGH  = { astParent , parent , tok2 , * , Token , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { parent , ! , if , }

2660 :	"if"
		- NEIGH  = { parent , ! , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { parent , Token , Match , if , }

2660 :	"!"
		- NEIGH  = { parent , ! , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { parent , Token , Match , if , }

2660 :	"parent"
		- NEIGH  = { parent , ! , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { astParent , parent , tok2 , * , Token , }
		- SUCC   = { parent , Token , Match , if , }

2661 :	"break"
		- NEIGH  = { break , }
		- PARENT = { parent , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2662 :	"if"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { == , str , parent , if , }

2662 :	"Token"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { == , str , parent , if , }

2662 :	"Match"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { == , str , parent , if , }

2662 :	"parent"
		- NEIGH  = { parent , Token , Match , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { parent , ! , if , }
		- SUCC   = { == , str , parent , if , }

2663 :	"break"
		- NEIGH  = { break , }
		- PARENT = { parent , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2664 :	"if"
		- NEIGH  = { == , str , parent , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { previous , next , != , - , astOperand2 , == , && , link , Token , ! , str , if , simpleMatch , while , parent , strAt , par , * , }
		- PRED   = { parent , Token , Match , if , }
		- SUCC   = { == , && , str , parent , astOperand2 , if , }

2664 :	"parent"
		- NEIGH  = { == , str , parent , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { previous , next , != , - , astOperand2 , == , && , link , Token , ! , str , if , simpleMatch , while , parent , strAt , par , * , }
		- PRED   = { parent , Token , Match , if , }
		- SUCC   = { == , && , str , parent , astOperand2 , if , }

2664 :	"str"
		- NEIGH  = { == , str , parent , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { previous , next , != , - , astOperand2 , == , && , link , Token , ! , str , if , simpleMatch , while , parent , strAt , par , * , }
		- PRED   = { parent , Token , Match , if , }
		- SUCC   = { == , && , str , parent , astOperand2 , if , }

2664 :	"=="
		- NEIGH  = { == , str , parent , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { previous , next , != , - , astOperand2 , == , && , link , Token , ! , str , if , simpleMatch , while , parent , strAt , par , * , }
		- PRED   = { parent , Token , Match , if , }
		- SUCC   = { == , && , str , parent , astOperand2 , if , }

2665 :	"Token"
		- NEIGH  = { parent , par , * , Token , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { par , simpleMatch , Token , while , }

2665 :	"*"
		- NEIGH  = { parent , par , * , Token , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { par , simpleMatch , Token , while , }

2665 :	"par"
		- NEIGH  = { parent , par , * , Token , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { par , simpleMatch , Token , while , }

2665 :	"parent"
		- NEIGH  = { parent , par , * , Token , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { par , simpleMatch , Token , while , }

2666 :	"while"
		- NEIGH  = { par , simpleMatch , Token , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { astParent , par , }
		- PRED   = { parent , par , * , Token , }
		- SUCC   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }

2666 :	"Token"
		- NEIGH  = { par , simpleMatch , Token , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { astParent , par , }
		- PRED   = { parent , par , * , Token , }
		- SUCC   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }

2666 :	"simpleMatch"
		- NEIGH  = { par , simpleMatch , Token , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { astParent , par , }
		- PRED   = { parent , par , * , Token , }
		- SUCC   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }

2666 :	"par"
		- NEIGH  = { par , simpleMatch , Token , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { astParent , par , }
		- PRED   = { parent , par , * , Token , }
		- SUCC   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }

2667 :	"par"
		- NEIGH  = { astParent , par , }
		- PARENT = { par , simpleMatch , Token , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2667 :	"par"
		- NEIGH  = { astParent , par , }
		- PARENT = { par , simpleMatch , Token , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2667 :	"astParent"
		- NEIGH  = { astParent , par , }
		- PARENT = { par , simpleMatch , Token , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2669 :	"if"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"!"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"par"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"&&"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"par"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"str"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"=="
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"&&"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"par"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"astOperand2"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"&&"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"par"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"strAt"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"-"
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2669 :	"!="
		- NEIGH  = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { par , simpleMatch , Token , while , }
		- SUCC   = { link , simpleMatch , Token , par , if , }

2670 :	"break"
		- NEIGH  = { break , }
		- PARENT = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2672 :	"if"
		- NEIGH  = { link , simpleMatch , Token , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- SUCC   = { next , par , }

2672 :	"Token"
		- NEIGH  = { link , simpleMatch , Token , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- SUCC   = { next , par , }

2672 :	"simpleMatch"
		- NEIGH  = { link , simpleMatch , Token , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- SUCC   = { next , par , }

2672 :	"par"
		- NEIGH  = { link , simpleMatch , Token , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- SUCC   = { next , par , }

2672 :	"link"
		- NEIGH  = { link , simpleMatch , Token , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { != , - , strAt , str , == , && , astOperand2 , if , ! , par , }
		- SUCC   = { next , par , }

2673 :	"break"
		- NEIGH  = { break , }
		- PARENT = { link , simpleMatch , Token , par , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2675 :	"par"
		- NEIGH  = { next , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { link , simpleMatch , Token , par , if , }
		- SUCC   = { parent , != , && , previous , par , while , }

2675 :	"par"
		- NEIGH  = { next , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { link , simpleMatch , Token , par , if , }
		- SUCC   = { parent , != , && , previous , par , while , }

2675 :	"next"
		- NEIGH  = { next , par , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { }
		- PRED   = { link , simpleMatch , Token , par , if , }
		- SUCC   = { parent , != , && , previous , par , while , }

2676 :	"while"
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2676 :	"par"
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2676 :	"&&"
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2676 :	"par"
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2676 :	"previous"
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2676 :	"!="
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2676 :	"parent"
		- NEIGH  = { parent , != , && , previous , par , while , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { nextArgument , par , }
		- PRED   = { next , par , }
		- SUCC   = { ! , par , if , }

2677 :	"par"
		- NEIGH  = { nextArgument , par , }
		- PARENT = { parent , != , && , previous , par , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2677 :	"par"
		- NEIGH  = { nextArgument , par , }
		- PARENT = { parent , != , && , previous , par , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2677 :	"nextArgument"
		- NEIGH  = { nextArgument , par , }
		- PARENT = { parent , != , && , previous , par , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2678 :	"if"
		- NEIGH  = { ! , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { parent , != , && , previous , par , while , }
		- SUCC   = { }

2678 :	"!"
		- NEIGH  = { ! , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { parent , != , && , previous , par , while , }
		- SUCC   = { }

2678 :	"par"
		- NEIGH  = { ! , par , if , }
		- PARENT = { == , str , parent , if , }
		- CHILD  = { break , }
		- PRED   = { parent , != , && , previous , par , while , }
		- SUCC   = { }

2679 :	"break"
		- NEIGH  = { break , }
		- PARENT = { ! , par , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2681 :	"if"
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2681 :	"parent"
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2681 :	"str"
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2681 :	"=="
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2681 :	"&&"
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2681 :	"parent"
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2681 :	"astOperand2"
		- NEIGH  = { == , && , str , parent , astOperand2 , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , }
		- PRED   = { == , str , parent , if , }
		- SUCC   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }

2682 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , && , str , parent , astOperand2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2685 :	"if"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2685 :	"tok2"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2685 :	"=="
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2685 :	"tok"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2685 :	"&&"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2686 :	"tok"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2686 :	"str"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2686 :	"=="
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2686 :	"&&"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2687 :	"parent"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2687 :	"str"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2687 :	"=="
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2687 :	"&&"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"isSameExpression"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"mTokenizer"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"isCPP"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"tok"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"astOperand1"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"parent"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"astOperand1"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"mSettings"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2688 :	"library"
		- NEIGH  = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , break , mSettings , if , }
		- PRED   = { == , && , str , parent , astOperand2 , if , }
		- SUCC   = { foundError , }

2689 :	"if"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2689 :	"mSettings"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2689 :	"isEnabled"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2689 :	"Settings"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2689 :	"WARNING"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2689 :	"&&"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"isSameExpression"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"mTokenizer"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"isCPP"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"tok"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"astOperand1"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"parent"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"astOperand1"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"mSettings"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2690 :	"library"
		- NEIGH  = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PRED   = { }
		- SUCC   = { break , }

2691 :	"selfAssignmentError"
		- NEIGH  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PARENT = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2691 :	"parent"
		- NEIGH  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PARENT = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2691 :	"tok"
		- NEIGH  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PARENT = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2691 :	"astOperand1"
		- NEIGH  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PARENT = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2691 :	"expressionString"
		- NEIGH  = { expressionString , tok , parent , astOperand1 , selfAssignmentError , }
		- PARENT = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2692 :	"break"
		- NEIGH  = { break , }
		- PARENT = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- CHILD  = { }
		- PRED   = { library , parent , tok , mTokenizer , isSameExpression , && , Settings , astOperand1 , WARNING , isCPP , isEnabled , mSettings , if , }
		- SUCC   = { }

2696 :	"foundError"
		- NEIGH  = { foundError , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { library , mSettings , tok2 , == , astOperand1 , isCPP , && , isSameExpression , parent , if , str , mTokenizer , tok , }
		- SUCC   = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }

2697 :	"visitAstNodes"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"parent"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"astOperand1"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"!="
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"tok2"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"parent"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"astOperand1"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"parent"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2697 :	"astOperand2"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2698 :	"&"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2698 :	"Token"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2698 :	"*"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2698 :	"tok3"
		- NEIGH  = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { }
		- PRED   = { foundError , }
		- SUCC   = { foundError , if , }

2699 :	"if"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"tok3"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"str"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"=="
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"&&"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"!"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"tok3"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2699 :	"astOperand2"
		- NEIGH  = { == , && , str , tok3 , astOperand2 , ! , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { }
		- SUCC   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }

2700 :	"return"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { == , && , str , tok3 , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2700 :	"ChildrenToVisit"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { == , && , str , tok3 , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2700 :	"none"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { == , && , str , tok3 , astOperand2 , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2701 :	"if"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"tok3"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"str"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"=="
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"&&"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"Token"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"simpleMatch"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"tok3"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2701 :	"previous"
		- NEIGH  = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- PARENT = { }
		- CHILD  = { none , ChildrenToVisit , return , }
		- PRED   = { == , && , str , tok3 , astOperand2 , ! , if , }
		- SUCC   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }

2702 :	"return"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2702 :	"ChildrenToVisit"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2702 :	"none"
		- NEIGH  = { none , ChildrenToVisit , return , }
		- PARENT = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2703 :	"if"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"isSameExpression"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"mTokenizer"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"isCPP"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"tok"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"astOperand1"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"tok3"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"mSettings"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2703 :	"library"
		- NEIGH  = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- PARENT = { }
		- CHILD  = { foundError , }
		- PRED   = { previous , simpleMatch , == , && , str , Token , tok3 , if , }
		- SUCC   = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }

2704 :	"foundError"
		- NEIGH  = { foundError , }
		- PARENT = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2705 :	"return"
		- NEIGH  = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- SUCC   = { }

2705 :	"foundError"
		- NEIGH  = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- SUCC   = { }

2705 :	"ChildrenToVisit"
		- NEIGH  = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- SUCC   = { }

2705 :	"done"
		- NEIGH  = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- SUCC   = { }

2705 :	"ChildrenToVisit"
		- NEIGH  = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- SUCC   = { }

2705 :	"op1_and_op2"
		- NEIGH  = { op1_and_op2 , ChildrenToVisit , foundError , done , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , astOperand1 , tok , mTokenizer , library , isSameExpression , tok3 , isCPP , if , }
		- SUCC   = { }

2708 :	"if"
		- NEIGH  = { foundError , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , parent , unknownEvaluationOrder , }
		- PRED   = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- SUCC   = { }

2708 :	"foundError"
		- NEIGH  = { foundError , if , }
		- PARENT = { astParent , tok , tok2 , * , Token , for , }
		- CHILD  = { break , parent , unknownEvaluationOrder , }
		- PRED   = { * , tok3 , Token , astOperand2 , != , & , parent , tok2 , astOperand1 , visitAstNodes , }
		- SUCC   = { }

2709 :	"unknownEvaluationOrder"
		- NEIGH  = { parent , unknownEvaluationOrder , }
		- PARENT = { foundError , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2709 :	"parent"
		- NEIGH  = { parent , unknownEvaluationOrder , }
		- PARENT = { foundError , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2710 :	"break"
		- NEIGH  = { break , }
		- PARENT = { foundError , if , }
		- CHILD  = { }
		- PRED   = { parent , unknownEvaluationOrder , }
		- SUCC   = { }

2717 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2717 :	"unknownEvaluationOrder"
		- NEIGH  = { unknownEvaluationOrder , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2717 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2717 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2717 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2719 :	"reportError"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2719 :	"tok"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2719 :	"Severity"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2719 :	"error"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"+"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"tok"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"tok"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"expressionString"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"std"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"string"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"+"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2720 :	"CWE768"
		- NEIGH  = { std , CWE768 , expressionString , + , string , error , tok , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2723 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2723 :	"checkAccessOfMovedVariable"
		- NEIGH  = { checkAccessOfMovedVariable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2725 :	"if"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"mTokenizer"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"isCPP"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"||"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"standards"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"cpp"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"<"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"Standards"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"CPP11"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"||"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"!"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"mSettings"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"isEnabled"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"Settings"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2725 :	"WARNING"
		- NEIGH  = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }

2726 :	"return"
		- NEIGH  = { return , }
		- PARENT = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2727 :	"CheckUninitVar"
		- NEIGH  = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- SUCC   = { inconclusive , mSettings , reportInconclusive , }

2727 :	"checkUninitVar"
		- NEIGH  = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- SUCC   = { inconclusive , mSettings , reportInconclusive , }

2727 :	"mTokenizer"
		- NEIGH  = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- SUCC   = { inconclusive , mSettings , reportInconclusive , }

2727 :	"mSettings"
		- NEIGH  = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- SUCC   = { inconclusive , mSettings , reportInconclusive , }

2727 :	"mErrorLogger"
		- NEIGH  = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WARNING , Settings , isEnabled , isCPP , CPP11 , < , standards , mSettings , || , Standards , cpp , mTokenizer , if , ! , }
		- SUCC   = { inconclusive , mSettings , reportInconclusive , }

2728 :	"reportInconclusive"
		- NEIGH  = { inconclusive , mSettings , reportInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2728 :	"mSettings"
		- NEIGH  = { inconclusive , mSettings , reportInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2728 :	"inconclusive"
		- NEIGH  = { inconclusive , mSettings , reportInconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , mTokenizer , checkUninitVar , mErrorLogger , CheckUninitVar , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2729 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , reportInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2729 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , reportInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2729 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , reportInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2729 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , reportInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2729 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , mSettings , reportInconclusive , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2730 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , if , scope , * , bodyStart , for , != , tok , function , scopeStart , next , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2730 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , if , scope , * , bodyStart , for , != , tok , function , scopeStart , next , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2730 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , if , scope , * , bodyStart , for , != , tok , function , scopeStart , next , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2730 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , if , scope , * , bodyStart , for , != , tok , function , scopeStart , next , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2730 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , if , scope , * , bodyStart , for , != , tok , function , scopeStart , next , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2730 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { bodyEnd , if , scope , * , bodyStart , for , != , tok , function , scopeStart , next , Token , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2731 :	"Token"
		- NEIGH  = { bodyStart , scope , scopeStart , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { function , scope , if , }

2731 :	"*"
		- NEIGH  = { bodyStart , scope , scopeStart , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { function , scope , if , }

2731 :	"scopeStart"
		- NEIGH  = { bodyStart , scope , scopeStart , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { function , scope , if , }

2731 :	"scope"
		- NEIGH  = { bodyStart , scope , scopeStart , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { function , scope , if , }

2731 :	"bodyStart"
		- NEIGH  = { bodyStart , scope , scopeStart , * , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { function , scope , if , }

2732 :	"if"
		- NEIGH  = { function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PRED   = { bodyStart , scope , scopeStart , * , Token , }
		- SUCC   = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }

2732 :	"scope"
		- NEIGH  = { function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PRED   = { bodyStart , scope , scopeStart , * , Token , }
		- SUCC   = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }

2732 :	"function"
		- NEIGH  = { function , scope , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { if , constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PRED   = { bodyStart , scope , scopeStart , * , Token , }
		- SUCC   = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }

2733 :	"Token"
		- NEIGH  = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PARENT = { function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { memberInitializationStart , if , }

2733 :	"*"
		- NEIGH  = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PARENT = { function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { memberInitializationStart , if , }

2733 :	"memberInitializationStart"
		- NEIGH  = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PARENT = { function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { memberInitializationStart , if , }

2733 :	"scope"
		- NEIGH  = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PARENT = { function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { memberInitializationStart , if , }

2733 :	"function"
		- NEIGH  = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PARENT = { function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { memberInitializationStart , if , }

2733 :	"constructorMemberInitialization"
		- NEIGH  = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- PARENT = { function , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { memberInitializationStart , if , }

2734 :	"if"
		- NEIGH  = { memberInitializationStart , if , }
		- PARENT = { function , scope , if , }
		- CHILD  = { memberInitializationStart , scopeStart , }
		- PRED   = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- SUCC   = { }

2734 :	"memberInitializationStart"
		- NEIGH  = { memberInitializationStart , if , }
		- PARENT = { function , scope , if , }
		- CHILD  = { memberInitializationStart , scopeStart , }
		- PRED   = { constructorMemberInitialization , memberInitializationStart , function , scope , * , Token , }
		- SUCC   = { }

2735 :	"scopeStart"
		- NEIGH  = { memberInitializationStart , scopeStart , }
		- PARENT = { memberInitializationStart , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2735 :	"memberInitializationStart"
		- NEIGH  = { memberInitializationStart , scopeStart , }
		- PARENT = { memberInitializationStart , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2737 :	"for"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"Token"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"*"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"scopeStart"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"next"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"!="
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"scope"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"bodyEnd"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"tok"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2737 :	"next"
		- NEIGH  = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { accessOfMoved , inconclusive , && , isInconclusive , == , || , moveKind , ! , if , ValueFlow , getMovedValue , * , strAt , reportInconclusive , NonMovedVariable , tok , MoveKind , movedValue , Value , }
		- PRED   = { function , scope , if , }
		- SUCC   = { }

2738 :	"ValueFlow"
		- NEIGH  = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }

2738 :	"Value"
		- NEIGH  = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }

2738 :	"*"
		- NEIGH  = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }

2738 :	"movedValue"
		- NEIGH  = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }

2738 :	"tok"
		- NEIGH  = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }

2738 :	"getMovedValue"
		- NEIGH  = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }

2739 :	"if"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"!"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"movedValue"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"||"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"movedValue"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"moveKind"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"=="
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"ValueFlow"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"Value"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"MoveKind"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2739 :	"NonMovedVariable"
		- NEIGH  = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getMovedValue , * , tok , movedValue , Value , ValueFlow , }
		- SUCC   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }

2740 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2741 :	"if"
		- NEIGH  = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- SUCC   = { inconclusive , }

2741 :	"movedValue"
		- NEIGH  = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- SUCC   = { inconclusive , }

2741 :	"isInconclusive"
		- NEIGH  = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- SUCC   = { inconclusive , }

2741 :	"&&"
		- NEIGH  = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- SUCC   = { inconclusive , }

2741 :	"!"
		- NEIGH  = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- SUCC   = { inconclusive , }

2741 :	"reportInconclusive"
		- NEIGH  = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { NonMovedVariable , Value , ValueFlow , == , moveKind , movedValue , MoveKind , || , ! , if , }
		- SUCC   = { inconclusive , }

2742 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2744 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { reportInconclusive , if , ! , && , isInconclusive , movedValue , }
		- SUCC   = { accessOfMoved , }

2745 :	"accessOfMoved"
		- NEIGH  = { accessOfMoved , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { inconclusive , }
		- SUCC   = { strAt , == , tok , if , }

2746 :	"if"
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isVariableUsage , checkUninitVar , && , ! , next , isVariableChanged , & , isVariableChangedByFunctionCall , inconclusive , mSettings , CheckUninitVar , == , NO_ALLOC , originalName , accessOfMoved , tok , if , }
		- PRED   = { accessOfMoved , }
		- SUCC   = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }

2746 :	"tok"
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isVariableUsage , checkUninitVar , && , ! , next , isVariableChanged , & , isVariableChangedByFunctionCall , inconclusive , mSettings , CheckUninitVar , == , NO_ALLOC , originalName , accessOfMoved , tok , if , }
		- PRED   = { accessOfMoved , }
		- SUCC   = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }

2746 :	"strAt"
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isVariableUsage , checkUninitVar , && , ! , next , isVariableChanged , & , isVariableChangedByFunctionCall , inconclusive , mSettings , CheckUninitVar , == , NO_ALLOC , originalName , accessOfMoved , tok , if , }
		- PRED   = { accessOfMoved , }
		- SUCC   = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }

2746 :	"=="
		- NEIGH  = { strAt , == , tok , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isVariableUsage , checkUninitVar , && , ! , next , isVariableChanged , & , isVariableChangedByFunctionCall , inconclusive , mSettings , CheckUninitVar , == , NO_ALLOC , originalName , accessOfMoved , tok , if , }
		- PRED   = { accessOfMoved , }
		- SUCC   = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }

2747 :	"if"
		- NEIGH  = { == , originalName , tok , next , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { inconclusive , accessOfMoved , }
		- PRED   = { }
		- SUCC   = { }

2747 :	"tok"
		- NEIGH  = { == , originalName , tok , next , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { inconclusive , accessOfMoved , }
		- PRED   = { }
		- SUCC   = { }

2747 :	"next"
		- NEIGH  = { == , originalName , tok , next , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { inconclusive , accessOfMoved , }
		- PRED   = { }
		- SUCC   = { }

2747 :	"originalName"
		- NEIGH  = { == , originalName , tok , next , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { inconclusive , accessOfMoved , }
		- PRED   = { }
		- SUCC   = { }

2747 :	"=="
		- NEIGH  = { == , originalName , tok , next , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { inconclusive , accessOfMoved , }
		- PRED   = { }
		- SUCC   = { }

2748 :	"accessOfMoved"
		- NEIGH  = { accessOfMoved , }
		- PARENT = { == , originalName , tok , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2750 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { == , originalName , tok , next , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2752 :	"isVariableChanged"
		- NEIGH  = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }

2752 :	"isVariableChangedByFunctionCall"
		- NEIGH  = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }

2752 :	"tok"
		- NEIGH  = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }

2752 :	"mSettings"
		- NEIGH  = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }

2752 :	"&"
		- NEIGH  = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }

2752 :	"inconclusive"
		- NEIGH  = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }

2753 :	"accessOfMoved"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"!"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"isVariableChanged"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"&&"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"checkUninitVar"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"isVariableUsage"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"tok"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"CheckUninitVar"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2753 :	"NO_ALLOC"
		- NEIGH  = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { }
		- PRED   = { tok , & , inconclusive , mSettings , isVariableChangedByFunctionCall , isVariableChanged , }
		- SUCC   = { inconclusive , if , }

2754 :	"if"
		- NEIGH  = { inconclusive , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { if , tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- PRED   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- SUCC   = { }

2754 :	"inconclusive"
		- NEIGH  = { inconclusive , if , }
		- PARENT = { strAt , == , tok , if , }
		- CHILD  = { if , tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- PRED   = { CheckUninitVar , NO_ALLOC , isVariableUsage , && , ! , checkUninitVar , isVariableChanged , tok , accessOfMoved , }
		- SUCC   = { }

2755 :	"accessOfMoved"
		- NEIGH  = { tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { accessOfMoved , if , }

2755 :	"!"
		- NEIGH  = { tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { accessOfMoved , if , }

2755 :	"isMovedParameterAllowedForInconclusiveFunction"
		- NEIGH  = { tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { accessOfMoved , if , }

2755 :	"tok"
		- NEIGH  = { tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { accessOfMoved , if , }

2756 :	"if"
		- NEIGH  = { accessOfMoved , if , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { inconclusive , }
		- PRED   = { tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- SUCC   = { }

2756 :	"accessOfMoved"
		- NEIGH  = { accessOfMoved , if , }
		- PARENT = { inconclusive , if , }
		- CHILD  = { inconclusive , }
		- PRED   = { tok , ! , isMovedParameterAllowedForInconclusiveFunction , accessOfMoved , }
		- SUCC   = { }

2757 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2760 :	"if"
		- NEIGH  = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { }

2760 :	"accessOfMoved"
		- NEIGH  = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { }

2760 :	"||"
		- NEIGH  = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { }

2760 :	"inconclusive"
		- NEIGH  = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { }

2760 :	"&&"
		- NEIGH  = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { }

2760 :	"reportInconclusive"
		- NEIGH  = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- PARENT = { scope , bodyEnd , != , scopeStart , tok , * , next , Token , for , }
		- CHILD  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PRED   = { strAt , == , tok , if , }
		- SUCC   = { }

2761 :	"accessMovedError"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"tok"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"tok"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"str"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"movedValue"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"inconclusive"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"||"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"movedValue"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2761 :	"isInconclusive"
		- NEIGH  = { isInconclusive , || , inconclusive , movedValue , tok , str , accessMovedError , }
		- PARENT = { && , reportInconclusive , inconclusive , || , accessOfMoved , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2766 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2766 :	"isMovedParameterAllowedForInconclusiveFunction"
		- NEIGH  = { isMovedParameterAllowedForInconclusiveFunction , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2766 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2766 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2766 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2768 :	"if"
		- NEIGH  = { - , tok , simpleMatch , tokAt , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { - , tok , tokAtM2 , tokAt , * , Token , }

2768 :	"Token"
		- NEIGH  = { - , tok , simpleMatch , tokAt , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { - , tok , tokAtM2 , tokAt , * , Token , }

2768 :	"simpleMatch"
		- NEIGH  = { - , tok , simpleMatch , tokAt , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { - , tok , tokAtM2 , tokAt , * , Token , }

2768 :	"tok"
		- NEIGH  = { - , tok , simpleMatch , tokAt , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { - , tok , tokAtM2 , tokAt , * , Token , }

2768 :	"tokAt"
		- NEIGH  = { - , tok , simpleMatch , tokAt , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { - , tok , tokAtM2 , tokAt , * , Token , }

2768 :	"-"
		- NEIGH  = { - , tok , simpleMatch , tokAt , Token , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { - , tok , tokAtM2 , tokAt , * , Token , }

2769 :	"return"
		- NEIGH  = { return , }
		- PARENT = { - , tok , simpleMatch , tokAt , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2770 :	"Token"
		- NEIGH  = { - , tok , tokAtM2 , tokAt , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , tok , simpleMatch , tokAt , Token , if , }
		- SUCC   = { link , && , simpleMatch , Token , tokAtM2 , if , }

2770 :	"*"
		- NEIGH  = { - , tok , tokAtM2 , tokAt , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , tok , simpleMatch , tokAt , Token , if , }
		- SUCC   = { link , && , simpleMatch , Token , tokAtM2 , if , }

2770 :	"tokAtM2"
		- NEIGH  = { - , tok , tokAtM2 , tokAt , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , tok , simpleMatch , tokAt , Token , if , }
		- SUCC   = { link , && , simpleMatch , Token , tokAtM2 , if , }

2770 :	"tok"
		- NEIGH  = { - , tok , tokAtM2 , tokAt , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , tok , simpleMatch , tokAt , Token , if , }
		- SUCC   = { link , && , simpleMatch , Token , tokAtM2 , if , }

2770 :	"tokAt"
		- NEIGH  = { - , tok , tokAtM2 , tokAt , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , tok , simpleMatch , tokAt , Token , if , }
		- SUCC   = { link , && , simpleMatch , Token , tokAtM2 , if , }

2770 :	"-"
		- NEIGH  = { - , tok , tokAtM2 , tokAt , * , Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , tok , simpleMatch , tokAt , Token , if , }
		- SUCC   = { link , && , simpleMatch , Token , tokAtM2 , if , }

2771 :	"if"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2771 :	"Token"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2771 :	"simpleMatch"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2771 :	"tokAtM2"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2771 :	"&&"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2771 :	"tokAtM2"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2771 :	"link"
		- NEIGH  = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- PARENT = { }
		- CHILD  = { tokAt , simpleMatch , - , link , tokAtM2 , if , leftAngle , * , Token , }
		- PRED   = { - , tok , tokAtM2 , tokAt , * , Token , }
		- SUCC   = { return , }

2772 :	"Token"
		- NEIGH  = { link , tokAtM2 , leftAngle , * , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , simpleMatch , tokAt , if , leftAngle , Token , }

2772 :	"*"
		- NEIGH  = { link , tokAtM2 , leftAngle , * , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , simpleMatch , tokAt , if , leftAngle , Token , }

2772 :	"leftAngle"
		- NEIGH  = { link , tokAtM2 , leftAngle , * , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , simpleMatch , tokAt , if , leftAngle , Token , }

2772 :	"tokAtM2"
		- NEIGH  = { link , tokAtM2 , leftAngle , * , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , simpleMatch , tokAt , if , leftAngle , Token , }

2772 :	"link"
		- NEIGH  = { link , tokAtM2 , leftAngle , * , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , simpleMatch , tokAt , if , leftAngle , Token , }

2773 :	"if"
		- NEIGH  = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { return , }
		- PRED   = { link , tokAtM2 , leftAngle , * , Token , }
		- SUCC   = { }

2773 :	"Token"
		- NEIGH  = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { return , }
		- PRED   = { link , tokAtM2 , leftAngle , * , Token , }
		- SUCC   = { }

2773 :	"simpleMatch"
		- NEIGH  = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { return , }
		- PRED   = { link , tokAtM2 , leftAngle , * , Token , }
		- SUCC   = { }

2773 :	"leftAngle"
		- NEIGH  = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { return , }
		- PRED   = { link , tokAtM2 , leftAngle , * , Token , }
		- SUCC   = { }

2773 :	"tokAt"
		- NEIGH  = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { return , }
		- PRED   = { link , tokAtM2 , leftAngle , * , Token , }
		- SUCC   = { }

2773 :	"-"
		- NEIGH  = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- PARENT = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- CHILD  = { return , }
		- PRED   = { link , tokAtM2 , leftAngle , * , Token , }
		- SUCC   = { }

2774 :	"return"
		- NEIGH  = { return , }
		- PARENT = { - , simpleMatch , tokAt , if , leftAngle , Token , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2776 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { link , && , simpleMatch , Token , tokAtM2 , if , }
		- SUCC   = { }

2779 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"accessMovedError"
		- NEIGH  = { accessMovedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"value"
		- NEIGH  = { value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2779 :	"inconclusive"
		- NEIGH  = { inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2781 :	"if"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , reportError , CWE672 , warning , tok , Severity , }
		- PRED   = { }
		- SUCC   = { errorId , * , }

2781 :	"!"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , reportError , CWE672 , warning , tok , Severity , }
		- PRED   = { }
		- SUCC   = { errorId , * , }

2781 :	"tok"
		- NEIGH  = { tok , ! , if , }
		- PARENT = { }
		- CHILD  = { return , reportError , CWE672 , warning , tok , Severity , }
		- PRED   = { }
		- SUCC   = { errorId , * , }

2782 :	"reportError"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE672 , warning , tok , Severity , reportError , }

2782 :	"tok"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE672 , warning , tok , Severity , reportError , }

2782 :	"Severity"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE672 , warning , tok , Severity , reportError , }

2782 :	"warning"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE672 , warning , tok , Severity , reportError , }

2782 :	"CWE672"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { CWE672 , warning , tok , Severity , reportError , }

2783 :	"reportError"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { CWE672 , warning , tok , Severity , reportError , }
		- SUCC   = { return , }

2783 :	"tok"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { CWE672 , warning , tok , Severity , reportError , }
		- SUCC   = { return , }

2783 :	"Severity"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { CWE672 , warning , tok , Severity , reportError , }
		- SUCC   = { return , }

2783 :	"warning"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { CWE672 , warning , tok , Severity , reportError , }
		- SUCC   = { return , }

2783 :	"CWE672"
		- NEIGH  = { CWE672 , warning , tok , Severity , reportError , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { CWE672 , warning , tok , Severity , reportError , }
		- SUCC   = { return , }

2784 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , ! , if , }
		- CHILD  = { }
		- PRED   = { CWE672 , warning , tok , Severity , reportError , }
		- SUCC   = { }

2787 :	"*"
		- NEIGH  = { errorId , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { kindString , string , std , }

2787 :	"errorId"
		- NEIGH  = { errorId , * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , ! , if , }
		- SUCC   = { kindString , string , std , }

2788 :	"std"
		- NEIGH  = { kindString , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorId , * , }
		- SUCC   = { moveKind , value , switch , }

2788 :	"string"
		- NEIGH  = { kindString , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorId , * , }
		- SUCC   = { moveKind , value , switch , }

2788 :	"kindString"
		- NEIGH  = { kindString , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorId , * , }
		- SUCC   = { moveKind , value , switch , }

2789 :	"switch"
		- NEIGH  = { moveKind , value , switch , }
		- PARENT = { }
		- CHILD  = { ForwardedVariable , errorId , MovedVariable , Value , kindString , MoveKind , return , break , ValueFlow , }
		- PRED   = { kindString , string , std , }
		- SUCC   = { + , varname , kindString , errmsg , string , std , }

2789 :	"value"
		- NEIGH  = { moveKind , value , switch , }
		- PARENT = { }
		- CHILD  = { ForwardedVariable , errorId , MovedVariable , Value , kindString , MoveKind , return , break , ValueFlow , }
		- PRED   = { kindString , string , std , }
		- SUCC   = { + , varname , kindString , errmsg , string , std , }

2789 :	"moveKind"
		- NEIGH  = { moveKind , value , switch , }
		- PARENT = { }
		- CHILD  = { ForwardedVariable , errorId , MovedVariable , Value , kindString , MoveKind , return , break , ValueFlow , }
		- PRED   = { kindString , string , std , }
		- SUCC   = { + , varname , kindString , errmsg , string , std , }

2790 :	"ValueFlow"
		- NEIGH  = { MovedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { errorId , }

2790 :	"Value"
		- NEIGH  = { MovedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { errorId , }

2790 :	"MoveKind"
		- NEIGH  = { MovedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { errorId , }

2790 :	"MovedVariable"
		- NEIGH  = { MovedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { errorId , }

2791 :	"errorId"
		- NEIGH  = { errorId , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { MovedVariable , Value , MoveKind , ValueFlow , }
		- SUCC   = { kindString , }

2792 :	"kindString"
		- NEIGH  = { kindString , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { errorId , }
		- SUCC   = { break , }

2793 :	"break"
		- NEIGH  = { break , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { kindString , }
		- SUCC   = { ForwardedVariable , Value , MoveKind , ValueFlow , }

2794 :	"ValueFlow"
		- NEIGH  = { ForwardedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { errorId , }

2794 :	"Value"
		- NEIGH  = { ForwardedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { errorId , }

2794 :	"MoveKind"
		- NEIGH  = { ForwardedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { errorId , }

2794 :	"ForwardedVariable"
		- NEIGH  = { ForwardedVariable , Value , MoveKind , ValueFlow , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { errorId , }

2795 :	"errorId"
		- NEIGH  = { errorId , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { ForwardedVariable , Value , MoveKind , ValueFlow , }
		- SUCC   = { kindString , }

2796 :	"kindString"
		- NEIGH  = { kindString , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { errorId , }
		- SUCC   = { break , }

2797 :	"break"
		- NEIGH  = { break , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { kindString , }
		- SUCC   = { }

2799 :	"return"
		- NEIGH  = { return , }
		- PARENT = { moveKind , value , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2801 :	"std"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"string"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"errmsg"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"+"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"varname"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"+"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"+"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"kindString"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2801 :	"+"
		- NEIGH  = { + , varname , kindString , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { moveKind , value , switch , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

2802 :	"ErrorPath"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , varname , kindString , errmsg , string , std , }
		- SUCC   = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }

2802 :	"errorPath"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , varname , kindString , errmsg , string , std , }
		- SUCC   = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }

2802 :	"getErrorPath"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , varname , kindString , errmsg , string , std , }
		- SUCC   = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }

2802 :	"tok"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , varname , kindString , errmsg , string , std , }
		- SUCC   = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }

2802 :	"value"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , varname , kindString , errmsg , string , std , }
		- SUCC   = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }

2802 :	"errmsg"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , varname , kindString , errmsg , string , std , }
		- SUCC   = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }

2803 :	"reportError"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"errorPath"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"Severity"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"warning"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"errorId"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"errmsg"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"CWE672"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2803 :	"inconclusive"
		- NEIGH  = { errmsg , inconclusive , errorId , warning , errorPath , Severity , CWE672 , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

2808 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2808 :	"checkFuncArgNamesDifferent"
		- NEIGH  = { checkFuncArgNamesDifferent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2810 :	"style"
		- NEIGH  = { STYLE , Settings , isEnabled , mSettings , style , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mSettings , inconclusive , }

2810 :	"mSettings"
		- NEIGH  = { STYLE , Settings , isEnabled , mSettings , style , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mSettings , inconclusive , }

2810 :	"isEnabled"
		- NEIGH  = { STYLE , Settings , isEnabled , mSettings , style , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mSettings , inconclusive , }

2810 :	"Settings"
		- NEIGH  = { STYLE , Settings , isEnabled , mSettings , style , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mSettings , inconclusive , }

2810 :	"STYLE"
		- NEIGH  = { STYLE , Settings , isEnabled , mSettings , style , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mSettings , inconclusive , }

2811 :	"inconclusive"
		- NEIGH  = { mSettings , inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , Settings , isEnabled , mSettings , style , }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warning , }

2811 :	"mSettings"
		- NEIGH  = { mSettings , inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , Settings , isEnabled , mSettings , style , }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warning , }

2811 :	"inconclusive"
		- NEIGH  = { mSettings , inconclusive , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STYLE , Settings , isEnabled , mSettings , style , }
		- SUCC   = { Settings , WARNING , isEnabled , mSettings , warning , }

2812 :	"warning"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , inconclusive , }
		- SUCC   = { inconclusive , && , warning , style , || , ! , if , }

2812 :	"mSettings"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , inconclusive , }
		- SUCC   = { inconclusive , && , warning , style , || , ! , if , }

2812 :	"isEnabled"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , inconclusive , }
		- SUCC   = { inconclusive , && , warning , style , || , ! , if , }

2812 :	"Settings"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , inconclusive , }
		- SUCC   = { inconclusive , && , warning , style , || , ! , if , }

2812 :	"WARNING"
		- NEIGH  = { Settings , WARNING , isEnabled , mSettings , warning , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mSettings , inconclusive , }
		- SUCC   = { inconclusive , && , warning , style , || , ! , if , }

2814 :	"if"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2814 :	"!"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2814 :	"warning"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2814 :	"||"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2814 :	"style"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2814 :	"&&"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2814 :	"inconclusive"
		- NEIGH  = { inconclusive , && , warning , style , || , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { Settings , WARNING , isEnabled , mSettings , warning , }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2815 :	"return"
		- NEIGH  = { return , }
		- PARENT = { inconclusive , && , warning , style , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2817 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , && , warning , style , || , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2817 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , && , warning , style , || , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2817 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , && , warning , style , || , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2817 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , && , warning , style , || , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2817 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inconclusive , && , warning , style , || , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , scope , Scope , for , }

2819 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , && , style , warning , j , for , next , decl , > , vector , std , definitions , arg , ++ , Function , Token , scope , == , if , argDef , < , argCount , * , declarations , function , ! , || , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2819 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , && , style , warning , j , for , next , decl , > , vector , std , definitions , arg , ++ , Function , Token , scope , == , if , argDef , < , argCount , * , declarations , function , ! , || , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2819 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , && , style , warning , j , for , next , decl , > , vector , std , definitions , arg , ++ , Function , Token , scope , == , if , argDef , < , argCount , * , declarations , function , ! , || , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2819 :	"scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , && , style , warning , j , for , next , decl , > , vector , std , definitions , arg , ++ , Function , Token , scope , == , if , argDef , < , argCount , * , declarations , function , ! , || , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2819 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , && , style , warning , j , for , next , decl , > , vector , std , definitions , arg , ++ , Function , Token , scope , == , if , argDef , < , argCount , * , declarations , function , ! , || , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2819 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- PARENT = { }
		- CHILD  = { inconclusive , && , style , warning , j , for , next , decl , > , vector , std , definitions , arg , ++ , Function , Token , scope , == , if , argDef , < , argCount , * , declarations , function , ! , || , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2820 :	"Function"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , argCount , function , || , ! , if , }

2820 :	"*"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , argCount , function , || , ! , if , }

2820 :	"function"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , argCount , function , || , ! , if , }

2820 :	"scope"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , argCount , function , || , ! , if , }

2820 :	"function"
		- NEIGH  = { scope , function , * , Function , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { == , argCount , function , || , ! , if , }

2822 :	"if"
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2822 :	"!"
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2822 :	"function"
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2822 :	"||"
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2822 :	"function"
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2822 :	"argCount"
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2822 :	"=="
		- NEIGH  = { == , argCount , function , || , ! , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { scope , function , * , Function , }
		- SUCC   = { arg , == , function , argDef , if , }

2823 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , argCount , function , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2826 :	"if"
		- NEIGH  = { arg , == , function , argDef , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { == , argCount , function , || , ! , if , }
		- SUCC   = { argCount , function , declarations , > , * , Token , < , vector , std , }

2826 :	"function"
		- NEIGH  = { arg , == , function , argDef , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { == , argCount , function , || , ! , if , }
		- SUCC   = { argCount , function , declarations , > , * , Token , < , vector , std , }

2826 :	"argDef"
		- NEIGH  = { arg , == , function , argDef , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { == , argCount , function , || , ! , if , }
		- SUCC   = { argCount , function , declarations , > , * , Token , < , vector , std , }

2826 :	"=="
		- NEIGH  = { arg , == , function , argDef , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { == , argCount , function , || , ! , if , }
		- SUCC   = { argCount , function , declarations , > , * , Token , < , vector , std , }

2826 :	"function"
		- NEIGH  = { arg , == , function , argDef , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { == , argCount , function , || , ! , if , }
		- SUCC   = { argCount , function , declarations , > , * , Token , < , vector , std , }

2826 :	"arg"
		- NEIGH  = { arg , == , function , argDef , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { == , argCount , function , || , ! , if , }
		- SUCC   = { argCount , function , declarations , > , * , Token , < , vector , std , }

2827 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { arg , == , function , argDef , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2830 :	"std"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"vector"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"<"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"Token"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"*"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	">"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"declarations"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"function"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2830 :	"argCount"
		- NEIGH  = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { arg , == , function , argDef , if , }
		- SUCC   = { argCount , definitions , function , > , * , Token , < , vector , std , }

2831 :	"std"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"vector"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"<"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"Token"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"*"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	">"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"definitions"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"function"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2831 :	"argCount"
		- NEIGH  = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , function , declarations , > , * , Token , < , vector , std , }
		- SUCC   = { argDef , function , decl , * , next , Token , }

2832 :	"Token"
		- NEIGH  = { argDef , function , decl , * , next , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2832 :	"*"
		- NEIGH  = { argDef , function , decl , * , next , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2832 :	"decl"
		- NEIGH  = { argDef , function , decl , * , next , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2832 :	"function"
		- NEIGH  = { argDef , function , decl , * , next , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2832 :	"argDef"
		- NEIGH  = { argDef , function , decl , * , next , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2832 :	"next"
		- NEIGH  = { argDef , function , decl , * , next , Token , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { }
		- PRED   = { argCount , definitions , function , > , * , Token , < , vector , std , }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2833 :	"for"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"<"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"function"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"argCount"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"++"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2833 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { simpleMatch , Match , Token , ! , && , while , getArgumentVar , variable , Variable , decl , * , if , definitions , j , function , declarations , }
		- PRED   = { argDef , function , decl , * , next , Token , }
		- SUCC   = { warning , if , }

2834 :	"declarations"
		- NEIGH  = { j , declarations , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { j , definitions , }

2834 :	"j"
		- NEIGH  = { j , declarations , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { j , definitions , }

2835 :	"definitions"
		- NEIGH  = { j , definitions , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , declarations , }
		- SUCC   = { j , variable , getArgumentVar , function , * , Variable , }

2835 :	"j"
		- NEIGH  = { j , definitions , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , declarations , }
		- SUCC   = { j , variable , getArgumentVar , function , * , Variable , }

2837 :	"Variable"
		- NEIGH  = { j , variable , getArgumentVar , function , * , Variable , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , definitions , }
		- SUCC   = { variable , if , }

2837 :	"*"
		- NEIGH  = { j , variable , getArgumentVar , function , * , Variable , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , definitions , }
		- SUCC   = { variable , if , }

2837 :	"variable"
		- NEIGH  = { j , variable , getArgumentVar , function , * , Variable , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , definitions , }
		- SUCC   = { variable , if , }

2837 :	"function"
		- NEIGH  = { j , variable , getArgumentVar , function , * , Variable , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , definitions , }
		- SUCC   = { variable , if , }

2837 :	"getArgumentVar"
		- NEIGH  = { j , variable , getArgumentVar , function , * , Variable , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , definitions , }
		- SUCC   = { variable , if , }

2837 :	"j"
		- NEIGH  = { j , variable , getArgumentVar , function , * , Variable , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { }
		- PRED   = { j , definitions , }
		- SUCC   = { variable , if , }

2838 :	"if"
		- NEIGH  = { variable , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { nameToken , variable , j , definitions , }
		- PRED   = { j , variable , getArgumentVar , function , * , Variable , }
		- SUCC   = { Match , && , Token , decl , ! , while , }

2838 :	"variable"
		- NEIGH  = { variable , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { nameToken , variable , j , definitions , }
		- PRED   = { j , variable , getArgumentVar , function , * , Variable , }
		- SUCC   = { Match , && , Token , decl , ! , while , }

2839 :	"definitions"
		- NEIGH  = { nameToken , variable , j , definitions , }
		- PARENT = { variable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2839 :	"j"
		- NEIGH  = { nameToken , variable , j , definitions , }
		- PARENT = { variable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2839 :	"variable"
		- NEIGH  = { nameToken , variable , j , definitions , }
		- PARENT = { variable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2839 :	"nameToken"
		- NEIGH  = { nameToken , variable , j , definitions , }
		- PARENT = { variable , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2842 :	"while"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2842 :	"decl"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2842 :	"&&"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2842 :	"!"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2842 :	"Token"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2842 :	"Match"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2842 :	"decl"
		- NEIGH  = { Match , && , Token , decl , ! , while , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , link , == , str , decl , if , }
		- PRED   = { variable , if , }
		- SUCC   = { simpleMatch , decl , Token , if , }

2846 :	"if"
		- NEIGH  = { == , str , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { break , nextArgument , decl , }
		- PRED   = { }
		- SUCC   = { link , decl , if , }

2846 :	"decl"
		- NEIGH  = { == , str , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { break , nextArgument , decl , }
		- PRED   = { }
		- SUCC   = { link , decl , if , }

2846 :	"str"
		- NEIGH  = { == , str , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { break , nextArgument , decl , }
		- PRED   = { }
		- SUCC   = { link , decl , if , }

2846 :	"=="
		- NEIGH  = { == , str , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { break , nextArgument , decl , }
		- PRED   = { }
		- SUCC   = { link , decl , if , }

2847 :	"decl"
		- NEIGH  = { nextArgument , decl , }
		- PARENT = { == , str , decl , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2847 :	"decl"
		- NEIGH  = { nextArgument , decl , }
		- PARENT = { == , str , decl , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2847 :	"nextArgument"
		- NEIGH  = { nextArgument , decl , }
		- PARENT = { == , str , decl , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2848 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , str , decl , if , }
		- CHILD  = { }
		- PRED   = { nextArgument , decl , }
		- SUCC   = { }

2851 :	"if"
		- NEIGH  = { link , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { varId , if , link , decl , }
		- PRED   = { == , str , decl , if , }
		- SUCC   = { next , decl , }

2851 :	"decl"
		- NEIGH  = { link , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { varId , if , link , decl , }
		- PRED   = { == , str , decl , if , }
		- SUCC   = { next , decl , }

2851 :	"link"
		- NEIGH  = { link , decl , if , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { varId , if , link , decl , }
		- PRED   = { == , str , decl , if , }
		- SUCC   = { next , decl , }

2852 :	"decl"
		- NEIGH  = { link , decl , }
		- PARENT = { link , decl , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2852 :	"decl"
		- NEIGH  = { link , decl , }
		- PARENT = { link , decl , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2852 :	"link"
		- NEIGH  = { link , decl , }
		- PARENT = { link , decl , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2853 :	"if"
		- NEIGH  = { decl , varId , if , }
		- PARENT = { link , decl , if , }
		- CHILD  = { decl , j , declarations , }
		- PRED   = { }
		- SUCC   = { }

2853 :	"decl"
		- NEIGH  = { decl , varId , if , }
		- PARENT = { link , decl , if , }
		- CHILD  = { decl , j , declarations , }
		- PRED   = { }
		- SUCC   = { }

2853 :	"varId"
		- NEIGH  = { decl , varId , if , }
		- PARENT = { link , decl , if , }
		- CHILD  = { decl , j , declarations , }
		- PRED   = { }
		- SUCC   = { }

2854 :	"declarations"
		- NEIGH  = { decl , j , declarations , }
		- PARENT = { decl , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2854 :	"j"
		- NEIGH  = { decl , j , declarations , }
		- PARENT = { decl , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2854 :	"decl"
		- NEIGH  = { decl , j , declarations , }
		- PARENT = { decl , varId , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2855 :	"decl"
		- NEIGH  = { next , decl , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { }
		- PRED   = { link , decl , if , }
		- SUCC   = { }

2855 :	"decl"
		- NEIGH  = { next , decl , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { }
		- PRED   = { link , decl , if , }
		- SUCC   = { }

2855 :	"next"
		- NEIGH  = { next , decl , }
		- PARENT = { Match , && , Token , decl , ! , while , }
		- CHILD  = { }
		- PRED   = { link , decl , if , }
		- SUCC   = { }

2857 :	"if"
		- NEIGH  = { simpleMatch , decl , Token , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , decl , }
		- PRED   = { Match , && , Token , decl , ! , while , }
		- SUCC   = { }

2857 :	"Token"
		- NEIGH  = { simpleMatch , decl , Token , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , decl , }
		- PRED   = { Match , && , Token , decl , ! , while , }
		- SUCC   = { }

2857 :	"simpleMatch"
		- NEIGH  = { simpleMatch , decl , Token , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , decl , }
		- PRED   = { Match , && , Token , decl , ! , while , }
		- SUCC   = { }

2857 :	"decl"
		- NEIGH  = { simpleMatch , decl , Token , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { next , decl , }
		- PRED   = { Match , && , Token , decl , ! , while , }
		- SUCC   = { }

2858 :	"decl"
		- NEIGH  = { next , decl , }
		- PARENT = { simpleMatch , decl , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2858 :	"decl"
		- NEIGH  = { next , decl , }
		- PARENT = { simpleMatch , decl , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2858 :	"next"
		- NEIGH  = { next , decl , }
		- PARENT = { simpleMatch , decl , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2861 :	"if"
		- NEIGH  = { warning , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { ++ , argCount , < , if , j , order_different , for , function , }
		- PRED   = { ++ , argCount , function , < , j , for , }
		- SUCC   = { inconclusive , && , style , if , }

2861 :	"warning"
		- NEIGH  = { warning , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { ++ , argCount , < , if , j , order_different , for , function , }
		- PRED   = { ++ , argCount , function , < , j , for , }
		- SUCC   = { inconclusive , && , style , if , }

2862 :	"order_different"
		- NEIGH  = { order_different , }
		- PARENT = { warning , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , j , for , }

2863 :	"for"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"<"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"function"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"argCount"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"++"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2863 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { warning , if , }
		- CHILD  = { argCount , < , k , for , ++ , == , if , str , || , function , declarations , definitions , ! , j , }
		- PRED   = { order_different , }
		- SUCC   = { order_different , if , }

2864 :	"if"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"!"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"declarations"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"j"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"||"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"!"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"definitions"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"j"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"||"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"declarations"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"j"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"str"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"=="
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"definitions"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"j"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2864 :	"str"
		- NEIGH  = { == , str , || , declarations , definitions , ! , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { ++ , argCount , function , < , k , for , }

2865 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { == , str , || , declarations , definitions , ! , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2867 :	"for"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"k"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"k"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"<"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"function"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"argCount"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"++"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2867 :	"k"
		- NEIGH  = { ++ , argCount , function , < , k , for , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PRED   = { == , str , || , declarations , definitions , ! , j , if , }
		- SUCC   = { }

2868 :	"if"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"j"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"!="
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"k"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"&&"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"definitions"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"k"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"&&"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"declarations"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"j"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"str"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"=="
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"definitions"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"k"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2868 :	"str"
		- NEIGH  = { str , == , && , k , declarations , != , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , k , for , }
		- CHILD  = { break , order_different , }
		- PRED   = { }
		- SUCC   = { }

2869 :	"order_different"
		- NEIGH  = { order_different , }
		- PARENT = { str , == , && , k , declarations , != , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

2870 :	"break"
		- NEIGH  = { break , }
		- PARENT = { str , == , && , k , declarations , != , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { order_different , }
		- SUCC   = { }

2874 :	"if"
		- NEIGH  = { order_different , if , }
		- PARENT = { warning , if , }
		- CHILD  = { declarations , function , arg , next , argDef , continue , name , definitions , funcArgOrderDifferent , }
		- PRED   = { ++ , argCount , function , < , j , for , }
		- SUCC   = { }

2874 :	"order_different"
		- NEIGH  = { order_different , if , }
		- PARENT = { warning , if , }
		- CHILD  = { declarations , function , arg , next , argDef , continue , name , definitions , funcArgOrderDifferent , }
		- PRED   = { ++ , argCount , function , < , j , for , }
		- SUCC   = { }

2875 :	"funcArgOrderDifferent"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"function"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"name"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"function"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"argDef"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"next"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"function"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"arg"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"next"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"declarations"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2875 :	"definitions"
		- NEIGH  = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { continue , }

2876 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { order_different , if , }
		- CHILD  = { }
		- PRED   = { declarations , function , arg , next , argDef , name , definitions , funcArgOrderDifferent , }
		- SUCC   = { }

2880 :	"if"
		- NEIGH  = { inconclusive , && , style , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { ++ , argCount , function , < , j , for , }
		- PRED   = { warning , if , }
		- SUCC   = { }

2880 :	"style"
		- NEIGH  = { inconclusive , && , style , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { ++ , argCount , function , < , j , for , }
		- PRED   = { warning , if , }
		- SUCC   = { }

2880 :	"&&"
		- NEIGH  = { inconclusive , && , style , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { ++ , argCount , function , < , j , for , }
		- PRED   = { warning , if , }
		- SUCC   = { }

2880 :	"inconclusive"
		- NEIGH  = { inconclusive , && , style , if , }
		- PARENT = { symbolDatabase , functionScopes , * , scope , Scope , for , }
		- CHILD  = { ++ , argCount , function , < , j , for , }
		- PRED   = { warning , if , }
		- SUCC   = { }

2881 :	"for"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"<"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"function"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"argCount"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"++"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2881 :	"j"
		- NEIGH  = { ++ , argCount , function , < , j , for , }
		- PARENT = { inconclusive , && , style , if , }
		- CHILD  = { str , && , != , declarations , definitions , j , if , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"if"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"declarations"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"j"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"&&"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"definitions"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"j"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"&&"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"declarations"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"j"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"str"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"!="
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"definitions"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"j"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2882 :	"str"
		- NEIGH  = { str , && , != , declarations , definitions , j , if , }
		- PARENT = { ++ , argCount , function , < , j , for , }
		- CHILD  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PRED   = { }
		- SUCC   = { }

2883 :	"funcArgNamesDifferent"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"function"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"name"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"j"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"declarations"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"j"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"definitions"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2883 :	"j"
		- NEIGH  = { function , declarations , definitions , j , name , funcArgNamesDifferent , }
		- PARENT = { str , && , != , declarations , definitions , j , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"funcArgNamesDifferent"
		- NEIGH  = { funcArgNamesDifferent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"functionName"
		- NEIGH  = { functionName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"nonneg"
		- NEIGH  = { nonneg , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2889 :	"index"
		- NEIGH  = { index , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2890 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2890 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2890 :	"declaration"
		- NEIGH  = { declaration , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2890 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2890 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2890 :	"definition"
		- NEIGH  = { definition , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2892 :	"std"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"list"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"<"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"Token"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"*"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	">"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"tokens"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"declaration"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2892 :	"definition"
		- NEIGH  = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }

2893 :	"reportError"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2893 :	"tokens"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2893 :	"Severity"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2893 :	"style"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2894 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2894 :	"functionName"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2894 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"MathLib"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"toString"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"index"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2895 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"declaration"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"declaration"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"str"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"std"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"string"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2896 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"definition"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"definition"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"str"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"std"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"string"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"+"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2897 :	"CWE628"
		- NEIGH  = { str , index , tokens , MathLib , string , toString , functionName , declaration , definition , std , + , CWE628 , style , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { declaration , tokens , > , < , * , Token , definition , list , std , }
		- SUCC   = { }

2900 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2900 :	"funcArgOrderDifferent"
		- NEIGH  = { funcArgOrderDifferent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2900 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2900 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2900 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2900 :	"functionName"
		- NEIGH  = { functionName , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2901 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2901 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2901 :	"declaration"
		- NEIGH  = { declaration , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2901 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2901 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2901 :	"definition"
		- NEIGH  = { definition , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"vector"
		- NEIGH  = { vector , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"<"
		- NEIGH  = { < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	">"
		- NEIGH  = { > , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2902 :	"declarations"
		- NEIGH  = { declarations , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"vector"
		- NEIGH  = { vector , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"<"
		- NEIGH  = { < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	">"
		- NEIGH  = { > , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2903 :	"definitions"
		- NEIGH  = { definitions , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2905 :	"std"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2905 :	"list"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2905 :	"<"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2905 :	"Token"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2905 :	"*"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2905 :	">"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2905 :	"tokens"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2906 :	"declarations"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2906 :	"size"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2906 :	"declarations"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2906 :	"declarations"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2906 :	"declaration"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2907 :	"definitions"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2907 :	"size"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2907 :	"definitions"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2907 :	"definitions"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2907 :	"definition"
		- NEIGH  = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { + , msg , string , functionName , std , }

2909 :	"std"
		- NEIGH  = { + , msg , string , functionName , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- SUCC   = { for , size , declarations , < , ++ , i , }

2909 :	"string"
		- NEIGH  = { + , msg , string , functionName , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- SUCC   = { for , size , declarations , < , ++ , i , }

2909 :	"msg"
		- NEIGH  = { + , msg , string , functionName , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- SUCC   = { for , size , declarations , < , ++ , i , }

2909 :	"+"
		- NEIGH  = { + , msg , string , functionName , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- SUCC   = { for , size , declarations , < , ++ , i , }

2909 :	"functionName"
		- NEIGH  = { + , msg , string , functionName , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- SUCC   = { for , size , declarations , < , ++ , i , }

2909 :	"+"
		- NEIGH  = { + , msg , string , functionName , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { definitions , declaration , tokens , size , declarations , > , < , * , Token , definition , list , std , }
		- SUCC   = { for , size , declarations , < , ++ , i , }

2910 :	"for"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"i"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"i"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"<"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"declarations"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"size"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"++"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2910 :	"i"
		- NEIGH  = { for , size , declarations , < , ++ , i , }
		- PARENT = { }
		- CHILD  = { declarations , != , i , if , }
		- PRED   = { + , msg , string , functionName , std , }
		- SUCC   = { += , msg , }

2911 :	"if"
		- NEIGH  = { != , i , if , }
		- PARENT = { for , size , declarations , < , ++ , i , }
		- CHILD  = { += , msg , }
		- PRED   = { }
		- SUCC   = { i , declarations , if , }

2911 :	"i"
		- NEIGH  = { != , i , if , }
		- PARENT = { for , size , declarations , < , ++ , i , }
		- CHILD  = { += , msg , }
		- PRED   = { }
		- SUCC   = { i , declarations , if , }

2911 :	"!="
		- NEIGH  = { != , i , if , }
		- PARENT = { for , size , declarations , < , ++ , i , }
		- CHILD  = { += , msg , }
		- PRED   = { }
		- SUCC   = { i , declarations , if , }

2912 :	"msg"
		- NEIGH  = { += , msg , }
		- PARENT = { != , i , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2912 :	"+="
		- NEIGH  = { += , msg , }
		- PARENT = { != , i , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2913 :	"if"
		- NEIGH  = { i , declarations , if , }
		- PARENT = { for , size , declarations , < , ++ , i , }
		- CHILD  = { str , i , += , declarations , msg , }
		- PRED   = { != , i , if , }
		- SUCC   = { }

2913 :	"declarations"
		- NEIGH  = { i , declarations , if , }
		- PARENT = { for , size , declarations , < , ++ , i , }
		- CHILD  = { str , i , += , declarations , msg , }
		- PRED   = { != , i , if , }
		- SUCC   = { }

2913 :	"i"
		- NEIGH  = { i , declarations , if , }
		- PARENT = { for , size , declarations , < , ++ , i , }
		- CHILD  = { str , i , += , declarations , msg , }
		- PRED   = { != , i , if , }
		- SUCC   = { }

2914 :	"msg"
		- NEIGH  = { str , i , += , declarations , msg , }
		- PARENT = { i , declarations , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2914 :	"+="
		- NEIGH  = { str , i , += , declarations , msg , }
		- PARENT = { i , declarations , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2914 :	"declarations"
		- NEIGH  = { str , i , += , declarations , msg , }
		- PARENT = { i , declarations , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2914 :	"i"
		- NEIGH  = { str , i , += , declarations , msg , }
		- PARENT = { i , declarations , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2914 :	"str"
		- NEIGH  = { str , i , += , declarations , msg , }
		- PARENT = { i , declarations , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2916 :	"msg"
		- NEIGH  = { += , msg , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , size , declarations , < , ++ , i , }
		- SUCC   = { for , size , < , ++ , i , definitions , }

2916 :	"+="
		- NEIGH  = { += , msg , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , size , declarations , < , ++ , i , }
		- SUCC   = { for , size , < , ++ , i , definitions , }

2917 :	"for"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"i"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"i"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"<"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"definitions"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"size"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"++"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2917 :	"i"
		- NEIGH  = { for , size , < , ++ , i , definitions , }
		- PARENT = { }
		- CHILD  = { != , i , definitions , if , }
		- PRED   = { += , msg , }
		- SUCC   = { += , msg , }

2918 :	"if"
		- NEIGH  = { != , i , if , }
		- PARENT = { for , size , < , ++ , i , definitions , }
		- CHILD  = { += , msg , }
		- PRED   = { }
		- SUCC   = { i , definitions , if , }

2918 :	"i"
		- NEIGH  = { != , i , if , }
		- PARENT = { for , size , < , ++ , i , definitions , }
		- CHILD  = { += , msg , }
		- PRED   = { }
		- SUCC   = { i , definitions , if , }

2918 :	"!="
		- NEIGH  = { != , i , if , }
		- PARENT = { for , size , < , ++ , i , definitions , }
		- CHILD  = { += , msg , }
		- PRED   = { }
		- SUCC   = { i , definitions , if , }

2919 :	"msg"
		- NEIGH  = { += , msg , }
		- PARENT = { != , i , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2919 :	"+="
		- NEIGH  = { += , msg , }
		- PARENT = { != , i , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2920 :	"if"
		- NEIGH  = { i , definitions , if , }
		- PARENT = { for , size , < , ++ , i , definitions , }
		- CHILD  = { str , i , definitions , += , msg , }
		- PRED   = { != , i , if , }
		- SUCC   = { }

2920 :	"definitions"
		- NEIGH  = { i , definitions , if , }
		- PARENT = { for , size , < , ++ , i , definitions , }
		- CHILD  = { str , i , definitions , += , msg , }
		- PRED   = { != , i , if , }
		- SUCC   = { }

2920 :	"i"
		- NEIGH  = { i , definitions , if , }
		- PARENT = { for , size , < , ++ , i , definitions , }
		- CHILD  = { str , i , definitions , += , msg , }
		- PRED   = { != , i , if , }
		- SUCC   = { }

2921 :	"msg"
		- NEIGH  = { str , i , definitions , += , msg , }
		- PARENT = { i , definitions , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2921 :	"+="
		- NEIGH  = { str , i , definitions , += , msg , }
		- PARENT = { i , definitions , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2921 :	"definitions"
		- NEIGH  = { str , i , definitions , += , msg , }
		- PARENT = { i , definitions , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2921 :	"i"
		- NEIGH  = { str , i , definitions , += , msg , }
		- PARENT = { i , definitions , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2921 :	"str"
		- NEIGH  = { str , i , definitions , += , msg , }
		- PARENT = { i , definitions , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2923 :	"msg"
		- NEIGH  = { += , msg , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , size , < , ++ , i , definitions , }
		- SUCC   = { CWE683 , msg , warning , tokens , Severity , reportError , }

2923 :	"+="
		- NEIGH  = { += , msg , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , size , < , ++ , i , definitions , }
		- SUCC   = { CWE683 , msg , warning , tokens , Severity , reportError , }

2924 :	"reportError"
		- NEIGH  = { CWE683 , msg , warning , tokens , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { += , msg , }
		- SUCC   = { }

2924 :	"tokens"
		- NEIGH  = { CWE683 , msg , warning , tokens , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { += , msg , }
		- SUCC   = { }

2924 :	"Severity"
		- NEIGH  = { CWE683 , msg , warning , tokens , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { += , msg , }
		- SUCC   = { }

2924 :	"warning"
		- NEIGH  = { CWE683 , msg , warning , tokens , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { += , msg , }
		- SUCC   = { }

2924 :	"msg"
		- NEIGH  = { CWE683 , msg , warning , tokens , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { += , msg , }
		- SUCC   = { }

2924 :	"CWE683"
		- NEIGH  = { CWE683 , msg , warning , tokens , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { += , msg , }
		- SUCC   = { }

2927 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"findShadowed"
		- NEIGH  = { findShadowed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"Scope"
		- NEIGH  = { Scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"scope"
		- NEIGH  = { scope , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"&"
		- NEIGH  = { & , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"varname"
		- NEIGH  = { varname , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2927 :	"linenr"
		- NEIGH  = { linenr , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2929 :	"if"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2929 :	"!"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2929 :	"scope"
		- NEIGH  = { scope , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2930 :	"return"
		- NEIGH  = { return , }
		- PARENT = { scope , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2931 :	"for"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { }
		- CHILD  = { varname , == , && , > , isExecutable , scope , name , linenr , var , nameToken , if , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { functionList , f , scope , & , Function , for , }

2931 :	"Variable"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { }
		- CHILD  = { varname , == , && , > , isExecutable , scope , name , linenr , var , nameToken , if , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { functionList , f , scope , & , Function , for , }

2931 :	"&"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { }
		- CHILD  = { varname , == , && , > , isExecutable , scope , name , linenr , var , nameToken , if , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { functionList , f , scope , & , Function , for , }

2931 :	"var"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { }
		- CHILD  = { varname , == , && , > , isExecutable , scope , name , linenr , var , nameToken , if , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { functionList , f , scope , & , Function , for , }

2931 :	"scope"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { }
		- CHILD  = { varname , == , && , > , isExecutable , scope , name , linenr , var , nameToken , if , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { functionList , f , scope , & , Function , for , }

2931 :	"varlist"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { }
		- CHILD  = { varname , == , && , > , isExecutable , scope , name , linenr , var , nameToken , if , }
		- PRED   = { scope , ! , if , }
		- SUCC   = { functionList , f , scope , & , Function , for , }

2932 :	"if"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"scope"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"isExecutable"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"&&"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"var"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"nameToken"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"linenr"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	">"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2932 :	"linenr"
		- NEIGH  = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { varname , == , name , var , if , }

2933 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2934 :	"if"
		- NEIGH  = { varname , == , name , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { nameToken , var , return , }
		- PRED   = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- SUCC   = { }

2934 :	"var"
		- NEIGH  = { varname , == , name , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { nameToken , var , return , }
		- PRED   = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- SUCC   = { }

2934 :	"name"
		- NEIGH  = { varname , == , name , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { nameToken , var , return , }
		- PRED   = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- SUCC   = { }

2934 :	"=="
		- NEIGH  = { varname , == , name , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { nameToken , var , return , }
		- PRED   = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- SUCC   = { }

2934 :	"varname"
		- NEIGH  = { varname , == , name , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { nameToken , var , return , }
		- PRED   = { && , > , isExecutable , scope , linenr , var , nameToken , if , }
		- SUCC   = { }

2935 :	"return"
		- NEIGH  = { nameToken , var , return , }
		- PARENT = { varname , == , name , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2935 :	"var"
		- NEIGH  = { nameToken , var , return , }
		- PARENT = { varname , == , name , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2935 :	"nameToken"
		- NEIGH  = { nameToken , var , return , }
		- PARENT = { varname , == , name , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2937 :	"for"
		- NEIGH  = { functionList , f , scope , & , Function , for , }
		- PARENT = { }
		- CHILD  = { varname , == , f , name , if , }
		- PRED   = { varlist , scope , & , var , Variable , for , }
		- SUCC   = { eLambda , == , type , Scope , scope , if , }

2937 :	"Function"
		- NEIGH  = { functionList , f , scope , & , Function , for , }
		- PARENT = { }
		- CHILD  = { varname , == , f , name , if , }
		- PRED   = { varlist , scope , & , var , Variable , for , }
		- SUCC   = { eLambda , == , type , Scope , scope , if , }

2937 :	"&"
		- NEIGH  = { functionList , f , scope , & , Function , for , }
		- PARENT = { }
		- CHILD  = { varname , == , f , name , if , }
		- PRED   = { varlist , scope , & , var , Variable , for , }
		- SUCC   = { eLambda , == , type , Scope , scope , if , }

2937 :	"f"
		- NEIGH  = { functionList , f , scope , & , Function , for , }
		- PARENT = { }
		- CHILD  = { varname , == , f , name , if , }
		- PRED   = { varlist , scope , & , var , Variable , for , }
		- SUCC   = { eLambda , == , type , Scope , scope , if , }

2937 :	"scope"
		- NEIGH  = { functionList , f , scope , & , Function , for , }
		- PARENT = { }
		- CHILD  = { varname , == , f , name , if , }
		- PRED   = { varlist , scope , & , var , Variable , for , }
		- SUCC   = { eLambda , == , type , Scope , scope , if , }

2937 :	"functionList"
		- NEIGH  = { functionList , f , scope , & , Function , for , }
		- PARENT = { }
		- CHILD  = { varname , == , f , name , if , }
		- PRED   = { varlist , scope , & , var , Variable , for , }
		- SUCC   = { eLambda , == , type , Scope , scope , if , }

2938 :	"if"
		- NEIGH  = { varname , == , f , name , if , }
		- PARENT = { functionList , f , scope , & , Function , for , }
		- CHILD  = { tokenDef , f , return , }
		- PRED   = { }
		- SUCC   = { }

2938 :	"f"
		- NEIGH  = { varname , == , f , name , if , }
		- PARENT = { functionList , f , scope , & , Function , for , }
		- CHILD  = { tokenDef , f , return , }
		- PRED   = { }
		- SUCC   = { }

2938 :	"name"
		- NEIGH  = { varname , == , f , name , if , }
		- PARENT = { functionList , f , scope , & , Function , for , }
		- CHILD  = { tokenDef , f , return , }
		- PRED   = { }
		- SUCC   = { }

2938 :	"=="
		- NEIGH  = { varname , == , f , name , if , }
		- PARENT = { functionList , f , scope , & , Function , for , }
		- CHILD  = { tokenDef , f , return , }
		- PRED   = { }
		- SUCC   = { }

2938 :	"varname"
		- NEIGH  = { varname , == , f , name , if , }
		- PARENT = { functionList , f , scope , & , Function , for , }
		- CHILD  = { tokenDef , f , return , }
		- PRED   = { }
		- SUCC   = { }

2939 :	"return"
		- NEIGH  = { tokenDef , f , return , }
		- PARENT = { varname , == , f , name , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2939 :	"f"
		- NEIGH  = { tokenDef , f , return , }
		- PARENT = { varname , == , f , name , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2939 :	"tokenDef"
		- NEIGH  = { tokenDef , f , return , }
		- PARENT = { varname , == , f , name , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2941 :	"if"
		- NEIGH  = { eLambda , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { functionList , f , scope , & , Function , for , }
		- SUCC   = { linenr , scope , findShadowed , varname , nestedIn , return , }

2941 :	"scope"
		- NEIGH  = { eLambda , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { functionList , f , scope , & , Function , for , }
		- SUCC   = { linenr , scope , findShadowed , varname , nestedIn , return , }

2941 :	"type"
		- NEIGH  = { eLambda , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { functionList , f , scope , & , Function , for , }
		- SUCC   = { linenr , scope , findShadowed , varname , nestedIn , return , }

2941 :	"=="
		- NEIGH  = { eLambda , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { functionList , f , scope , & , Function , for , }
		- SUCC   = { linenr , scope , findShadowed , varname , nestedIn , return , }

2941 :	"Scope"
		- NEIGH  = { eLambda , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { functionList , f , scope , & , Function , for , }
		- SUCC   = { linenr , scope , findShadowed , varname , nestedIn , return , }

2941 :	"eLambda"
		- NEIGH  = { eLambda , == , type , Scope , scope , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { functionList , f , scope , & , Function , for , }
		- SUCC   = { linenr , scope , findShadowed , varname , nestedIn , return , }

2942 :	"return"
		- NEIGH  = { return , }
		- PARENT = { eLambda , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2943 :	"return"
		- NEIGH  = { linenr , scope , findShadowed , varname , nestedIn , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , scope , if , }
		- SUCC   = { }

2943 :	"findShadowed"
		- NEIGH  = { linenr , scope , findShadowed , varname , nestedIn , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , scope , if , }
		- SUCC   = { }

2943 :	"scope"
		- NEIGH  = { linenr , scope , findShadowed , varname , nestedIn , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , scope , if , }
		- SUCC   = { }

2943 :	"nestedIn"
		- NEIGH  = { linenr , scope , findShadowed , varname , nestedIn , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , scope , if , }
		- SUCC   = { }

2943 :	"varname"
		- NEIGH  = { linenr , scope , findShadowed , varname , nestedIn , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , scope , if , }
		- SUCC   = { }

2943 :	"linenr"
		- NEIGH  = { linenr , scope , findShadowed , varname , nestedIn , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , scope , if , }
		- SUCC   = { }

2946 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2946 :	"checkShadowVariables"
		- NEIGH  = { checkShadowVariables , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2948 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2948 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2948 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2948 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2948 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2948 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

2949 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2950 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

2950 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

2950 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

2950 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

2950 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { scopeList , symbolDatabase , scope , & , Scope , for , }

2951 :	"for"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { varlist , var , eFunction , Variable , ScopeType , && , while , & , scope , * , eLambda , == , || , type , Scope , isExecutable , for , != , functionScope , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2951 :	"Scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { varlist , var , eFunction , Variable , ScopeType , && , while , & , scope , * , eLambda , == , || , type , Scope , isExecutable , for , != , functionScope , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2951 :	"&"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { varlist , var , eFunction , Variable , ScopeType , && , while , & , scope , * , eLambda , == , || , type , Scope , isExecutable , for , != , functionScope , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2951 :	"scope"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { varlist , var , eFunction , Variable , ScopeType , && , while , & , scope , * , eLambda , == , || , type , Scope , isExecutable , for , != , functionScope , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2951 :	"symbolDatabase"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { varlist , var , eFunction , Variable , ScopeType , && , while , & , scope , * , eLambda , == , || , type , Scope , isExecutable , for , != , functionScope , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2951 :	"scopeList"
		- NEIGH  = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- PARENT = { }
		- CHILD  = { varlist , var , eFunction , Variable , ScopeType , && , while , & , scope , * , eLambda , == , || , type , Scope , isExecutable , for , != , functionScope , ! , if , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

2952 :	"if"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"!"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"scope"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"isExecutable"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"||"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"scope"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"type"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"=="
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"Scope"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2952 :	"eLambda"
		- NEIGH  = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { * , scope , & , functionScope , Scope , }

2953 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2954 :	"Scope"
		- NEIGH  = { * , scope , & , functionScope , Scope , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- SUCC   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }

2954 :	"*"
		- NEIGH  = { * , scope , & , functionScope , Scope , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- SUCC   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }

2954 :	"functionScope"
		- NEIGH  = { * , scope , & , functionScope , Scope , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- SUCC   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }

2954 :	"&"
		- NEIGH  = { * , scope , & , functionScope , Scope , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- SUCC   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }

2954 :	"scope"
		- NEIGH  = { * , scope , & , functionScope , Scope , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { }
		- PRED   = { eLambda , == , type , Scope , isExecutable , scope , || , ! , if , }
		- SUCC   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }

2955 :	"while"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"functionScope"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"&&"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"functionScope"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"type"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"!="
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"Scope"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"ScopeType"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"eFunction"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"&&"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"functionScope"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"type"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"!="
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"Scope"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"ScopeType"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2955 :	"eLambda"
		- NEIGH  = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { nestedIn , functionScope , }
		- PRED   = { * , scope , & , functionScope , Scope , }
		- SUCC   = { varlist , scope , & , var , Variable , for , }

2956 :	"functionScope"
		- NEIGH  = { nestedIn , functionScope , }
		- PARENT = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2956 :	"functionScope"
		- NEIGH  = { nestedIn , functionScope , }
		- PARENT = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2956 :	"nestedIn"
		- NEIGH  = { nestedIn , functionScope , }
		- PARENT = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2957 :	"for"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { varId , nameToken , shadowError , function , ! , className , linenr , name , == , Token , scope , * , findShadowed , type , nestedIn , if , var , eFunction , ScopeType , Scope , != , functionScope , shadowed , isExpandedMacro , && , }
		- PRED   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- SUCC   = { }

2957 :	"Variable"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { varId , nameToken , shadowError , function , ! , className , linenr , name , == , Token , scope , * , findShadowed , type , nestedIn , if , var , eFunction , ScopeType , Scope , != , functionScope , shadowed , isExpandedMacro , && , }
		- PRED   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- SUCC   = { }

2957 :	"&"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { varId , nameToken , shadowError , function , ! , className , linenr , name , == , Token , scope , * , findShadowed , type , nestedIn , if , var , eFunction , ScopeType , Scope , != , functionScope , shadowed , isExpandedMacro , && , }
		- PRED   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- SUCC   = { }

2957 :	"var"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { varId , nameToken , shadowError , function , ! , className , linenr , name , == , Token , scope , * , findShadowed , type , nestedIn , if , var , eFunction , ScopeType , Scope , != , functionScope , shadowed , isExpandedMacro , && , }
		- PRED   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- SUCC   = { }

2957 :	"scope"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { varId , nameToken , shadowError , function , ! , className , linenr , name , == , Token , scope , * , findShadowed , type , nestedIn , if , var , eFunction , ScopeType , Scope , != , functionScope , shadowed , isExpandedMacro , && , }
		- PRED   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- SUCC   = { }

2957 :	"varlist"
		- NEIGH  = { varlist , scope , & , var , Variable , for , }
		- PARENT = { scopeList , symbolDatabase , scope , & , Scope , for , }
		- CHILD  = { varId , nameToken , shadowError , function , ! , className , linenr , name , == , Token , scope , * , findShadowed , type , nestedIn , if , var , eFunction , ScopeType , Scope , != , functionScope , shadowed , isExpandedMacro , && , }
		- PRED   = { eLambda , eFunction , ScopeType , Scope , != , type , && , functionScope , while , }
		- SUCC   = { }

2958 :	"if"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2958 :	"var"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2958 :	"nameToken"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2958 :	"&&"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2958 :	"var"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2958 :	"nameToken"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2958 :	"isExpandedMacro"
		- NEIGH  = { isExpandedMacro , && , nameToken , var , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }

2959 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { isExpandedMacro , && , nameToken , var , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2961 :	"if"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"functionScope"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"&&"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"functionScope"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"type"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"=="
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"Scope"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"ScopeType"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"eFunction"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"&&"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"functionScope"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2961 :	"function"
		- NEIGH  = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { if , argumentList , function , functionScope , for , arg , shadowArg , Variable , & , }
		- PRED   = { isExpandedMacro , && , nameToken , var , if , }
		- SUCC   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }

2962 :	"shadowArg"
		- NEIGH  = { shadowArg , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { argumentList , function , for , arg , functionScope , & , Variable , }

2963 :	"for"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2963 :	"Variable"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2963 :	"&"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2963 :	"arg"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2963 :	"functionScope"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2963 :	"function"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2963 :	"argumentList"
		- NEIGH  = { argumentList , function , for , arg , functionScope , & , Variable , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { == , && , if , nameToken , arg , name , var , }
		- PRED   = { shadowArg , }
		- SUCC   = { shadowArg , if , }

2964 :	"if"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"arg"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"nameToken"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"&&"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"var"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"name"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"=="
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"arg"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2964 :	"name"
		- NEIGH  = { == , && , if , nameToken , arg , name , var , }
		- PARENT = { argumentList , function , for , arg , functionScope , & , Variable , }
		- CHILD  = { break , shadowArg , arg , nameToken , var , shadowError , }
		- PRED   = { }
		- SUCC   = { }

2965 :	"shadowError"
		- NEIGH  = { arg , nameToken , var , shadowError , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowArg , }

2965 :	"var"
		- NEIGH  = { arg , nameToken , var , shadowError , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowArg , }

2965 :	"nameToken"
		- NEIGH  = { arg , nameToken , var , shadowError , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowArg , }

2965 :	"arg"
		- NEIGH  = { arg , nameToken , var , shadowError , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowArg , }

2965 :	"nameToken"
		- NEIGH  = { arg , nameToken , var , shadowError , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowArg , }

2966 :	"shadowArg"
		- NEIGH  = { shadowArg , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { arg , nameToken , var , shadowError , }
		- SUCC   = { break , }

2967 :	"break"
		- NEIGH  = { break , }
		- PARENT = { == , && , if , nameToken , arg , name , var , }
		- CHILD  = { }
		- PRED   = { shadowArg , }
		- SUCC   = { }

2970 :	"if"
		- NEIGH  = { shadowArg , if , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { continue , }
		- PRED   = { argumentList , function , for , arg , functionScope , & , Variable , }
		- SUCC   = { }

2970 :	"shadowArg"
		- NEIGH  = { shadowArg , if , }
		- PARENT = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- CHILD  = { continue , }
		- PRED   = { argumentList , function , for , arg , functionScope , & , Variable , }
		- SUCC   = { }

2971 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { shadowArg , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2974 :	"Token"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"*"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"shadowed"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"findShadowed"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"scope"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"nestedIn"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"var"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"name"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"var"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"nameToken"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2974 :	"linenr"
		- NEIGH  = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { eFunction , ScopeType , function , Scope , && , == , type , functionScope , if , }
		- SUCC   = { shadowed , ! , if , }

2975 :	"if"
		- NEIGH  = { shadowed , ! , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- SUCC   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }

2975 :	"!"
		- NEIGH  = { shadowed , ! , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- SUCC   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }

2975 :	"shadowed"
		- NEIGH  = { shadowed , ! , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { nameToken , linenr , name , var , nestedIn , scope , findShadowed , shadowed , * , Token , }
		- SUCC   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }

2976 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { shadowed , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2977 :	"if"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"scope"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"type"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"=="
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"Scope"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"eFunction"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"&&"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"scope"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"className"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"=="
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"var"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2977 :	"name"
		- NEIGH  = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { continue , }
		- PRED   = { shadowed , ! , if , }
		- SUCC   = { != , shadowed , nameToken , shadowError , varId , var , }

2978 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2979 :	"shadowError"
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2979 :	"var"
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2979 :	"nameToken"
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2979 :	"shadowed"
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2979 :	"shadowed"
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2979 :	"varId"
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2979 :	"!="
		- NEIGH  = { != , shadowed , nameToken , shadowError , varId , var , }
		- PARENT = { varlist , scope , & , var , Variable , for , }
		- CHILD  = { }
		- PRED   = { name , var , className , eFunction , && , == , type , Scope , scope , if , }
		- SUCC   = { }

2984 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"shadowError"
		- NEIGH  = { shadowError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"var"
		- NEIGH  = { var , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"shadowed"
		- NEIGH  = { shadowed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"std"
		- NEIGH  = { std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"string"
		- NEIGH  = { string , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2984 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2986 :	"ErrorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowed , ErrorPathItem , push_back , errorPath , }

2986 :	"errorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { shadowed , ErrorPathItem , push_back , errorPath , }

2987 :	"errorPath"
		- NEIGH  = { shadowed , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { var , ErrorPathItem , push_back , errorPath , }

2987 :	"push_back"
		- NEIGH  = { shadowed , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { var , ErrorPathItem , push_back , errorPath , }

2987 :	"ErrorPathItem"
		- NEIGH  = { shadowed , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { var , ErrorPathItem , push_back , errorPath , }

2987 :	"shadowed"
		- NEIGH  = { shadowed , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { var , ErrorPathItem , push_back , errorPath , }

2988 :	"errorPath"
		- NEIGH  = { var , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { shadowed , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { str , varname , & , string , var , type , std , }

2988 :	"push_back"
		- NEIGH  = { var , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { shadowed , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { str , varname , & , string , var , type , std , }

2988 :	"ErrorPathItem"
		- NEIGH  = { var , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { shadowed , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { str , varname , & , string , var , type , std , }

2988 :	"var"
		- NEIGH  = { var , ErrorPathItem , push_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { shadowed , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { str , varname , & , string , var , type , std , }

2989 :	"std"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"string"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"&"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"varname"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"var"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"var"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"str"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2989 :	"type"
		- NEIGH  = { str , varname , & , string , var , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { var , ErrorPathItem , push_back , errorPath , }
		- SUCC   = { substr , + , std , type , string , toupper , Type , }

2990 :	"std"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"string"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"Type"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"std"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"toupper"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"type"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"+"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"type"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2990 :	"substr"
		- NEIGH  = { substr , + , std , type , string , toupper , Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { str , varname , & , string , var , type , std , }
		- SUCC   = { + , id , string , Type , std , }

2991 :	"std"
		- NEIGH  = { + , id , string , Type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { substr , + , std , type , string , toupper , Type , }
		- SUCC   = { varname , + , message , string , type , std , }

2991 :	"string"
		- NEIGH  = { + , id , string , Type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { substr , + , std , type , string , toupper , Type , }
		- SUCC   = { varname , + , message , string , type , std , }

2991 :	"id"
		- NEIGH  = { + , id , string , Type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { substr , + , std , type , string , toupper , Type , }
		- SUCC   = { varname , + , message , string , type , std , }

2991 :	"+"
		- NEIGH  = { + , id , string , Type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { substr , + , std , type , string , toupper , Type , }
		- SUCC   = { varname , + , message , string , type , std , }

2991 :	"Type"
		- NEIGH  = { + , id , string , Type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { substr , + , std , type , string , toupper , Type , }
		- SUCC   = { varname , + , message , string , type , std , }

2992 :	"std"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"string"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"message"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"+"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"varname"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"+"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"+"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2992 :	"type"
		- NEIGH  = { varname , + , message , string , type , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { + , id , string , Type , std , }
		- SUCC   = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }

2993 :	"reportError"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"errorPath"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"Severity"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"style"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"id"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"c_str"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"message"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2993 :	"CWE398"
		- NEIGH  = { CWE398 , c_str , message , reportError , id , Severity , style , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { varname , + , message , string , type , std , }
		- SUCC   = { }

2996 :	"isVariableExpression"
		- NEIGH  = { isVariableExpression , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2996 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2996 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2996 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

2998 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

2998 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

2998 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

2998 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { tok , simpleMatch , Token , if , }

2999 :	"return"
		- NEIGH  = { return , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3000 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

3000 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

3000 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

3000 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { return , }

3001 :	"return"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3001 :	"isVariableExpression"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3001 :	"tok"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3001 :	"astOperand1"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3001 :	"&&"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3002 :	"isVariableExpression"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3002 :	"tok"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3002 :	"astOperand2"
		- NEIGH  = { astOperand2 , && , tok , astOperand1 , isVariableExpression , return , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3003 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { }

3006 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3006 :	"checkConstArgument"
		- NEIGH  = { checkConstArgument , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3008 :	"if"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

3008 :	"!"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

3008 :	"mSettings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

3008 :	"isEnabled"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

3008 :	"Settings"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

3008 :	"STYLE"
		- NEIGH  = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }

3009 :	"return"
		- NEIGH  = { return , }
		- PARENT = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3010 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3010 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3010 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3010 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3010 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Settings , STYLE , isEnabled , mSettings , ! , if , }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3011 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3011 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3011 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3011 :	"functionScope"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3011 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3011 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3012 :	"for"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"Token"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"*"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"functionScope"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"bodyStart"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"!="
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"functionScope"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"bodyEnd"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3012 :	"next"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , isVariableExpression , * , isConstVarExpression , tok2 , == , hasKnownIntValue , Match , constArgumentError , astParent , front , tok , isCPPCast , previous , simpleMatch , values , Token , ! , if , }
		- PRED   = { }
		- SUCC   = { }

3013 :	"if"
		- NEIGH  = { astParent , tok , simpleMatch , Token , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , astParent , tok , Token , if , ! , Match , }

3013 :	"!"
		- NEIGH  = { astParent , tok , simpleMatch , Token , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , astParent , tok , Token , if , ! , Match , }

3013 :	"Token"
		- NEIGH  = { astParent , tok , simpleMatch , Token , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , astParent , tok , Token , if , ! , Match , }

3013 :	"simpleMatch"
		- NEIGH  = { astParent , tok , simpleMatch , Token , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , astParent , tok , Token , if , ! , Match , }

3013 :	"tok"
		- NEIGH  = { astParent , tok , simpleMatch , Token , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , astParent , tok , Token , if , ! , Match , }

3013 :	"astParent"
		- NEIGH  = { astParent , tok , simpleMatch , Token , ! , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { previous , astParent , tok , Token , if , ! , Match , }

3014 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astParent , tok , simpleMatch , Token , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3015 :	"if"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3015 :	"!"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3015 :	"Token"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3015 :	"Match"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3015 :	"tok"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3015 :	"astParent"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3015 :	"previous"
		- NEIGH  = { previous , astParent , tok , Token , if , ! , Match , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , tok , simpleMatch , Token , ! , if , }
		- SUCC   = { previous , astParent , tok , Token , Match , if , }

3016 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { previous , astParent , tok , Token , if , ! , Match , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3017 :	"if"
		- NEIGH  = { previous , astParent , tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , == , tok , previous , if , }

3017 :	"Token"
		- NEIGH  = { previous , astParent , tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , == , tok , previous , if , }

3017 :	"Match"
		- NEIGH  = { previous , astParent , tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , == , tok , previous , if , }

3017 :	"tok"
		- NEIGH  = { previous , astParent , tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , == , tok , previous , if , }

3017 :	"astParent"
		- NEIGH  = { previous , astParent , tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , == , tok , previous , if , }

3017 :	"previous"
		- NEIGH  = { previous , astParent , tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , if , ! , Match , }
		- SUCC   = { astParent , == , tok , previous , if , }

3018 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { previous , astParent , tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3019 :	"if"
		- NEIGH  = { astParent , == , tok , previous , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , Match , if , }
		- SUCC   = { tok , ! , hasKnownIntValue , if , }

3019 :	"tok"
		- NEIGH  = { astParent , == , tok , previous , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , Match , if , }
		- SUCC   = { tok , ! , hasKnownIntValue , if , }

3019 :	"=="
		- NEIGH  = { astParent , == , tok , previous , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , Match , if , }
		- SUCC   = { tok , ! , hasKnownIntValue , if , }

3019 :	"tok"
		- NEIGH  = { astParent , == , tok , previous , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , Match , if , }
		- SUCC   = { tok , ! , hasKnownIntValue , if , }

3019 :	"astParent"
		- NEIGH  = { astParent , == , tok , previous , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , Match , if , }
		- SUCC   = { tok , ! , hasKnownIntValue , if , }

3019 :	"previous"
		- NEIGH  = { astParent , == , tok , previous , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { previous , astParent , tok , Token , Match , if , }
		- SUCC   = { tok , ! , hasKnownIntValue , if , }

3020 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { astParent , == , tok , previous , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3021 :	"if"
		- NEIGH  = { tok , ! , hasKnownIntValue , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , == , tok , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

3021 :	"!"
		- NEIGH  = { tok , ! , hasKnownIntValue , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , == , tok , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

3021 :	"tok"
		- NEIGH  = { tok , ! , hasKnownIntValue , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , == , tok , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

3021 :	"hasKnownIntValue"
		- NEIGH  = { tok , ! , hasKnownIntValue , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astParent , == , tok , previous , if , }
		- SUCC   = { tok , Token , Match , if , }

3022 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , ! , hasKnownIntValue , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3023 :	"if"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , hasKnownIntValue , if , }
		- SUCC   = { tok , isConstVarExpression , if , }

3023 :	"Token"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , hasKnownIntValue , if , }
		- SUCC   = { tok , isConstVarExpression , if , }

3023 :	"Match"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , hasKnownIntValue , if , }
		- SUCC   = { tok , isConstVarExpression , if , }

3023 :	"tok"
		- NEIGH  = { tok , Token , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , ! , hasKnownIntValue , if , }
		- SUCC   = { tok , isConstVarExpression , if , }

3024 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Token , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3025 :	"if"
		- NEIGH  = { tok , isConstVarExpression , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { tok , tok2 , * , Token , }

3025 :	"isConstVarExpression"
		- NEIGH  = { tok , isConstVarExpression , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { tok , tok2 , * , Token , }

3025 :	"tok"
		- NEIGH  = { tok , isConstVarExpression , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok , Token , Match , if , }
		- SUCC   = { tok , tok2 , * , Token , }

3026 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , isConstVarExpression , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3027 :	"Token"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstVarExpression , if , }
		- SUCC   = { tok2 , isCPPCast , if , }

3027 :	"*"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstVarExpression , if , }
		- SUCC   = { tok2 , isCPPCast , if , }

3027 :	"tok2"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstVarExpression , if , }
		- SUCC   = { tok2 , isCPPCast , if , }

3027 :	"tok"
		- NEIGH  = { tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , isConstVarExpression , if , }
		- SUCC   = { tok2 , isCPPCast , if , }

3028 :	"if"
		- NEIGH  = { tok2 , isCPPCast , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astOperand2 , tok2 , }
		- PRED   = { tok , tok2 , * , Token , }
		- SUCC   = { tok2 , isVariableExpression , if , }

3028 :	"isCPPCast"
		- NEIGH  = { tok2 , isCPPCast , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astOperand2 , tok2 , }
		- PRED   = { tok , tok2 , * , Token , }
		- SUCC   = { tok2 , isVariableExpression , if , }

3028 :	"tok2"
		- NEIGH  = { tok2 , isCPPCast , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { astOperand2 , tok2 , }
		- PRED   = { tok , tok2 , * , Token , }
		- SUCC   = { tok2 , isVariableExpression , if , }

3029 :	"tok2"
		- NEIGH  = { astOperand2 , tok2 , }
		- PARENT = { tok2 , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3029 :	"tok2"
		- NEIGH  = { astOperand2 , tok2 , }
		- PARENT = { tok2 , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3029 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok2 , }
		- PARENT = { tok2 , isCPPCast , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3030 :	"if"
		- NEIGH  = { tok2 , isVariableExpression , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok2 , isCPPCast , if , }
		- SUCC   = { values , previous , tok , & , astParent , front , constArgumentError , }

3030 :	"isVariableExpression"
		- NEIGH  = { tok2 , isVariableExpression , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok2 , isCPPCast , if , }
		- SUCC   = { values , previous , tok , & , astParent , front , constArgumentError , }

3030 :	"tok2"
		- NEIGH  = { tok2 , isVariableExpression , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { tok2 , isCPPCast , if , }
		- SUCC   = { values , previous , tok , & , astParent , front , constArgumentError , }

3031 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok2 , isVariableExpression , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3032 :	"constArgumentError"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"tok"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"tok"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"astParent"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"previous"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"&"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"tok"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"values"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3032 :	"front"
		- NEIGH  = { values , previous , tok , & , astParent , front , constArgumentError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , isVariableExpression , if , }
		- SUCC   = { }

3037 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"constArgumentError"
		- NEIGH  = { constArgumentError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"ftok"
		- NEIGH  = { ftok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3037 :	"value"
		- NEIGH  = { value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3039 :	"MathLib"
		- NEIGH  = { value , intvalue , bigint , MathLib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , expr , string , expressionString , std , }

3039 :	"bigint"
		- NEIGH  = { value , intvalue , bigint , MathLib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , expr , string , expressionString , std , }

3039 :	"intvalue"
		- NEIGH  = { value , intvalue , bigint , MathLib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , expr , string , expressionString , std , }

3039 :	"value"
		- NEIGH  = { value , intvalue , bigint , MathLib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , expr , string , expressionString , std , }

3039 :	"value"
		- NEIGH  = { value , intvalue , bigint , MathLib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , expr , string , expressionString , std , }

3039 :	"intvalue"
		- NEIGH  = { value , intvalue , bigint , MathLib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tok , expr , string , expressionString , std , }

3040 :	"std"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"string"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"expr"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"tok"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"tok"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"expressionString"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"std"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3040 :	"string"
		- NEIGH  = { tok , expr , string , expressionString , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { value , intvalue , bigint , MathLib , }
		- SUCC   = { ftok , fun , str , string , std , }

3041 :	"std"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"string"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"fun"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"ftok"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"ftok"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"str"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"std"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3041 :	"string"
		- NEIGH  = { ftok , fun , str , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , expr , string , expressionString , std , }
		- SUCC   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }

3043 :	"std"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"string"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"errmsg"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"+"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"expr"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"+"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"+"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"fun"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"+"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"+"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"std"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"to_string"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3043 :	"intvalue"
		- NEIGH  = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ftok , fun , str , string , std , }
		- SUCC   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }

3044 :	"ErrorPath"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- SUCC   = { CWE570 , errmsg , Severity , style , errorPath , reportError , }

3044 :	"errorPath"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- SUCC   = { CWE570 , errmsg , Severity , style , errorPath , reportError , }

3044 :	"getErrorPath"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- SUCC   = { CWE570 , errmsg , Severity , style , errorPath , reportError , }

3044 :	"tok"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- SUCC   = { CWE570 , errmsg , Severity , style , errorPath , reportError , }

3044 :	"value"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- SUCC   = { CWE570 , errmsg , Severity , style , errorPath , reportError , }

3044 :	"errmsg"
		- NEIGH  = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { intvalue , fun , + , expr , to_string , errmsg , string , std , }
		- SUCC   = { CWE570 , errmsg , Severity , style , errorPath , reportError , }

3045 :	"reportError"
		- NEIGH  = { CWE570 , errmsg , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

3045 :	"errorPath"
		- NEIGH  = { CWE570 , errmsg , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

3045 :	"Severity"
		- NEIGH  = { CWE570 , errmsg , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

3045 :	"style"
		- NEIGH  = { CWE570 , errmsg , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

3045 :	"errmsg"
		- NEIGH  = { CWE570 , errmsg , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

3045 :	"CWE570"
		- NEIGH  = { CWE570 , errmsg , Severity , style , errorPath , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errmsg , value , tok , getErrorPath , errorPath , ErrorPath , }
		- SUCC   = { }

3048 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3048 :	"checkComparePointers"
		- NEIGH  = { checkComparePointers , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3050 :	"SymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3050 :	"*"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3050 :	"symbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3050 :	"mTokenizer"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3050 :	"getSymbolDatabase"
		- NEIGH  = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }

3051 :	"for"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3051 :	"Scope"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3051 :	"*"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3051 :	"functionScope"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3051 :	"symbolDatabase"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3051 :	"functionScopes"
		- NEIGH  = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- PARENT = { }
		- CHILD  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PRED   = { getSymbolDatabase , mTokenizer , symbolDatabase , * , SymbolDatabase , }
		- SUCC   = { }

3052 :	"for"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"Token"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"*"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"functionScope"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"bodyStart"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"!="
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"functionScope"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"bodyEnd"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"tok"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3052 :	"next"
		- NEIGH  = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- PARENT = { symbolDatabase , functionScopes , * , functionScope , Scope , for , }
		- CHILD  = { & , comparePointersError , isReference , varId , variable , v2 , isRValueReference , getLifetimeObjValue , Value , == , Token , var2 , v1 , astIsPointer , Variable , ValueFlow , || , tok2 , astOperand1 , astOperand2 , var1 , * , tok , ! , if , tok1 , tokvalue , isLocalLifetimeValue , Match , }
		- PRED   = { }
		- SUCC   = { }

3053 :	"if"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , tok1 , astOperand1 , * , Token , }

3053 :	"!"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , tok1 , astOperand1 , * , Token , }

3053 :	"Token"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , tok1 , astOperand1 , * , Token , }

3053 :	"Match"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , tok1 , astOperand1 , * , Token , }

3053 :	"tok"
		- NEIGH  = { tok , Token , ! , Match , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { tok , tok1 , astOperand1 , * , Token , }

3054 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok , Token , ! , Match , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3055 :	"Token"
		- NEIGH  = { tok , tok1 , astOperand1 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { astOperand2 , tok , tok2 , * , Token , }

3055 :	"*"
		- NEIGH  = { tok , tok1 , astOperand1 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { astOperand2 , tok , tok2 , * , Token , }

3055 :	"tok1"
		- NEIGH  = { tok , tok1 , astOperand1 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { astOperand2 , tok , tok2 , * , Token , }

3055 :	"tok"
		- NEIGH  = { tok , tok1 , astOperand1 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { astOperand2 , tok , tok2 , * , Token , }

3055 :	"astOperand1"
		- NEIGH  = { tok , tok1 , astOperand1 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , Token , ! , Match , if , }
		- SUCC   = { astOperand2 , tok , tok2 , * , Token , }

3056 :	"Token"
		- NEIGH  = { astOperand2 , tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , tok1 , astOperand1 , * , Token , }
		- SUCC   = { tok2 , tok1 , || , ! , astIsPointer , if , }

3056 :	"*"
		- NEIGH  = { astOperand2 , tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , tok1 , astOperand1 , * , Token , }
		- SUCC   = { tok2 , tok1 , || , ! , astIsPointer , if , }

3056 :	"tok2"
		- NEIGH  = { astOperand2 , tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , tok1 , astOperand1 , * , Token , }
		- SUCC   = { tok2 , tok1 , || , ! , astIsPointer , if , }

3056 :	"tok"
		- NEIGH  = { astOperand2 , tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , tok1 , astOperand1 , * , Token , }
		- SUCC   = { tok2 , tok1 , || , ! , astIsPointer , if , }

3056 :	"astOperand2"
		- NEIGH  = { astOperand2 , tok , tok2 , * , Token , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok , tok1 , astOperand1 , * , Token , }
		- SUCC   = { tok2 , tok1 , || , ! , astIsPointer , if , }

3057 :	"if"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"!"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"astIsPointer"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"tok1"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"||"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"!"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"astIsPointer"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3057 :	"tok2"
		- NEIGH  = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { astOperand2 , tok , tok2 , * , Token , }
		- SUCC   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }

3058 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3059 :	"ValueFlow"
		- NEIGH  = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- SUCC   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }

3059 :	"Value"
		- NEIGH  = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- SUCC   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }

3059 :	"v1"
		- NEIGH  = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- SUCC   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }

3059 :	"getLifetimeObjValue"
		- NEIGH  = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- SUCC   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }

3059 :	"tok1"
		- NEIGH  = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { tok2 , tok1 , || , ! , astIsPointer , if , }
		- SUCC   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }

3060 :	"ValueFlow"
		- NEIGH  = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- SUCC   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }

3060 :	"Value"
		- NEIGH  = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- SUCC   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }

3060 :	"v2"
		- NEIGH  = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- SUCC   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }

3060 :	"getLifetimeObjValue"
		- NEIGH  = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- SUCC   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }

3060 :	"tok2"
		- NEIGH  = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { getLifetimeObjValue , v1 , tok1 , Value , ValueFlow , }
		- SUCC   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }

3061 :	"if"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"!"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"v1"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"isLocalLifetimeValue"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"||"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"!"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"v2"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3061 :	"isLocalLifetimeValue"
		- NEIGH  = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { getLifetimeObjValue , tok2 , v2 , Value , ValueFlow , }
		- SUCC   = { variable , tokvalue , Variable , var1 , * , v1 , }

3062 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3063 :	"Variable"
		- NEIGH  = { variable , tokvalue , Variable , var1 , * , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- SUCC   = { variable , tokvalue , v2 , * , var2 , Variable , }

3063 :	"*"
		- NEIGH  = { variable , tokvalue , Variable , var1 , * , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- SUCC   = { variable , tokvalue , v2 , * , var2 , Variable , }

3063 :	"var1"
		- NEIGH  = { variable , tokvalue , Variable , var1 , * , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- SUCC   = { variable , tokvalue , v2 , * , var2 , Variable , }

3063 :	"v1"
		- NEIGH  = { variable , tokvalue , Variable , var1 , * , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- SUCC   = { variable , tokvalue , v2 , * , var2 , Variable , }

3063 :	"tokvalue"
		- NEIGH  = { variable , tokvalue , Variable , var1 , * , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- SUCC   = { variable , tokvalue , v2 , * , var2 , Variable , }

3063 :	"variable"
		- NEIGH  = { variable , tokvalue , Variable , var1 , * , v1 , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { v2 , isLocalLifetimeValue , || , if , ! , v1 , }
		- SUCC   = { variable , tokvalue , v2 , * , var2 , Variable , }

3064 :	"Variable"
		- NEIGH  = { variable , tokvalue , v2 , * , var2 , Variable , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { variable , tokvalue , Variable , var1 , * , v1 , }
		- SUCC   = { var1 , || , ! , var2 , if , }

3064 :	"*"
		- NEIGH  = { variable , tokvalue , v2 , * , var2 , Variable , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { variable , tokvalue , Variable , var1 , * , v1 , }
		- SUCC   = { var1 , || , ! , var2 , if , }

3064 :	"var2"
		- NEIGH  = { variable , tokvalue , v2 , * , var2 , Variable , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { variable , tokvalue , Variable , var1 , * , v1 , }
		- SUCC   = { var1 , || , ! , var2 , if , }

3064 :	"v2"
		- NEIGH  = { variable , tokvalue , v2 , * , var2 , Variable , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { variable , tokvalue , Variable , var1 , * , v1 , }
		- SUCC   = { var1 , || , ! , var2 , if , }

3064 :	"tokvalue"
		- NEIGH  = { variable , tokvalue , v2 , * , var2 , Variable , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { variable , tokvalue , Variable , var1 , * , v1 , }
		- SUCC   = { var1 , || , ! , var2 , if , }

3064 :	"variable"
		- NEIGH  = { variable , tokvalue , v2 , * , var2 , Variable , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { variable , tokvalue , Variable , var1 , * , v1 , }
		- SUCC   = { var1 , || , ! , var2 , if , }

3065 :	"if"
		- NEIGH  = { var1 , || , ! , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , tokvalue , v2 , * , var2 , Variable , }
		- SUCC   = { v2 , == , tokvalue , varId , v1 , if , }

3065 :	"!"
		- NEIGH  = { var1 , || , ! , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , tokvalue , v2 , * , var2 , Variable , }
		- SUCC   = { v2 , == , tokvalue , varId , v1 , if , }

3065 :	"var1"
		- NEIGH  = { var1 , || , ! , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , tokvalue , v2 , * , var2 , Variable , }
		- SUCC   = { v2 , == , tokvalue , varId , v1 , if , }

3065 :	"||"
		- NEIGH  = { var1 , || , ! , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , tokvalue , v2 , * , var2 , Variable , }
		- SUCC   = { v2 , == , tokvalue , varId , v1 , if , }

3065 :	"!"
		- NEIGH  = { var1 , || , ! , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , tokvalue , v2 , * , var2 , Variable , }
		- SUCC   = { v2 , == , tokvalue , varId , v1 , if , }

3065 :	"var2"
		- NEIGH  = { var1 , || , ! , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { variable , tokvalue , v2 , * , var2 , Variable , }
		- SUCC   = { v2 , == , tokvalue , varId , v1 , if , }

3066 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { var1 , || , ! , var2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3067 :	"if"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"v1"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"tokvalue"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"varId"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"=="
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"v2"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"tokvalue"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3067 :	"varId"
		- NEIGH  = { v2 , == , tokvalue , varId , v1 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { var1 , || , ! , var2 , if , }
		- SUCC   = { || , isReference , var1 , var2 , if , }

3068 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { v2 , == , tokvalue , varId , v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3069 :	"if"
		- NEIGH  = { || , isReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { v2 , == , tokvalue , varId , v1 , if , }
		- SUCC   = { || , isRValueReference , var1 , var2 , if , }

3069 :	"var1"
		- NEIGH  = { || , isReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { v2 , == , tokvalue , varId , v1 , if , }
		- SUCC   = { || , isRValueReference , var1 , var2 , if , }

3069 :	"isReference"
		- NEIGH  = { || , isReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { v2 , == , tokvalue , varId , v1 , if , }
		- SUCC   = { || , isRValueReference , var1 , var2 , if , }

3069 :	"||"
		- NEIGH  = { || , isReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { v2 , == , tokvalue , varId , v1 , if , }
		- SUCC   = { || , isRValueReference , var1 , var2 , if , }

3069 :	"var2"
		- NEIGH  = { || , isReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { v2 , == , tokvalue , varId , v1 , if , }
		- SUCC   = { || , isRValueReference , var1 , var2 , if , }

3069 :	"isReference"
		- NEIGH  = { || , isReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { v2 , == , tokvalue , varId , v1 , if , }
		- SUCC   = { || , isRValueReference , var1 , var2 , if , }

3070 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { || , isReference , var1 , var2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3071 :	"if"
		- NEIGH  = { || , isRValueReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , isReference , var1 , var2 , if , }
		- SUCC   = { v2 , v1 , tok , & , comparePointersError , }

3071 :	"var1"
		- NEIGH  = { || , isRValueReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , isReference , var1 , var2 , if , }
		- SUCC   = { v2 , v1 , tok , & , comparePointersError , }

3071 :	"isRValueReference"
		- NEIGH  = { || , isRValueReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , isReference , var1 , var2 , if , }
		- SUCC   = { v2 , v1 , tok , & , comparePointersError , }

3071 :	"||"
		- NEIGH  = { || , isRValueReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , isReference , var1 , var2 , if , }
		- SUCC   = { v2 , v1 , tok , & , comparePointersError , }

3071 :	"var2"
		- NEIGH  = { || , isRValueReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , isReference , var1 , var2 , if , }
		- SUCC   = { v2 , v1 , tok , & , comparePointersError , }

3071 :	"isRValueReference"
		- NEIGH  = { || , isRValueReference , var1 , var2 , if , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { continue , }
		- PRED   = { || , isReference , var1 , var2 , if , }
		- SUCC   = { v2 , v1 , tok , & , comparePointersError , }

3072 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { || , isRValueReference , var1 , var2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3073 :	"comparePointersError"
		- NEIGH  = { v2 , v1 , tok , & , comparePointersError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , isRValueReference , var1 , var2 , if , }
		- SUCC   = { }

3073 :	"tok"
		- NEIGH  = { v2 , v1 , tok , & , comparePointersError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , isRValueReference , var1 , var2 , if , }
		- SUCC   = { }

3073 :	"&"
		- NEIGH  = { v2 , v1 , tok , & , comparePointersError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , isRValueReference , var1 , var2 , if , }
		- SUCC   = { }

3073 :	"v1"
		- NEIGH  = { v2 , v1 , tok , & , comparePointersError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , isRValueReference , var1 , var2 , if , }
		- SUCC   = { }

3073 :	"&"
		- NEIGH  = { v2 , v1 , tok , & , comparePointersError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , isRValueReference , var1 , var2 , if , }
		- SUCC   = { }

3073 :	"v2"
		- NEIGH  = { v2 , v1 , tok , & , comparePointersError , }
		- PARENT = { functionScope , bodyEnd , != , tok , bodyStart , * , next , Token , for , }
		- CHILD  = { }
		- PRED   = { || , isRValueReference , var1 , var2 , if , }
		- SUCC   = { }

3078 :	"CheckOther"
		- NEIGH  = { CheckOther , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"comparePointersError"
		- NEIGH  = { comparePointersError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"Token"
		- NEIGH  = { Token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"tok"
		- NEIGH  = { tok , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"v1"
		- NEIGH  = { v1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"ValueFlow"
		- NEIGH  = { ValueFlow , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"Value"
		- NEIGH  = { Value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3078 :	"v2"
		- NEIGH  = { v2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3080 :	"ErrorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { verb , string , std , }

3080 :	"errorPath"
		- NEIGH  = { errorPath , ErrorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { verb , string , std , }

3081 :	"std"
		- NEIGH  = { verb , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { tok , simpleMatch , Token , if , }

3081 :	"string"
		- NEIGH  = { verb , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { tok , simpleMatch , Token , if , }

3081 :	"verb"
		- NEIGH  = { verb , string , std , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { errorPath , ErrorPath , }
		- SUCC   = { tok , simpleMatch , Token , if , }

3082 :	"if"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { verb , }
		- PRED   = { verb , string , std , }
		- SUCC   = { v1 , if , }

3082 :	"Token"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { verb , }
		- PRED   = { verb , string , std , }
		- SUCC   = { v1 , if , }

3082 :	"simpleMatch"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { verb , }
		- PRED   = { verb , string , std , }
		- SUCC   = { v1 , if , }

3082 :	"tok"
		- NEIGH  = { tok , simpleMatch , Token , if , }
		- PARENT = { }
		- CHILD  = { verb , }
		- PRED   = { verb , string , std , }
		- SUCC   = { v1 , if , }

3083 :	"verb"
		- NEIGH  = { verb , }
		- PARENT = { tok , simpleMatch , Token , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

3084 :	"if"
		- NEIGH  = { v1 , if , }
		- PARENT = { }
		- CHILD  = { insert , nameToken , variable , v1 , errorPath , tokvalue , begin , end , emplace_back , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { v2 , if , }

3084 :	"v1"
		- NEIGH  = { v1 , if , }
		- PARENT = { }
		- CHILD  = { insert , nameToken , variable , v1 , errorPath , tokvalue , begin , end , emplace_back , }
		- PRED   = { tok , simpleMatch , Token , if , }
		- SUCC   = { v2 , if , }

3085 :	"errorPath"
		- NEIGH  = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , begin , v1 , insert , errorPath , }

3085 :	"emplace_back"
		- NEIGH  = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , begin , v1 , insert , errorPath , }

3085 :	"v1"
		- NEIGH  = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , begin , v1 , insert , errorPath , }

3085 :	"tokvalue"
		- NEIGH  = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , begin , v1 , insert , errorPath , }

3085 :	"variable"
		- NEIGH  = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , begin , v1 , insert , errorPath , }

3085 :	"nameToken"
		- NEIGH  = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { end , begin , v1 , insert , errorPath , }

3086 :	"errorPath"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"insert"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"errorPath"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"end"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"v1"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"errorPath"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"begin"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"v1"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"errorPath"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3086 :	"end"
		- NEIGH  = { end , begin , v1 , insert , errorPath , }
		- PARENT = { v1 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v1 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3088 :	"if"
		- NEIGH  = { v2 , if , }
		- PARENT = { }
		- CHILD  = { insert , nameToken , variable , v2 , errorPath , tokvalue , begin , end , emplace_back , }
		- PRED   = { v1 , if , }
		- SUCC   = { tok , emplace_back , errorPath , }

3088 :	"v2"
		- NEIGH  = { v2 , if , }
		- PARENT = { }
		- CHILD  = { insert , nameToken , variable , v2 , errorPath , tokvalue , begin , end , emplace_back , }
		- PRED   = { v1 , if , }
		- SUCC   = { tok , emplace_back , errorPath , }

3089 :	"errorPath"
		- NEIGH  = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { v2 , end , begin , insert , errorPath , }

3089 :	"emplace_back"
		- NEIGH  = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { v2 , end , begin , insert , errorPath , }

3089 :	"v2"
		- NEIGH  = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { v2 , end , begin , insert , errorPath , }

3089 :	"tokvalue"
		- NEIGH  = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { v2 , end , begin , insert , errorPath , }

3089 :	"variable"
		- NEIGH  = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { v2 , end , begin , insert , errorPath , }

3089 :	"nameToken"
		- NEIGH  = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { v2 , end , begin , insert , errorPath , }

3090 :	"errorPath"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"insert"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"errorPath"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"end"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"v2"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"errorPath"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"begin"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"v2"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"errorPath"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3090 :	"end"
		- NEIGH  = { v2 , end , begin , insert , errorPath , }
		- PARENT = { v2 , if , }
		- CHILD  = { }
		- PRED   = { nameToken , variable , v2 , errorPath , tokvalue , emplace_back , }
		- SUCC   = { }

3092 :	"errorPath"
		- NEIGH  = { tok , emplace_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v2 , if , }
		- SUCC   = { CWE570 , + , verb , error , errorPath , Severity , reportError , }

3092 :	"emplace_back"
		- NEIGH  = { tok , emplace_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v2 , if , }
		- SUCC   = { CWE570 , + , verb , error , errorPath , Severity , reportError , }

3092 :	"tok"
		- NEIGH  = { tok , emplace_back , errorPath , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v2 , if , }
		- SUCC   = { CWE570 , + , verb , error , errorPath , Severity , reportError , }

3093 :	"reportError"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

3094 :	"errorPath"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

3094 :	"Severity"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

3094 :	"error"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

3094 :	"verb"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

3094 :	"+"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

3094 :	"CWE570"
		- NEIGH  = { CWE570 , + , verb , error , errorPath , Severity , reportError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tok , emplace_back , errorPath , }
		- SUCC   = { }

