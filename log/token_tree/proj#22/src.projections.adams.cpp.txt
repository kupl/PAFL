35 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

35 :	"guyou"
		- NEIGH  = { guyou , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"peirce_q"
		- NEIGH  = { peirce_q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"adams_hemi"
		- NEIGH  = { adams_hemi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"adams_ws1"
		- NEIGH  = { adams_ws1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"adams_ws2"
		- NEIGH  = { adams_ws2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

43 :	"projection_type"
		- NEIGH  = { projection_type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

44 :	"GUYOU"
		- NEIGH  = { GUYOU , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

45 :	"PEIRCE_Q"
		- NEIGH  = { PEIRCE_Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"ADAMS_HEMI"
		- NEIGH  = { ADAMS_HEMI , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"ADAMS_WS1"
		- NEIGH  = { ADAMS_WS1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"ADAMS_WS2"
		- NEIGH  = { ADAMS_WS2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

51 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"projection_type"
		- NEIGH  = { projection_type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"ell_int_5"
		- NEIGH  = { ell_int_5 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"phi"
		- NEIGH  = { phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

67 :	"C0"
		- NEIGH  = { C0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , C , }

68 :	"C"
		- NEIGH  = { - , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C0 , }
		- SUCC   = { M_2_PI , phi , * , y , }

69 :	"-"
		- NEIGH  = { - , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C0 , }
		- SUCC   = { M_2_PI , phi , * , y , }

73 :	"-"
		- NEIGH  = { - , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C0 , }
		- SUCC   = { M_2_PI , phi , * , y , }

74 :	"-"
		- NEIGH  = { - , C , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C0 , }
		- SUCC   = { M_2_PI , phi , * , y , }

78 :	"y"
		- NEIGH  = { M_2_PI , phi , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , C , }
		- SUCC   = { - , * , y , }

78 :	"phi"
		- NEIGH  = { M_2_PI , phi , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , C , }
		- SUCC   = { - , * , y , }

78 :	"*"
		- NEIGH  = { M_2_PI , phi , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , C , }
		- SUCC   = { - , * , y , }

78 :	"M_2_PI"
		- NEIGH  = { M_2_PI , phi , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , C , }
		- SUCC   = { - , * , y , }

79 :	"y"
		- NEIGH  = { - , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_2_PI , phi , * , y , }
		- SUCC   = { y , * , y2 , }

79 :	"*"
		- NEIGH  = { - , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_2_PI , phi , * , y , }
		- SUCC   = { y , * , y2 , }

79 :	"y"
		- NEIGH  = { - , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_2_PI , phi , * , y , }
		- SUCC   = { y , * , y2 , }

79 :	"*"
		- NEIGH  = { - , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_2_PI , phi , * , y , }
		- SUCC   = { y , * , y2 , }

79 :	"y"
		- NEIGH  = { - , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_2_PI , phi , * , y , }
		- SUCC   = { y , * , y2 , }

79 :	"-"
		- NEIGH  = { - , * , y , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_2_PI , phi , * , y , }
		- SUCC   = { y , * , y2 , }

80 :	"y2"
		- NEIGH  = { y , * , y2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , * , y , }
		- SUCC   = { d1 , }

80 :	"*"
		- NEIGH  = { y , * , y2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , * , y , }
		- SUCC   = { d1 , }

80 :	"y"
		- NEIGH  = { y , * , y2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , * , y , }
		- SUCC   = { d1 , }

81 :	"d1"
		- NEIGH  = { d1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { y , * , y2 , }
		- SUCC   = { d2 , }

82 :	"d2"
		- NEIGH  = { d2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { d1 , }
		- SUCC   = { C , c , for , }

83 :	"for"
		- NEIGH  = { C , c , for , }
		- PARENT = { }
		- CHILD  = { c , + , - , * , y2 , d2 , d1 , temp , }
		- PRED   = { d2 , }
		- SUCC   = { C0 , + , y , * , phi , d2 , d1 , - , return , }

83 :	"c"
		- NEIGH  = { C , c , for , }
		- PARENT = { }
		- CHILD  = { c , + , - , * , y2 , d2 , d1 , temp , }
		- PRED   = { d2 , }
		- SUCC   = { C0 , + , y , * , phi , d2 , d1 , - , return , }

83 :	"C"
		- NEIGH  = { C , c , for , }
		- PARENT = { }
		- CHILD  = { c , + , - , * , y2 , d2 , d1 , temp , }
		- PRED   = { d2 , }
		- SUCC   = { C0 , + , y , * , phi , d2 , d1 , - , return , }

84 :	"temp"
		- NEIGH  = { d1 , temp , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { c , + , - , * , y2 , d2 , d1 , }

84 :	"d1"
		- NEIGH  = { d1 , temp , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { c , + , - , * , y2 , d2 , d1 , }

85 :	"d1"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"y2"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"*"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"d1"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"-"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"d2"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"+"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

85 :	"c"
		- NEIGH  = { c , + , - , * , y2 , d2 , d1 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { d1 , temp , }
		- SUCC   = { temp , d2 , }

86 :	"d2"
		- NEIGH  = { temp , d2 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { c , + , - , * , y2 , d2 , d1 , }
		- SUCC   = { }

86 :	"temp"
		- NEIGH  = { temp , d2 , }
		- PARENT = { C , c , for , }
		- CHILD  = { }
		- PRED   = { c , + , - , * , y2 , d2 , d1 , }
		- SUCC   = { }

89 :	"return"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"phi"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"*"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"y"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"*"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"d1"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"-"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"d2"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"+"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"*"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

89 :	"C0"
		- NEIGH  = { C0 , + , y , * , phi , d2 , d1 , - , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { C , c , for , }
		- SUCC   = { }

93 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"adams_forward"
		- NEIGH  = { adams_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

94 :	"a"
		- NEIGH  = { b , a , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sn , sm , }

94 :	"b"
		- NEIGH  = { b , a , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sn , sm , }

95 :	"sm"
		- NEIGH  = { sn , sm , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b , a , }
		- SUCC   = { xy , PJ_XY , }

95 :	"sn"
		- NEIGH  = { sn , sm , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b , a , }
		- SUCC   = { xy , PJ_XY , }

96 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sn , sm , }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

96 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sn , sm , }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

97 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

97 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { mode , Q , switch , }

99 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { spp , ADAMS_WS2 , aasin , tan , sp , ADAMS_HEMI , b , + , ctx , aacos , sn , * , a , ADAMS_WS1 , P , < , cp , cos , sm , cl , break , > , PEIRCE_Q , - , M_PI_2 , fabs , if , lam , lp , sin , sl , phi , GUYOU , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }

99 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { spp , ADAMS_WS2 , aasin , tan , sp , ADAMS_HEMI , b , + , ctx , aacos , sn , * , a , ADAMS_WS1 , P , < , cp , cos , sm , cl , break , > , PEIRCE_Q , - , M_PI_2 , fabs , if , lam , lp , sin , sl , phi , GUYOU , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }

99 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { spp , ADAMS_WS2 , aasin , tan , sp , ADAMS_HEMI , b , + , ctx , aacos , sn , * , a , ADAMS_WS1 , P , < , cp , cos , sm , cl , break , > , PEIRCE_Q , - , M_PI_2 , fabs , if , lam , lp , sin , sl , phi , GUYOU , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }

100 :	"GUYOU"
		- NEIGH  = { GUYOU , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { > , M_PI_2 , fabs , lam , - , lp , if , }

101 :	"if"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

101 :	"fabs"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

101 :	"lp"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

101 :	"lam"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

101 :	"-"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

101 :	">"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

101 :	"M_PI_2"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { GUYOU , }
		- SUCC   = { < , - , phi , lp , M_PI_2 , fabs , if , }

102 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

102 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

102 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

103 :	"return"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

103 :	"proj_coord_error"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

103 :	"xy"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

106 :	"if"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"fabs"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"fabs"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"lp"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"phi"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"-"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"M_PI_2"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

106 :	"<"
		- NEIGH  = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { + , b , sm , aacos , * , ctx , a , cos , P , cp , sp , lp , lam , sin , y , return , - , sn , xy , < , phi , sl , x , }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { break , }

107 :	"xy"
		- NEIGH  = { x , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , < , phi , lp , y , xy , }

107 :	"x"
		- NEIGH  = { x , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , < , phi , lp , y , xy , }

108 :	"xy"
		- NEIGH  = { - , < , phi , lp , y , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { x , xy , }
		- SUCC   = { xy , return , }

108 :	"y"
		- NEIGH  = { - , < , phi , lp , y , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { x , xy , }
		- SUCC   = { xy , return , }

108 :	"lp"
		- NEIGH  = { - , < , phi , lp , y , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { x , xy , }
		- SUCC   = { xy , return , }

108 :	"phi"
		- NEIGH  = { - , < , phi , lp , y , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { x , xy , }
		- SUCC   = { xy , return , }

108 :	"<"
		- NEIGH  = { - , < , phi , lp , y , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { x , xy , }
		- SUCC   = { xy , return , }

108 :	"-"
		- NEIGH  = { - , < , phi , lp , y , xy , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { x , xy , }
		- SUCC   = { xy , return , }

109 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { - , < , phi , lp , y , xy , }
		- SUCC   = { }

109 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { - , < , phi , lp , y , xy , }
		- SUCC   = { }

111 :	"sl"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , sp , }

111 :	"sin"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , sp , }

111 :	"lp"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , sp , }

111 :	"lam"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sin , sp , }

112 :	"sp"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

112 :	"sin"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

112 :	"lp"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

112 :	"phi"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

113 :	"cp"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { sp , * , sl , cp , ctx , P , - , aacos , a , }

113 :	"cos"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { sp , * , sl , cp , ctx , P , - , aacos , a , }

113 :	"lp"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { sp , * , sl , cp , ctx , P , - , aacos , a , }

113 :	"phi"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { sp , * , sl , cp , ctx , P , - , aacos , a , }

114 :	"a"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"aacos"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"P"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"ctx"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"cp"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"*"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"sl"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"-"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"sp"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

114 :	"*"
		- NEIGH  = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { + , * , sl , cp , ctx , P , aacos , sp , b , }

115 :	"b"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"aacos"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"P"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"ctx"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"cp"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"*"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"sl"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"+"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"sp"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

115 :	"*"
		- NEIGH  = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { sp , * , sl , cp , ctx , P , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

116 :	"sm"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

116 :	"lp"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

116 :	"lam"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

116 :	"<"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

117 :	"sn"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { }

117 :	"lp"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { }

117 :	"phi"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { }

117 :	"<"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { }

119 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , - , phi , lp , M_PI_2 , fabs , if , }
		- SUCC   = { PEIRCE_Q , }

120 :	"PEIRCE_Q"
		- NEIGH  = { PEIRCE_Q , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { < , - , phi , lp , if , }

121 :	"if"
		- NEIGH  = { < , - , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { PEIRCE_Q , }
		- SUCC   = { lam , lp , sin , sl , }

121 :	"lp"
		- NEIGH  = { < , - , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { PEIRCE_Q , }
		- SUCC   = { lam , lp , sin , sl , }

121 :	"phi"
		- NEIGH  = { < , - , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { PEIRCE_Q , }
		- SUCC   = { lam , lp , sin , sl , }

121 :	"<"
		- NEIGH  = { < , - , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { PEIRCE_Q , }
		- SUCC   = { lam , lp , sin , sl , }

121 :	"-"
		- NEIGH  = { < , - , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { PEIRCE_Q , }
		- SUCC   = { lam , lp , sin , sl , }

122 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

122 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

122 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

123 :	"return"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

123 :	"proj_coord_error"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

123 :	"xy"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { < , - , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

125 :	"sl"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , - , phi , lp , if , }
		- SUCC   = { lam , lp , cos , cl , }

125 :	"sin"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , - , phi , lp , if , }
		- SUCC   = { lam , lp , cos , cl , }

125 :	"lp"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , - , phi , lp , if , }
		- SUCC   = { lam , lp , cos , cl , }

125 :	"lam"
		- NEIGH  = { lam , lp , sin , sl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , - , phi , lp , if , }
		- SUCC   = { lam , lp , cos , cl , }

126 :	"cl"
		- NEIGH  = { lam , lp , cos , cl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

126 :	"cos"
		- NEIGH  = { lam , lp , cos , cl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

126 :	"lp"
		- NEIGH  = { lam , lp , cos , cl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

126 :	"lam"
		- NEIGH  = { lam , lp , cos , cl , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , sin , sl , }
		- SUCC   = { phi , lp , cos , cp , }

127 :	"cp"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , cl , }
		- SUCC   = { + , * , sl , cp , ctx , cl , P , aacos , a , }

127 :	"cos"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , cl , }
		- SUCC   = { + , * , sl , cp , ctx , cl , P , aacos , a , }

127 :	"lp"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , cl , }
		- SUCC   = { + , * , sl , cp , ctx , cl , P , aacos , a , }

127 :	"phi"
		- NEIGH  = { phi , lp , cos , cp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , lp , cos , cl , }
		- SUCC   = { + , * , sl , cp , ctx , cl , P , aacos , a , }

128 :	"a"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"aacos"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"P"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"ctx"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"cp"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"*"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"sl"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"+"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"cl"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

128 :	"*"
		- NEIGH  = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cp , }
		- SUCC   = { * , sl , cp , ctx , cl , P , - , aacos , b , }

129 :	"b"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"aacos"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"P"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"ctx"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"cp"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"*"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"sl"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"-"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"cl"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

129 :	"*"
		- NEIGH  = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sl , cp , ctx , cl , P , aacos , a , }
		- SUCC   = { < , sl , sm , }

130 :	"sm"
		- NEIGH  = { < , sl , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- SUCC   = { cl , > , sn , }

130 :	"sl"
		- NEIGH  = { < , sl , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- SUCC   = { cl , > , sn , }

130 :	"<"
		- NEIGH  = { < , sl , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sl , cp , ctx , cl , P , - , aacos , b , }
		- SUCC   = { cl , > , sn , }

131 :	"sn"
		- NEIGH  = { cl , > , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , sl , sm , }
		- SUCC   = { break , }

131 :	"cl"
		- NEIGH  = { cl , > , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , sl , sm , }
		- SUCC   = { break , }

131 :	">"
		- NEIGH  = { cl , > , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , sl , sm , }
		- SUCC   = { break , }

133 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { cl , > , sn , }
		- SUCC   = { ADAMS_HEMI , }

134 :	"ADAMS_HEMI"
		- NEIGH  = { ADAMS_HEMI , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { phi , lp , sin , sp , }

135 :	"sp"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_HEMI , }
		- SUCC   = { > , M_PI_2 , fabs , lam , - , lp , if , }

135 :	"sin"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_HEMI , }
		- SUCC   = { > , M_PI_2 , fabs , lam , - , lp , if , }

135 :	"lp"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_HEMI , }
		- SUCC   = { > , M_PI_2 , fabs , lam , - , lp , if , }

135 :	"phi"
		- NEIGH  = { phi , lp , sin , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_HEMI , }
		- SUCC   = { > , M_PI_2 , fabs , lam , - , lp , if , }

136 :	"if"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

136 :	"fabs"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

136 :	"lp"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

136 :	"lam"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

136 :	"-"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

136 :	">"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

136 :	"M_PI_2"
		- NEIGH  = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , proj_coord_error , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { phi , lp , sin , sp , }
		- SUCC   = { lam , sin , * , cos , phi , lp , a , }

137 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

137 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

137 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , proj_coord_error , return , }

138 :	"return"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

138 :	"proj_coord_error"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

138 :	"xy"
		- NEIGH  = { xy , proj_coord_error , return , }
		- PARENT = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

140 :	"a"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"cos"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"lp"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"phi"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"*"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"sin"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"lp"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

140 :	"lam"
		- NEIGH  = { lam , sin , * , cos , phi , lp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { > , M_PI_2 , fabs , lam , - , lp , if , }
		- SUCC   = { + , < , a , sp , sm , }

141 :	"sm"
		- NEIGH  = { + , < , a , sp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , sin , * , cos , phi , lp , a , }
		- SUCC   = { - , < , a , sp , sn , }

141 :	"sp"
		- NEIGH  = { + , < , a , sp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , sin , * , cos , phi , lp , a , }
		- SUCC   = { - , < , a , sp , sn , }

141 :	"+"
		- NEIGH  = { + , < , a , sp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , sin , * , cos , phi , lp , a , }
		- SUCC   = { - , < , a , sp , sn , }

141 :	"a"
		- NEIGH  = { + , < , a , sp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , sin , * , cos , phi , lp , a , }
		- SUCC   = { - , < , a , sp , sn , }

141 :	"<"
		- NEIGH  = { + , < , a , sp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lam , sin , * , cos , phi , lp , a , }
		- SUCC   = { - , < , a , sp , sn , }

142 :	"sn"
		- NEIGH  = { - , < , a , sp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , < , a , sp , sm , }
		- SUCC   = { ctx , P , aacos , a , }

142 :	"sp"
		- NEIGH  = { - , < , a , sp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , < , a , sp , sm , }
		- SUCC   = { ctx , P , aacos , a , }

142 :	"-"
		- NEIGH  = { - , < , a , sp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , < , a , sp , sm , }
		- SUCC   = { ctx , P , aacos , a , }

142 :	"a"
		- NEIGH  = { - , < , a , sp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , < , a , sp , sm , }
		- SUCC   = { ctx , P , aacos , a , }

142 :	"<"
		- NEIGH  = { - , < , a , sp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , < , a , sp , sm , }
		- SUCC   = { ctx , P , aacos , a , }

143 :	"a"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , a , sp , sn , }
		- SUCC   = { phi , lp , - , M_PI_2 , b , }

143 :	"aacos"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , a , sp , sn , }
		- SUCC   = { phi , lp , - , M_PI_2 , b , }

143 :	"P"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , a , sp , sn , }
		- SUCC   = { phi , lp , - , M_PI_2 , b , }

143 :	"ctx"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , a , sp , sn , }
		- SUCC   = { phi , lp , - , M_PI_2 , b , }

143 :	"a"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , < , a , sp , sn , }
		- SUCC   = { phi , lp , - , M_PI_2 , b , }

144 :	"b"
		- NEIGH  = { phi , lp , - , M_PI_2 , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ctx , P , aacos , a , }
		- SUCC   = { break , }

144 :	"M_PI_2"
		- NEIGH  = { phi , lp , - , M_PI_2 , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ctx , P , aacos , a , }
		- SUCC   = { break , }

144 :	"-"
		- NEIGH  = { phi , lp , - , M_PI_2 , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ctx , P , aacos , a , }
		- SUCC   = { break , }

144 :	"lp"
		- NEIGH  = { phi , lp , - , M_PI_2 , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ctx , P , aacos , a , }
		- SUCC   = { break , }

144 :	"phi"
		- NEIGH  = { phi , lp , - , M_PI_2 , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ctx , P , aacos , a , }
		- SUCC   = { break , }

146 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , M_PI_2 , b , }
		- SUCC   = { ADAMS_WS1 , }

147 :	"ADAMS_WS1"
		- NEIGH  = { ADAMS_WS1 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { phi , lp , * , tan , sp , }

148 :	"sp"
		- NEIGH  = { phi , lp , * , tan , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS1 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }

148 :	"tan"
		- NEIGH  = { phi , lp , * , tan , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS1 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }

148 :	"*"
		- NEIGH  = { phi , lp , * , tan , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS1 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }

148 :	"lp"
		- NEIGH  = { phi , lp , * , tan , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS1 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }

148 :	"phi"
		- NEIGH  = { phi , lp , * , tan , sp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS1 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }

149 :	"b"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"cos"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"aasin"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"P"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"ctx"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"sp"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"*"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"sin"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"*"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"lp"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

149 :	"lam"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , * , tan , sp , }
		- SUCC   = { * , ctx , P , sp , b , - , aacos , a , }

150 :	"a"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"aacos"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"P"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"ctx"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"b"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"-"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"sp"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

150 :	"*"
		- NEIGH  = { * , ctx , P , sp , b , - , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , sp , b , }
		- SUCC   = { * , ctx , + , P , aacos , sp , b , }

151 :	"b"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"aacos"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"P"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"ctx"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"b"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"+"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"sp"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

151 :	"*"
		- NEIGH  = { * , ctx , + , P , aacos , sp , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , P , sp , b , - , aacos , a , }
		- SUCC   = { < , lam , lp , sm , }

152 :	"sm"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , + , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

152 :	"lp"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , + , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

152 :	"lam"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , + , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

152 :	"<"
		- NEIGH  = { < , lam , lp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , ctx , + , P , aacos , sp , b , }
		- SUCC   = { < , phi , lp , sn , }

153 :	"sn"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { break , }

153 :	"lp"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { break , }

153 :	"phi"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { break , }

153 :	"<"
		- NEIGH  = { < , phi , lp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , lam , lp , sm , }
		- SUCC   = { break , }

155 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , phi , lp , sn , }
		- SUCC   = { ADAMS_WS2 , }

156 :	"ADAMS_WS2"
		- NEIGH  = { ADAMS_WS2 , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { phi , lp , tan , * , spp , }

157 :	"spp"
		- NEIGH  = { phi , lp , tan , * , spp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }

157 :	"tan"
		- NEIGH  = { phi , lp , tan , * , spp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }

157 :	"*"
		- NEIGH  = { phi , lp , tan , * , spp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }

157 :	"lp"
		- NEIGH  = { phi , lp , tan , * , spp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }

157 :	"phi"
		- NEIGH  = { phi , lp , tan , * , spp , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , }
		- SUCC   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }

158 :	"a"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"cos"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"aasin"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"P"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"ctx"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"spp"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"*"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"sin"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"*"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"lp"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

158 :	"lam"
		- NEIGH  = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , * , spp , }
		- SUCC   = { < , a , + , spp , sm , }

159 :	"sm"
		- NEIGH  = { < , a , + , spp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- SUCC   = { < , a , - , spp , sn , }

159 :	"spp"
		- NEIGH  = { < , a , + , spp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- SUCC   = { < , a , - , spp , sn , }

159 :	"+"
		- NEIGH  = { < , a , + , spp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- SUCC   = { < , a , - , spp , sn , }

159 :	"a"
		- NEIGH  = { < , a , + , spp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- SUCC   = { < , a , - , spp , sn , }

159 :	"<"
		- NEIGH  = { < , a , + , spp , sm , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { lp , * , ctx , lam , P , sin , aasin , cos , spp , a , }
		- SUCC   = { < , a , - , spp , sn , }

160 :	"sn"
		- NEIGH  = { < , a , - , spp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , + , spp , sm , }
		- SUCC   = { spp , ctx , P , aacos , b , }

160 :	"spp"
		- NEIGH  = { < , a , - , spp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , + , spp , sm , }
		- SUCC   = { spp , ctx , P , aacos , b , }

160 :	"-"
		- NEIGH  = { < , a , - , spp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , + , spp , sm , }
		- SUCC   = { spp , ctx , P , aacos , b , }

160 :	"a"
		- NEIGH  = { < , a , - , spp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , + , spp , sm , }
		- SUCC   = { spp , ctx , P , aacos , b , }

160 :	"<"
		- NEIGH  = { < , a , - , spp , sn , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , + , spp , sm , }
		- SUCC   = { spp , ctx , P , aacos , b , }

161 :	"b"
		- NEIGH  = { spp , ctx , P , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , - , spp , sn , }
		- SUCC   = { ctx , P , aacos , a , }

161 :	"aacos"
		- NEIGH  = { spp , ctx , P , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , - , spp , sn , }
		- SUCC   = { ctx , P , aacos , a , }

161 :	"P"
		- NEIGH  = { spp , ctx , P , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , - , spp , sn , }
		- SUCC   = { ctx , P , aacos , a , }

161 :	"ctx"
		- NEIGH  = { spp , ctx , P , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , - , spp , sn , }
		- SUCC   = { ctx , P , aacos , a , }

161 :	"spp"
		- NEIGH  = { spp , ctx , P , aacos , b , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { < , a , - , spp , sn , }
		- SUCC   = { ctx , P , aacos , a , }

162 :	"a"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { spp , ctx , P , aacos , b , }
		- SUCC   = { break , }

162 :	"aacos"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { spp , ctx , P , aacos , b , }
		- SUCC   = { break , }

162 :	"P"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { spp , ctx , P , aacos , b , }
		- SUCC   = { break , }

162 :	"ctx"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { spp , ctx , P , aacos , b , }
		- SUCC   = { break , }

162 :	"a"
		- NEIGH  = { ctx , P , aacos , a , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { spp , ctx , P , aacos , b , }
		- SUCC   = { break , }

164 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { ctx , P , aacos , a , }
		- SUCC   = { }

167 :	"m"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"aasin"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"P"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"ctx"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"sqrt"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"+"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"std"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"min"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"cos"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"a"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"+"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

167 :	"b"
		- NEIGH  = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { sm , if , }

168 :	"if"
		- NEIGH  = { sm , if , }
		- PARENT = { }
		- CHILD  = { - , m , }
		- PRED   = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- SUCC   = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }

168 :	"sm"
		- NEIGH  = { sm , if , }
		- PARENT = { }
		- CHILD  = { - , m , }
		- PRED   = { b , cos , a , std , + , sqrt , ctx , P , aasin , min , m , }
		- SUCC   = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }

168 :	"m"
		- NEIGH  = { - , m , }
		- PARENT = { sm , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"-"
		- NEIGH  = { - , m , }
		- PARENT = { sm , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"m"
		- NEIGH  = { - , m , }
		- PARENT = { sm , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

170 :	"n"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"aasin"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"P"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"ctx"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"sqrt"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"fabs"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"-"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"std"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"max"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"cos"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"a"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"-"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

170 :	"b"
		- NEIGH  = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sm , if , }
		- SUCC   = { sn , if , }

171 :	"if"
		- NEIGH  = { sn , if , }
		- PARENT = { }
		- CHILD  = { - , n , }
		- PRED   = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- SUCC   = { ell_int_5 , m , x , xy , }

171 :	"sn"
		- NEIGH  = { sn , if , }
		- PARENT = { }
		- CHILD  = { - , n , }
		- PRED   = { aasin , cos , ctx , sqrt , a , max , std , - , fabs , P , b , n , }
		- SUCC   = { ell_int_5 , m , x , xy , }

171 :	"n"
		- NEIGH  = { - , n , }
		- PARENT = { sn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

171 :	"-"
		- NEIGH  = { - , n , }
		- PARENT = { sn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

171 :	"n"
		- NEIGH  = { - , n , }
		- PARENT = { sn , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

173 :	"xy"
		- NEIGH  = { ell_int_5 , m , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sn , if , }
		- SUCC   = { n , ell_int_5 , y , xy , }

173 :	"x"
		- NEIGH  = { ell_int_5 , m , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sn , if , }
		- SUCC   = { n , ell_int_5 , y , xy , }

173 :	"ell_int_5"
		- NEIGH  = { ell_int_5 , m , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sn , if , }
		- SUCC   = { n , ell_int_5 , y , xy , }

173 :	"m"
		- NEIGH  = { ell_int_5 , m , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sn , if , }
		- SUCC   = { n , ell_int_5 , y , xy , }

174 :	"xy"
		- NEIGH  = { n , ell_int_5 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ell_int_5 , m , x , xy , }
		- SUCC   = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }

174 :	"y"
		- NEIGH  = { n , ell_int_5 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ell_int_5 , m , x , xy , }
		- SUCC   = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }

174 :	"ell_int_5"
		- NEIGH  = { n , ell_int_5 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ell_int_5 , m , x , xy , }
		- SUCC   = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }

174 :	"n"
		- NEIGH  = { n , ell_int_5 , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ell_int_5 , m , x , xy , }
		- SUCC   = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }

176 :	"if"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"Q"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"mode"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"=="
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"ADAMS_HEMI"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"||"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"Q"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"mode"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"=="
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

176 :	"ADAMS_WS2"
		- NEIGH  = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- PARENT = { }
		- CHILD  = { + , - , y , * , x , xy , temp , }
		- PRED   = { n , ell_int_5 , y , xy , }
		- SUCC   = { xy , return , }

177 :	"temp"
		- NEIGH  = { x , xy , temp , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , y , * , x , xy , }

177 :	"xy"
		- NEIGH  = { x , xy , temp , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , y , * , x , xy , }

177 :	"x"
		- NEIGH  = { x , xy , temp , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , y , * , x , xy , }

178 :	"xy"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"x"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"*"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"xy"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"x"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"-"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"xy"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

178 :	"y"
		- NEIGH  = { - , y , * , x , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { x , xy , temp , }
		- SUCC   = { + , temp , * , y , xy , }

179 :	"xy"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

179 :	"y"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

179 :	"*"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

179 :	"temp"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

179 :	"+"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

179 :	"xy"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

179 :	"y"
		- NEIGH  = { + , temp , * , y , xy , }
		- PARENT = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- CHILD  = { }
		- PRED   = { - , y , * , x , xy , }
		- SUCC   = { }

182 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- SUCC   = { }

182 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { || , == , mode , ADAMS_HEMI , Q , ADAMS_WS2 , if , }
		- SUCC   = { }

185 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"adams_inverse"
		- NEIGH  = { adams_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

185 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

187 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }

187 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }

198 :	"lp"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"phi"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"std"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"max"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"std"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"min"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"xy"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"y"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"/"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"-"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"*"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

198 :	"M_HALFPI"
		- NEIGH  = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }

199 :	"lp"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

199 :	"lam"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

199 :	"fabs"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

199 :	"lp"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

199 :	"phi"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

199 :	">="
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

199 :	"M_HALFPI"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"std"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"max"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"std"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"min"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"xy"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"x"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"/"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"/"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"cos"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"lp"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"phi"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"-"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"*"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

200 :	"M_PI"
		- NEIGH  = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { * , y , - , max , std , M_HALFPI , xy , min , / , phi , lp , }
		- SUCC   = { lp , xy , P , pj_generic_inverse_2d , return , }

202 :	"return"
		- NEIGH  = { lp , xy , P , pj_generic_inverse_2d , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- SUCC   = { }

202 :	"pj_generic_inverse_2d"
		- NEIGH  = { lp , xy , P , pj_generic_inverse_2d , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- SUCC   = { }

202 :	"xy"
		- NEIGH  = { lp , xy , P , pj_generic_inverse_2d , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- SUCC   = { }

202 :	"P"
		- NEIGH  = { lp , xy , P , pj_generic_inverse_2d , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- SUCC   = { }

202 :	"lp"
		- NEIGH  = { lp , xy , P , pj_generic_inverse_2d , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { M_PI , * , - , cos , / , x , xy , fabs , min , M_HALFPI , max , std , >= , lp , lam , phi , }
		- SUCC   = { }

206 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"setup"
		- NEIGH  = { setup , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"projection_type"
		- NEIGH  = { projection_type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

207 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

208 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

208 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

210 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

210 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

210 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

211 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

212 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { es , P , }

212 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { es , P , }

212 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { es , P , }

214 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { adams_forward , fwd , P , }

214 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { adams_forward , fwd , P , }

215 :	"P"
		- NEIGH  = { adams_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { mode , Q , }

215 :	"fwd"
		- NEIGH  = { adams_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { mode , Q , }

215 :	"adams_forward"
		- NEIGH  = { adams_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { mode , Q , }

217 :	"Q"
		- NEIGH  = { mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { adams_forward , fwd , P , }
		- SUCC   = { ADAMS_WS2 , == , mode , if , }

217 :	"mode"
		- NEIGH  = { mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { adams_forward , fwd , P , }
		- SUCC   = { ADAMS_WS2 , == , mode , if , }

217 :	"mode"
		- NEIGH  = { mode , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { adams_forward , fwd , P , }
		- SUCC   = { ADAMS_WS2 , == , mode , if , }

218 :	"if"
		- NEIGH  = { ADAMS_WS2 , == , mode , if , }
		- PARENT = { }
		- CHILD  = { adams_inverse , inv , P , }
		- PRED   = { mode , Q , }
		- SUCC   = { P , return , }

218 :	"mode"
		- NEIGH  = { ADAMS_WS2 , == , mode , if , }
		- PARENT = { }
		- CHILD  = { adams_inverse , inv , P , }
		- PRED   = { mode , Q , }
		- SUCC   = { P , return , }

218 :	"=="
		- NEIGH  = { ADAMS_WS2 , == , mode , if , }
		- PARENT = { }
		- CHILD  = { adams_inverse , inv , P , }
		- PRED   = { mode , Q , }
		- SUCC   = { P , return , }

218 :	"ADAMS_WS2"
		- NEIGH  = { ADAMS_WS2 , == , mode , if , }
		- PARENT = { }
		- CHILD  = { adams_inverse , inv , P , }
		- PRED   = { mode , Q , }
		- SUCC   = { P , return , }

219 :	"P"
		- NEIGH  = { adams_inverse , inv , P , }
		- PARENT = { ADAMS_WS2 , == , mode , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

219 :	"inv"
		- NEIGH  = { adams_inverse , inv , P , }
		- PARENT = { ADAMS_WS2 , == , mode , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

219 :	"adams_inverse"
		- NEIGH  = { adams_inverse , inv , P , }
		- PARENT = { ADAMS_WS2 , == , mode , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

221 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , == , mode , if , }
		- SUCC   = { }

221 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ADAMS_WS2 , == , mode , if , }
		- SUCC   = { }

225 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"guyou"
		- NEIGH  = { guyou , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"return"
		- NEIGH  = { GUYOU , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"setup"
		- NEIGH  = { GUYOU , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"P"
		- NEIGH  = { GUYOU , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"GUYOU"
		- NEIGH  = { GUYOU , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"peirce_q"
		- NEIGH  = { peirce_q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"return"
		- NEIGH  = { PEIRCE_Q , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"setup"
		- NEIGH  = { PEIRCE_Q , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"P"
		- NEIGH  = { PEIRCE_Q , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"PEIRCE_Q"
		- NEIGH  = { PEIRCE_Q , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"adams_hemi"
		- NEIGH  = { adams_hemi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"return"
		- NEIGH  = { setup , ADAMS_HEMI , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"setup"
		- NEIGH  = { setup , ADAMS_HEMI , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"P"
		- NEIGH  = { setup , ADAMS_HEMI , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"ADAMS_HEMI"
		- NEIGH  = { setup , ADAMS_HEMI , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

237 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

237 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

237 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

237 :	"adams_ws1"
		- NEIGH  = { adams_ws1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"return"
		- NEIGH  = { ADAMS_WS1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"setup"
		- NEIGH  = { ADAMS_WS1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"P"
		- NEIGH  = { ADAMS_WS1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"ADAMS_WS1"
		- NEIGH  = { ADAMS_WS1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

241 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

241 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

241 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

241 :	"adams_ws2"
		- NEIGH  = { adams_ws2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"return"
		- NEIGH  = { ADAMS_WS2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"setup"
		- NEIGH  = { ADAMS_WS2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"P"
		- NEIGH  = { ADAMS_WS2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"ADAMS_WS2"
		- NEIGH  = { ADAMS_WS2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

