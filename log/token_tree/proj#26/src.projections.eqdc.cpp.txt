11 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"phi1"
		- NEIGH  = { phi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"phi2"
		- NEIGH  = { phi2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"n"
		- NEIGH  = { n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

15 :	"rho"
		- NEIGH  = { rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

16 :	"rho0"
		- NEIGH  = { rho0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

17 :	"c"
		- NEIGH  = { c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

18 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

18 :	"en"
		- NEIGH  = { en , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

19 :	"ellips"
		- NEIGH  = { ellips , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"eqdc"
		- NEIGH  = { eqdc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"eqdc_e_forward"
		- NEIGH  = { eqdc_e_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

29 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

30 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

30 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }

32 :	"Q"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"rho"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"Q"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"c"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"-"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"Q"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"ellips"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"pj_mlfn"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"lp"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"phi"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"sin"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"lp"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

32 :	"phi"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"cos"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"lp"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"phi"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"Q"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"en"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"lp"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

33 :	"phi"
		- NEIGH  = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam_mul_n , Q , * , lam , n , lp , }

34 :	"lam_mul_n"
		- NEIGH  = { lam_mul_n , Q , * , lam , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- SUCC   = { sin , rho , lam_mul_n , Q , * , x , xy , }

34 :	"lp"
		- NEIGH  = { lam_mul_n , Q , * , lam , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- SUCC   = { sin , rho , lam_mul_n , Q , * , x , xy , }

34 :	"lam"
		- NEIGH  = { lam_mul_n , Q , * , lam , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- SUCC   = { sin , rho , lam_mul_n , Q , * , x , xy , }

34 :	"*"
		- NEIGH  = { lam_mul_n , Q , * , lam , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- SUCC   = { sin , rho , lam_mul_n , Q , * , x , xy , }

34 :	"Q"
		- NEIGH  = { lam_mul_n , Q , * , lam , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- SUCC   = { sin , rho , lam_mul_n , Q , * , x , xy , }

34 :	"n"
		- NEIGH  = { lam_mul_n , Q , * , lam , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , cos , phi , pj_mlfn , lp , ellips , - , sin , c , rho , Q , }
		- SUCC   = { sin , rho , lam_mul_n , Q , * , x , xy , }

35 :	"xy"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

35 :	"x"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

35 :	"Q"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

35 :	"rho"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

35 :	"*"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

35 :	"sin"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

35 :	"lam_mul_n"
		- NEIGH  = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam_mul_n , Q , * , lam , n , lp , }
		- SUCC   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }

36 :	"xy"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"y"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"Q"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"rho0"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"-"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"Q"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"rho"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"*"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"cos"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

36 :	"lam_mul_n"
		- NEIGH  = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sin , rho , lam_mul_n , Q , * , x , xy , }
		- SUCC   = { xy , return , }

38 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- SUCC   = { }

38 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , - , cos , rho0 , lam_mul_n , Q , * , y , xy , }
		- SUCC   = { }

42 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"eqdc_e_inverse"
		- NEIGH  = { eqdc_e_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

43 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

43 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

44 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

44 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }

46 :	"if"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"Q"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"rho"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"hypot"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"xy"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"x"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"xy"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"y"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"Q"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"rho0"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"-"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"xy"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"y"
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

46 :	"!="
		- NEIGH  = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- PARENT = { }
		- CHILD  = { > , / , x , atan2 , lp , lam , M_HALFPI , rho , y , - , c , phi , ellips , n , xy , < , Q , if , }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lp , return , }

47 :	"if"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { y , x , xy , - , rho , Q , }
		- PRED   = { }
		- SUCC   = { rho , c , Q , - , phi , lp , }

47 :	"Q"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { y , x , xy , - , rho , Q , }
		- PRED   = { }
		- SUCC   = { rho , c , Q , - , phi , lp , }

47 :	"n"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { y , x , xy , - , rho , Q , }
		- PRED   = { }
		- SUCC   = { rho , c , Q , - , phi , lp , }

47 :	"<"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { y , x , xy , - , rho , Q , }
		- PRED   = { }
		- SUCC   = { rho , c , Q , - , phi , lp , }

48 :	"Q"
		- NEIGH  = { - , rho , Q , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

48 :	"rho"
		- NEIGH  = { - , rho , Q , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

48 :	"-"
		- NEIGH  = { - , rho , Q , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

48 :	"Q"
		- NEIGH  = { - , rho , Q , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

48 :	"rho"
		- NEIGH  = { - , rho , Q , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

49 :	"xy"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , Q , }
		- SUCC   = { - , y , xy , }

49 :	"x"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , Q , }
		- SUCC   = { - , y , xy , }

49 :	"-"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , Q , }
		- SUCC   = { - , y , xy , }

49 :	"xy"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , Q , }
		- SUCC   = { - , y , xy , }

49 :	"x"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , Q , }
		- SUCC   = { - , y , xy , }

50 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

50 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

50 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

50 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

50 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

52 :	"lp"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

52 :	"phi"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

52 :	"Q"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

52 :	"c"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

52 :	"-"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

52 :	"Q"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

52 :	"rho"
		- NEIGH  = { rho , c , Q , - , phi , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { ellips , Q , if , }

53 :	"if"
		- NEIGH  = { ellips , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PRED   = { rho , c , Q , - , phi , lp , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

53 :	"Q"
		- NEIGH  = { ellips , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PRED   = { rho , c , Q , - , phi , lp , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

53 :	"ellips"
		- NEIGH  = { ellips , Q , if , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PRED   = { rho , c , Q , - , phi , lp , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

54 :	"lp"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"phi"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"pj_inv_mlfn"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"P"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"ctx"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"lp"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"phi"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"P"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"es"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"Q"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

54 :	"en"
		- NEIGH  = { en , es , P , pj_inv_mlfn , Q , ctx , phi , lp , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

55 :	"lp"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"lam"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"atan2"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"xy"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"x"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"xy"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"y"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"/"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"Q"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

55 :	"n"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { }

57 :	"lp"
		- NEIGH  = { lam , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , M_HALFPI , lp , n , phi , > , Q , }

57 :	"lam"
		- NEIGH  = { lam , lp , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , M_HALFPI , lp , n , phi , > , Q , }

58 :	"lp"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	"phi"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	"Q"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	"n"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	">"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	"M_HALFPI"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	"-"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

58 :	"M_HALFPI"
		- NEIGH  = { - , M_HALFPI , lp , n , phi , > , Q , }
		- PARENT = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- CHILD  = { }
		- PRED   = { lam , lp , }
		- SUCC   = { }

60 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- SUCC   = { }

60 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , != , rho0 , x , xy , y , hypot , rho , Q , if , }
		- SUCC   = { }

64 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"destructor"
		- NEIGH  = { destructor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

64 :	"errlev"
		- NEIGH  = { errlev , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

65 :	"if"
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

65 :	"=="
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

65 :	"P"
		- NEIGH  = { P , == , if , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { P , opaque , == , if , }

66 :	"return"
		- NEIGH  = { return , }
		- PARENT = { P , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

68 :	"if"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }

68 :	"=="
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }

68 :	"P"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }

68 :	"opaque"
		- NEIGH  = { P , opaque , == , if , }
		- PARENT = { }
		- CHILD  = { errlev , P , pj_default_destructor , return , }
		- PRED   = { P , == , if , }
		- SUCC   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }

69 :	"return"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"pj_default_destructor"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"P"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

69 :	"errlev"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { P , opaque , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"free"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"static_cast"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"<"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"pj_opaque"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"*"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	">"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"P"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"opaque"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

71 :	"en"
		- NEIGH  = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , opaque , == , if , }
		- SUCC   = { errlev , P , pj_default_destructor , return , }

72 :	"return"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- SUCC   = { }

72 :	"pj_default_destructor"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- SUCC   = { }

72 :	"P"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- SUCC   = { }

72 :	"errlev"
		- NEIGH  = { errlev , P , pj_default_destructor , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { en , opaque , P , > , * , free , pj_opaque , static_cast , < , }
		- SUCC   = { }

76 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"eqdc"
		- NEIGH  = { eqdc , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

77 :	"cosphi"
		- NEIGH  = { sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { secant , }

77 :	"sinphi"
		- NEIGH  = { sinphi , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { secant , }

78 :	"secant"
		- NEIGH  = { secant , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , cosphi , }
		- SUCC   = { > , calloc , < , Q , static_cast , * , pj_opaque , }

80 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"*"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"Q"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"static_cast"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"<"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"*"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	">"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"calloc"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

80 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { secant , }
		- SUCC   = { Q , == , if , }

81 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

81 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

81 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

82 :	"return"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

82 :	"pj_default_destructor"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

82 :	"P"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

82 :	"PROJ_ERR_OTHER"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

83 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

83 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { destructor , P , }

84 :	"P"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { params , Q , ctx , pj_param , f , phi1 , P , }

84 :	"destructor"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { params , Q , ctx , pj_param , f , phi1 , P , }

84 :	"destructor"
		- NEIGH  = { destructor , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { params , Q , ctx , pj_param , f , phi1 , P , }

86 :	"Q"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"phi1"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"pj_param"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"P"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"ctx"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"P"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"params"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

86 :	"f"
		- NEIGH  = { params , Q , ctx , pj_param , f , phi1 , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { destructor , P , }
		- SUCC   = { f , params , Q , phi2 , ctx , pj_param , P , }

87 :	"Q"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"phi2"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"pj_param"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"P"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"ctx"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"P"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"params"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

87 :	"f"
		- NEIGH  = { f , params , Q , phi2 , ctx , pj_param , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , Q , ctx , pj_param , f , phi1 , P , }
		- SUCC   = { M_HALFPI , > , Q , fabs , phi1 , if , }

89 :	"if"
		- NEIGH  = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { f , params , Q , phi2 , ctx , pj_param , P , }
		- SUCC   = { M_HALFPI , > , phi2 , Q , fabs , if , }

89 :	"fabs"
		- NEIGH  = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { f , params , Q , phi2 , ctx , pj_param , P , }
		- SUCC   = { M_HALFPI , > , phi2 , Q , fabs , if , }

89 :	"Q"
		- NEIGH  = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { f , params , Q , phi2 , ctx , pj_param , P , }
		- SUCC   = { M_HALFPI , > , phi2 , Q , fabs , if , }

89 :	"phi1"
		- NEIGH  = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { f , params , Q , phi2 , ctx , pj_param , P , }
		- SUCC   = { M_HALFPI , > , phi2 , Q , fabs , if , }

89 :	">"
		- NEIGH  = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { f , params , Q , phi2 , ctx , pj_param , P , }
		- SUCC   = { M_HALFPI , > , phi2 , Q , fabs , if , }

89 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { f , params , Q , phi2 , ctx , pj_param , P , }
		- SUCC   = { M_HALFPI , > , phi2 , Q , fabs , if , }

91 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

91 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

91 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

92 :	"return"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

92 :	"destructor"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

92 :	"P"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

92 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

95 :	"if"
		- NEIGH  = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- SUCC   = { < , if , + , phi2 , Q , fabs , phi1 , }

95 :	"fabs"
		- NEIGH  = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- SUCC   = { < , if , + , phi2 , Q , fabs , phi1 , }

95 :	"Q"
		- NEIGH  = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- SUCC   = { < , if , + , phi2 , Q , fabs , phi1 , }

95 :	"phi2"
		- NEIGH  = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- SUCC   = { < , if , + , phi2 , Q , fabs , phi1 , }

95 :	">"
		- NEIGH  = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- SUCC   = { < , if , + , phi2 , Q , fabs , phi1 , }

95 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , Q , fabs , phi1 , if , }
		- SUCC   = { < , if , + , phi2 , Q , fabs , phi1 , }

97 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

97 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

97 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

98 :	"return"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

98 :	"destructor"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

98 :	"P"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

98 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

100 :	"if"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"fabs"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"Q"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"phi1"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"+"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"Q"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"phi2"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

100 :	"<"
		- NEIGH  = { < , if , + , phi2 , Q , fabs , phi1 , }
		- PARENT = { }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { M_HALFPI , > , phi2 , Q , fabs , if , }
		- SUCC   = { es , P , pj_enfn , en , Q , ! , if , }

102 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

102 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

102 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

103 :	"return"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

103 :	"destructor"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

103 :	"P"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

103 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { < , if , + , phi2 , Q , fabs , phi1 , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

106 :	"if"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

106 :	"!"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

106 :	"Q"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

106 :	"en"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

106 :	"pj_enfn"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

106 :	"P"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

106 :	"es"
		- NEIGH  = { es , P , pj_enfn , en , Q , ! , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PRED   = { < , if , + , phi2 , Q , fabs , phi1 , }
		- SUCC   = { Q , phi1 , sin , sinphi , }

107 :	"return"
		- NEIGH  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"destructor"
		- NEIGH  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"P"
		- NEIGH  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"PROJ_ERR_OTHER"
		- NEIGH  = { PROJ_ERR_OTHER , destructor , P , return , }
		- PARENT = { es , P , pj_enfn , en , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

109 :	"sinphi"
		- NEIGH  = { Q , phi1 , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { sinphi , n , Q , }

109 :	"sin"
		- NEIGH  = { Q , phi1 , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { sinphi , n , Q , }

109 :	"Q"
		- NEIGH  = { Q , phi1 , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { sinphi , n , Q , }

109 :	"phi1"
		- NEIGH  = { Q , phi1 , sin , sinphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , pj_enfn , en , Q , ! , if , }
		- SUCC   = { sinphi , n , Q , }

110 :	"Q"
		- NEIGH  = { sinphi , n , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , sin , sinphi , }
		- SUCC   = { Q , phi1 , cos , cosphi , }

110 :	"n"
		- NEIGH  = { sinphi , n , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , sin , sinphi , }
		- SUCC   = { Q , phi1 , cos , cosphi , }

110 :	"sinphi"
		- NEIGH  = { sinphi , n , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , sin , sinphi , }
		- SUCC   = { Q , phi1 , cos , cosphi , }

111 :	"cosphi"
		- NEIGH  = { Q , phi1 , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , n , Q , }
		- SUCC   = { >= , - , phi1 , phi2 , secant , Q , fabs , }

111 :	"cos"
		- NEIGH  = { Q , phi1 , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , n , Q , }
		- SUCC   = { >= , - , phi1 , phi2 , secant , Q , fabs , }

111 :	"Q"
		- NEIGH  = { Q , phi1 , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , n , Q , }
		- SUCC   = { >= , - , phi1 , phi2 , secant , Q , fabs , }

111 :	"phi1"
		- NEIGH  = { Q , phi1 , cos , cosphi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sinphi , n , Q , }
		- SUCC   = { >= , - , phi1 , phi2 , secant , Q , fabs , }

112 :	"secant"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	"fabs"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	"Q"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	"phi1"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	"-"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	"Q"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	"phi2"
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

112 :	">="
		- NEIGH  = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , phi1 , cos , cosphi , }
		- SUCC   = { ellips , > , es , P , Q , }

113 :	"Q"
		- NEIGH  = { ellips , > , es , P , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- SUCC   = { ellips , Q , if , }

113 :	"ellips"
		- NEIGH  = { ellips , > , es , P , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- SUCC   = { ellips , Q , if , }

113 :	"P"
		- NEIGH  = { ellips , > , es , P , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- SUCC   = { ellips , Q , if , }

113 :	"es"
		- NEIGH  = { ellips , > , es , P , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- SUCC   = { ellips , Q , if , }

113 :	">"
		- NEIGH  = { ellips , > , es , P , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { >= , - , phi1 , phi2 , secant , Q , fabs , }
		- SUCC   = { ellips , Q , if , }

114 :	"if"
		- NEIGH  = { ellips , Q , if , }
		- PARENT = { }
		- CHILD  = { == , phi0 , - , n , + , cos , secant , sin , if , pj_msfn , phi1 , rho0 , Q , es , P , sinphi , pj_mlfn , cosphi , c , m1 , / , en , ml1 , }
		- PRED   = { ellips , > , es , P , Q , }
		- SUCC   = { eqdc_e_inverse , inv , P , }

114 :	"Q"
		- NEIGH  = { ellips , Q , if , }
		- PARENT = { }
		- CHILD  = { == , phi0 , - , n , + , cos , secant , sin , if , pj_msfn , phi1 , rho0 , Q , es , P , sinphi , pj_mlfn , cosphi , c , m1 , / , en , ml1 , }
		- PRED   = { ellips , > , es , P , Q , }
		- SUCC   = { eqdc_e_inverse , inv , P , }

114 :	"ellips"
		- NEIGH  = { ellips , Q , if , }
		- PARENT = { }
		- CHILD  = { == , phi0 , - , n , + , cos , secant , sin , if , pj_msfn , phi1 , rho0 , Q , es , P , sinphi , pj_mlfn , cosphi , c , m1 , / , en , ml1 , }
		- PRED   = { ellips , > , es , P , Q , }
		- SUCC   = { eqdc_e_inverse , inv , P , }

115 :	"ml1"
		- NEIGH  = { m1 , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { es , P , cosphi , m1 , sinphi , pj_msfn , }

115 :	"m1"
		- NEIGH  = { m1 , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { es , P , cosphi , m1 , sinphi , pj_msfn , }

117 :	"m1"
		- NEIGH  = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { m1 , ml1 , }
		- SUCC   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }

117 :	"pj_msfn"
		- NEIGH  = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { m1 , ml1 , }
		- SUCC   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }

117 :	"sinphi"
		- NEIGH  = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { m1 , ml1 , }
		- SUCC   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }

117 :	"cosphi"
		- NEIGH  = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { m1 , ml1 , }
		- SUCC   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }

117 :	"P"
		- NEIGH  = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { m1 , ml1 , }
		- SUCC   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }

117 :	"es"
		- NEIGH  = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { m1 , ml1 , }
		- SUCC   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }

118 :	"ml1"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"pj_mlfn"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"Q"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"phi1"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"sinphi"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"cosphi"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"Q"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

118 :	"en"
		- NEIGH  = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { es , P , cosphi , m1 , sinphi , pj_msfn , }
		- SUCC   = { secant , if , }

119 :	"if"
		- NEIGH  = { secant , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { == , ml1 , en , / , es , P , pj_msfn , - , cos , phi2 , Q , if , sin , cosphi , m1 , n , pj_mlfn , sinphi , }
		- PRED   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- SUCC   = { / , n , m1 , ml1 , c , + , Q , }

119 :	"secant"
		- NEIGH  = { secant , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { == , ml1 , en , / , es , P , pj_msfn , - , cos , phi2 , Q , if , sin , cosphi , m1 , n , pj_mlfn , sinphi , }
		- PRED   = { en , sinphi , Q , phi1 , cosphi , pj_mlfn , ml1 , }
		- SUCC   = { / , n , m1 , ml1 , c , + , Q , }

120 :	"sinphi"
		- NEIGH  = { phi2 , Q , sin , sinphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi2 , Q , cos , cosphi , }

120 :	"sin"
		- NEIGH  = { phi2 , Q , sin , sinphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi2 , Q , cos , cosphi , }

120 :	"Q"
		- NEIGH  = { phi2 , Q , sin , sinphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi2 , Q , cos , cosphi , }

120 :	"phi2"
		- NEIGH  = { phi2 , Q , sin , sinphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi2 , Q , cos , cosphi , }

121 :	"cosphi"
		- NEIGH  = { phi2 , Q , cos , cosphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , sin , sinphi , }
		- SUCC   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }

121 :	"cos"
		- NEIGH  = { phi2 , Q , cos , cosphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , sin , sinphi , }
		- SUCC   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }

121 :	"Q"
		- NEIGH  = { phi2 , Q , cos , cosphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , sin , sinphi , }
		- SUCC   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }

121 :	"phi2"
		- NEIGH  = { phi2 , Q , cos , cosphi , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , sin , sinphi , }
		- SUCC   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }

122 :	"Q"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"n"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"m1"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"-"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"pj_msfn"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"sinphi"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"cosphi"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"P"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"es"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

122 :	"/"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"pj_mlfn"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"Q"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"phi2"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"sinphi"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"cosphi"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"Q"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"en"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"-"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

123 :	"ml1"
		- NEIGH  = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { phi2 , Q , cos , cosphi , }
		- SUCC   = { == , n , Q , if , }

124 :	"if"
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { secant , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- SUCC   = { }

124 :	"Q"
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { secant , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- SUCC   = { }

124 :	"n"
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { secant , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- SUCC   = { }

124 :	"=="
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { secant , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { ml1 , phi2 , en , / , es , P , sinphi , pj_mlfn , cosphi , - , pj_msfn , m1 , n , Q , }
		- SUCC   = { }

126 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

126 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

126 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

127 :	"return"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

127 :	"destructor"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

127 :	"P"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

127 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

130 :	"Q"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"c"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"ml1"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"+"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"m1"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"/"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"Q"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

130 :	"n"
		- NEIGH  = { / , n , m1 , ml1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { secant , if , }
		- SUCC   = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }

131 :	"Q"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"rho0"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"Q"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"c"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"-"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"pj_mlfn"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"P"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"phi0"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"sin"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"P"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

131 :	"phi0"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

132 :	"cos"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

132 :	"P"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

132 :	"phi0"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

132 :	"Q"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

132 :	"en"
		- NEIGH  = { en , phi0 , P , pj_mlfn , sin , c , - , cos , rho0 , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { / , n , m1 , ml1 , c , + , Q , }
		- SUCC   = { }

134 :	"if"
		- NEIGH  = { secant , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PRED   = { }
		- SUCC   = { == , n , Q , if , }

134 :	"secant"
		- NEIGH  = { secant , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PRED   = { }
		- SUCC   = { == , n , Q , if , }

135 :	"Q"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"n"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"cosphi"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"-"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"cos"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"Q"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"phi2"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"/"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"Q"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"phi2"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"-"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"Q"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"phi1"
		- NEIGH  = { phi1 , / , cos , - , cosphi , n , phi2 , Q , }
		- PARENT = { secant , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"if"
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { secant , if , }
		- SUCC   = { n , / , cos , phi1 , c , + , Q , }

136 :	"Q"
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { secant , if , }
		- SUCC   = { n , / , cos , phi1 , c , + , Q , }

136 :	"n"
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { secant , if , }
		- SUCC   = { n , / , cos , phi1 , c , + , Q , }

136 :	"=="
		- NEIGH  = { == , n , Q , if , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { destructor , P , _ , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { secant , if , }
		- SUCC   = { n , / , cos , phi1 , c , + , Q , }

138 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

138 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

138 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }

139 :	"return"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

139 :	"destructor"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

139 :	"P"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

139 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , return , }
		- PARENT = { == , n , Q , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

141 :	"Q"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"c"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"Q"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"phi1"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"+"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"cos"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"Q"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"phi1"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"/"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"Q"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

141 :	"n"
		- NEIGH  = { n , / , cos , phi1 , c , + , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { == , n , Q , if , }
		- SUCC   = { phi0 , c , - , rho0 , P , Q , }

142 :	"Q"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

142 :	"rho0"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

142 :	"Q"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

142 :	"c"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

142 :	"-"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

142 :	"P"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

142 :	"phi0"
		- NEIGH  = { phi0 , c , - , rho0 , P , Q , }
		- PARENT = { ellips , Q , if , }
		- CHILD  = { }
		- PRED   = { n , / , cos , phi1 , c , + , Q , }
		- SUCC   = { }

145 :	"P"
		- NEIGH  = { eqdc_e_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { fwd , eqdc_e_forward , P , }

145 :	"inv"
		- NEIGH  = { eqdc_e_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { fwd , eqdc_e_forward , P , }

145 :	"eqdc_e_inverse"
		- NEIGH  = { eqdc_e_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ellips , Q , if , }
		- SUCC   = { fwd , eqdc_e_forward , P , }

146 :	"P"
		- NEIGH  = { fwd , eqdc_e_forward , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eqdc_e_inverse , inv , P , }
		- SUCC   = { P , return , }

146 :	"fwd"
		- NEIGH  = { fwd , eqdc_e_forward , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eqdc_e_inverse , inv , P , }
		- SUCC   = { P , return , }

146 :	"eqdc_e_forward"
		- NEIGH  = { fwd , eqdc_e_forward , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { eqdc_e_inverse , inv , P , }
		- SUCC   = { P , return , }

148 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { fwd , eqdc_e_forward , P , }
		- SUCC   = { }

148 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { fwd , eqdc_e_forward , P , }
		- SUCC   = { }

