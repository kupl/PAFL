10 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

11 :	"phi1"
		- NEIGH  = { phi1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"fxa"
		- NEIGH  = { fxa , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"fxb"
		- NEIGH  = { fxb , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

18 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

18 :	"rpoly"
		- NEIGH  = { rpoly , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"rpoly_s_forward"
		- NEIGH  = { rpoly_s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

24 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

24 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

25 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

25 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { fa , }

26 :	"fa"
		- NEIGH  = { fa , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { mode , Q , if , }

28 :	"if"
		- NEIGH  = { mode , Q , if , }
		- PARENT = { }
		- CHILD  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PRED   = { fa , }
		- SUCC   = { phi , lp , < , fabs , if , }

28 :	"Q"
		- NEIGH  = { mode , Q , if , }
		- PARENT = { }
		- CHILD  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PRED   = { fa , }
		- SUCC   = { phi , lp , < , fabs , if , }

28 :	"mode"
		- NEIGH  = { mode , Q , if , }
		- PARENT = { }
		- CHILD  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PRED   = { fa , }
		- SUCC   = { phi , lp , < , fabs , if , }

29 :	"fa"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"tan"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"lp"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"lam"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"*"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"Q"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"fxb"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"*"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"Q"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"fxa"
		- NEIGH  = { Q , lp , fxa , fa , tan , fxb , * , lam , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

31 :	"fa"
		- NEIGH  = { lp , lam , * , fa , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

31 :	"*"
		- NEIGH  = { lp , lam , * , fa , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

31 :	"lp"
		- NEIGH  = { lp , lam , * , fa , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

31 :	"lam"
		- NEIGH  = { lp , lam , * , fa , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

32 :	"if"
		- NEIGH  = { phi , lp , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , sin , * , phi , lp , / , tan , P , atan , phi0 , + , y , - , fa , x , xy , }
		- PRED   = { mode , Q , if , }
		- SUCC   = { xy , return , }

32 :	"fabs"
		- NEIGH  = { phi , lp , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , sin , * , phi , lp , / , tan , P , atan , phi0 , + , y , - , fa , x , xy , }
		- PRED   = { mode , Q , if , }
		- SUCC   = { xy , return , }

32 :	"lp"
		- NEIGH  = { phi , lp , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , sin , * , phi , lp , / , tan , P , atan , phi0 , + , y , - , fa , x , xy , }
		- PRED   = { mode , Q , if , }
		- SUCC   = { xy , return , }

32 :	"phi"
		- NEIGH  = { phi , lp , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , sin , * , phi , lp , / , tan , P , atan , phi0 , + , y , - , fa , x , xy , }
		- PRED   = { mode , Q , if , }
		- SUCC   = { xy , return , }

32 :	"<"
		- NEIGH  = { phi , lp , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , sin , * , phi , lp , / , tan , P , atan , phi0 , + , y , - , fa , x , xy , }
		- PRED   = { mode , Q , if , }
		- SUCC   = { xy , return , }

33 :	"xy"
		- NEIGH  = { + , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , - , phi0 , y , xy , }

33 :	"x"
		- NEIGH  = { + , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , - , phi0 , y , xy , }

33 :	"fa"
		- NEIGH  = { + , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , - , phi0 , y , xy , }

33 :	"+"
		- NEIGH  = { + , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , - , phi0 , y , xy , }

33 :	"fa"
		- NEIGH  = { + , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , - , phi0 , y , xy , }

34 :	"xy"
		- NEIGH  = { P , - , phi0 , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , fa , x , xy , }
		- SUCC   = { }

34 :	"y"
		- NEIGH  = { P , - , phi0 , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , fa , x , xy , }
		- SUCC   = { }

34 :	"-"
		- NEIGH  = { P , - , phi0 , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , fa , x , xy , }
		- SUCC   = { }

34 :	"P"
		- NEIGH  = { P , - , phi0 , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , fa , x , xy , }
		- SUCC   = { }

34 :	"phi0"
		- NEIGH  = { P , - , phi0 , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { + , fa , x , xy , }
		- SUCC   = { }

36 :	"xy"
		- NEIGH  = { lp , tan , phi , / , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , atan , lp , sin , * , fa , }

36 :	"y"
		- NEIGH  = { lp , tan , phi , / , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , atan , lp , sin , * , fa , }

36 :	"/"
		- NEIGH  = { lp , tan , phi , / , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , atan , lp , sin , * , fa , }

36 :	"tan"
		- NEIGH  = { lp , tan , phi , / , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , atan , lp , sin , * , fa , }

36 :	"lp"
		- NEIGH  = { lp , tan , phi , / , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , atan , lp , sin , * , fa , }

36 :	"phi"
		- NEIGH  = { lp , tan , phi , / , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , atan , lp , sin , * , fa , }

37 :	"fa"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"*"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"atan"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"fa"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"*"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"sin"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"lp"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

37 :	"phi"
		- NEIGH  = { phi , atan , lp , sin , * , fa , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { lp , tan , phi , / , y , xy , }
		- SUCC   = { sin , y , * , fa , x , xy , }

38 :	"xy"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

38 :	"x"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

38 :	"sin"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

38 :	"fa"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

38 :	"*"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

38 :	"xy"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

38 :	"y"
		- NEIGH  = { sin , y , * , fa , x , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { phi , atan , lp , sin , * , fa , }
		- SUCC   = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }

39 :	"xy"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"y"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"lp"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"phi"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"-"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"P"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"phi0"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"+"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"-"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"cos"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"fa"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"*"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"xy"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

39 :	"y"
		- NEIGH  = { + , phi0 , P , fa , - , cos , phi , lp , * , y , xy , }
		- PARENT = { phi , lp , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , y , * , fa , x , xy , }
		- SUCC   = { }

41 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , < , fabs , if , }
		- SUCC   = { }

41 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi , lp , < , fabs , if , }
		- SUCC   = { }

46 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

46 :	"rpoly"
		- NEIGH  = { rpoly , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"*"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"Q"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"static_cast"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"<"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"*"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	">"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"calloc"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

47 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Q , == , if , }

48 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

48 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

48 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

49 :	"return"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"pj_default_destructor"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"P"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"PROJ_ERR_OTHER"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }

50 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }

50 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }

52 :	"Q"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"phi1"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"fabs"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"pj_param"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"P"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"ctx"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"P"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"params"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

52 :	"f"
		- NEIGH  = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { phi1 , mode , > , Q , }

53 :	"Q"
		- NEIGH  = { phi1 , mode , > , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- SUCC   = { mode , Q , if , }

53 :	"mode"
		- NEIGH  = { phi1 , mode , > , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- SUCC   = { mode , Q , if , }

53 :	"Q"
		- NEIGH  = { phi1 , mode , > , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- SUCC   = { mode , Q , if , }

53 :	"phi1"
		- NEIGH  = { phi1 , mode , > , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- SUCC   = { mode , Q , if , }

53 :	">"
		- NEIGH  = { phi1 , mode , > , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { params , pj_param , P , fabs , f , phi1 , ctx , Q , }
		- SUCC   = { mode , Q , if , }

54 :	"if"
		- NEIGH  = { mode , Q , if , }
		- PARENT = { }
		- CHILD  = { / , fxa , phi1 , sin , * , fxb , Q , }
		- PRED   = { phi1 , mode , > , Q , }
		- SUCC   = { es , P , }

54 :	"Q"
		- NEIGH  = { mode , Q , if , }
		- PARENT = { }
		- CHILD  = { / , fxa , phi1 , sin , * , fxb , Q , }
		- PRED   = { phi1 , mode , > , Q , }
		- SUCC   = { es , P , }

54 :	"mode"
		- NEIGH  = { mode , Q , if , }
		- PARENT = { }
		- CHILD  = { / , fxa , phi1 , sin , * , fxb , Q , }
		- PRED   = { phi1 , mode , > , Q , }
		- SUCC   = { es , P , }

55 :	"Q"
		- NEIGH  = { phi1 , sin , * , fxb , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fxb , fxa , / , Q , }

55 :	"fxb"
		- NEIGH  = { phi1 , sin , * , fxb , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fxb , fxa , / , Q , }

55 :	"*"
		- NEIGH  = { phi1 , sin , * , fxb , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fxb , fxa , / , Q , }

55 :	"sin"
		- NEIGH  = { phi1 , sin , * , fxb , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fxb , fxa , / , Q , }

55 :	"Q"
		- NEIGH  = { phi1 , sin , * , fxb , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fxb , fxa , / , Q , }

55 :	"phi1"
		- NEIGH  = { phi1 , sin , * , fxb , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { fxb , fxa , / , Q , }

56 :	"Q"
		- NEIGH  = { fxb , fxa , / , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { phi1 , sin , * , fxb , Q , }
		- SUCC   = { }

56 :	"fxa"
		- NEIGH  = { fxb , fxa , / , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { phi1 , sin , * , fxb , Q , }
		- SUCC   = { }

56 :	"/"
		- NEIGH  = { fxb , fxa , / , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { phi1 , sin , * , fxb , Q , }
		- SUCC   = { }

56 :	"Q"
		- NEIGH  = { fxb , fxa , / , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { phi1 , sin , * , fxb , Q , }
		- SUCC   = { }

56 :	"fxb"
		- NEIGH  = { fxb , fxa , / , Q , }
		- PARENT = { mode , Q , if , }
		- CHILD  = { }
		- PRED   = { phi1 , sin , * , fxb , Q , }
		- SUCC   = { }

58 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , if , }
		- SUCC   = { rpoly_s_forward , fwd , P , }

58 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , if , }
		- SUCC   = { rpoly_s_forward , fwd , P , }

59 :	"P"
		- NEIGH  = { rpoly_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { P , return , }

59 :	"fwd"
		- NEIGH  = { rpoly_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { P , return , }

59 :	"rpoly_s_forward"
		- NEIGH  = { rpoly_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { P , return , }

61 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rpoly_s_forward , fwd , P , }
		- SUCC   = { }

61 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rpoly_s_forward , fwd , P , }
		- SUCC   = { }

