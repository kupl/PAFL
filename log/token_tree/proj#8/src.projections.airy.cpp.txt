34 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

34 :	"airy"
		- NEIGH  = { airy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"p_halfpi"
		- NEIGH  = { p_halfpi , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

49 :	"sinph0"
		- NEIGH  = { sinph0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

50 :	"cosph0"
		- NEIGH  = { cosph0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

51 :	"Cb"
		- NEIGH  = { Cb , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"Mode"
		- NEIGH  = { Mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

52 :	"mode"
		- NEIGH  = { mode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

53 :	"no_cut"
		- NEIGH  = { no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"s_forward"
		- NEIGH  = { s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

62 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

62 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

63 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

63 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }

64 :	"sinlam"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"coslam"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"cosphi"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"sinphi"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"t"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"s"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"Krho"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

64 :	"cosz"
		- NEIGH  = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { lam , sin , lp , sinlam , }

66 :	"sinlam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- SUCC   = { lam , lp , cos , coslam , }

66 :	"sin"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- SUCC   = { lam , lp , cos , coslam , }

66 :	"lp"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- SUCC   = { lam , lp , cos , coslam , }

66 :	"lam"
		- NEIGH  = { lam , sin , lp , sinlam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cosz , s , t , sinphi , cosphi , coslam , Krho , sinlam , }
		- SUCC   = { lam , lp , cos , coslam , }

67 :	"coslam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { mode , Q , switch , }

67 :	"cos"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { mode , Q , switch , }

67 :	"lp"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { mode , Q , switch , }

67 :	"lam"
		- NEIGH  = { lam , lp , cos , coslam , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lam , sin , lp , sinlam , }
		- SUCC   = { mode , Q , switch , }

68 :	"switch"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { N_POLE , S_POLE , break , sinlam , x , Krho , s , fabs , xy , Q , - , M_HALFPI , > , && , phi , mode , no_cut , ! , OBLIQ , coslam , *= , EQUIT , * , cosz , cos , == , sinphi , p_halfpi , lp , if , sin , < , cosphi , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { xy , return , }

68 :	"Q"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { N_POLE , S_POLE , break , sinlam , x , Krho , s , fabs , xy , Q , - , M_HALFPI , > , && , phi , mode , no_cut , ! , OBLIQ , coslam , *= , EQUIT , * , cosz , cos , == , sinphi , p_halfpi , lp , if , sin , < , cosphi , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { xy , return , }

68 :	"mode"
		- NEIGH  = { mode , Q , switch , }
		- PARENT = { }
		- CHILD  = { N_POLE , S_POLE , break , sinlam , x , Krho , s , fabs , xy , Q , - , M_HALFPI , > , && , phi , mode , no_cut , ! , OBLIQ , coslam , *= , EQUIT , * , cosz , cos , == , sinphi , p_halfpi , lp , if , sin , < , cosphi , }
		- PRED   = { lam , lp , cos , coslam , }
		- SUCC   = { xy , return , }

69 :	"EQUIT"
		- NEIGH  = { EQUIT , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { OBLIQ , }

70 :	"OBLIQ"
		- NEIGH  = { OBLIQ , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { EQUIT , }
		- SUCC   = { phi , lp , sin , sinphi , }

71 :	"sinphi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi , lp , cos , cosphi , }

71 :	"sin"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi , lp , cos , cosphi , }

71 :	"lp"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi , lp , cos , cosphi , }

71 :	"phi"
		- NEIGH  = { phi , lp , sin , sinphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { OBLIQ , }
		- SUCC   = { phi , lp , cos , cosphi , }

72 :	"cosphi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { coslam , * , cosphi , cosz , }

72 :	"cos"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { coslam , * , cosphi , cosz , }

72 :	"lp"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { coslam , * , cosphi , cosz , }

72 :	"phi"
		- NEIGH  = { phi , lp , cos , cosphi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sin , sinphi , }
		- SUCC   = { coslam , * , cosphi , cosz , }

73 :	"cosz"
		- NEIGH  = { coslam , * , cosphi , cosz , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

73 :	"cosphi"
		- NEIGH  = { coslam , * , cosphi , cosz , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

73 :	"*"
		- NEIGH  = { coslam , * , cosphi , cosz , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

73 :	"coslam"
		- NEIGH  = { coslam , * , cosphi , cosz , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , cos , cosphi , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

74 :	"if"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PRED   = { coslam , * , cosphi , cosz , }
		- SUCC   = { < , - , cosz , && , no_cut , Q , ! , if , }

74 :	"Q"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PRED   = { coslam , * , cosphi , cosz , }
		- SUCC   = { < , - , cosz , && , no_cut , Q , ! , if , }

74 :	"mode"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PRED   = { coslam , * , cosphi , cosz , }
		- SUCC   = { < , - , cosz , && , no_cut , Q , ! , if , }

74 :	"=="
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PRED   = { coslam , * , cosphi , cosz , }
		- SUCC   = { < , - , cosz , && , no_cut , Q , ! , if , }

74 :	"OBLIQ"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PRED   = { coslam , * , cosphi , cosz , }
		- SUCC   = { < , - , cosz , && , no_cut , Q , ! , if , }

75 :	"cosz"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"Q"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"sinph0"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"*"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"sinphi"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"+"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"Q"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"cosph0"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"*"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"cosz"
		- NEIGH  = { cosph0 , + , * , sinph0 , Q , sinphi , cosz , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

76 :	"if"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"!"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"Q"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"no_cut"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"&&"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"cosz"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"<"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

76 :	"-"
		- NEIGH  = { < , - , cosz , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { - , cosz , fabs , > , s , if , }

77 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , - , cosz , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

77 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , - , cosz , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

77 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { < , - , cosz , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

78 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { < , - , cosz , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

78 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { < , - , cosz , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

80 :	"if"
		- NEIGH  = { - , cosz , fabs , > , s , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { Cb , Q , Krho , + , * , - , cosz , s , / , log , t , }
		- PRED   = { < , - , cosz , && , no_cut , Q , ! , if , }
		- SUCC   = { cosphi , sinlam , Krho , * , x , xy , }

80 :	"fabs"
		- NEIGH  = { - , cosz , fabs , > , s , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { Cb , Q , Krho , + , * , - , cosz , s , / , log , t , }
		- PRED   = { < , - , cosz , && , no_cut , Q , ! , if , }
		- SUCC   = { cosphi , sinlam , Krho , * , x , xy , }

80 :	"s"
		- NEIGH  = { - , cosz , fabs , > , s , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { Cb , Q , Krho , + , * , - , cosz , s , / , log , t , }
		- PRED   = { < , - , cosz , && , no_cut , Q , ! , if , }
		- SUCC   = { cosphi , sinlam , Krho , * , x , xy , }

80 :	"-"
		- NEIGH  = { - , cosz , fabs , > , s , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { Cb , Q , Krho , + , * , - , cosz , s , / , log , t , }
		- PRED   = { < , - , cosz , && , no_cut , Q , ! , if , }
		- SUCC   = { cosphi , sinlam , Krho , * , x , xy , }

80 :	"cosz"
		- NEIGH  = { - , cosz , fabs , > , s , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { Cb , Q , Krho , + , * , - , cosz , s , / , log , t , }
		- PRED   = { < , - , cosz , && , no_cut , Q , ! , if , }
		- SUCC   = { cosphi , sinlam , Krho , * , x , xy , }

80 :	">"
		- NEIGH  = { - , cosz , fabs , > , s , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { Cb , Q , Krho , + , * , - , cosz , s , / , log , t , }
		- PRED   = { < , - , cosz , && , no_cut , Q , ! , if , }
		- SUCC   = { cosphi , sinlam , Krho , * , x , xy , }

81 :	"t"
		- NEIGH  = { + , * , cosz , t , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , s , t , / , log , - , Krho , }

81 :	"*"
		- NEIGH  = { + , * , cosz , t , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , s , t , / , log , - , Krho , }

81 :	"+"
		- NEIGH  = { + , * , cosz , t , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , s , t , / , log , - , Krho , }

81 :	"cosz"
		- NEIGH  = { + , * , cosz , t , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , s , t , / , log , - , Krho , }

82 :	"Krho"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"-"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"log"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"t"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"/"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"s"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"-"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"Q"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"Cb"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"/"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

82 :	"t"
		- NEIGH  = { Cb , Q , s , t , / , log , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { + , * , cosz , t , }
		- SUCC   = { }

84 :	"Krho"
		- NEIGH  = { Cb , Q , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

84 :	"-"
		- NEIGH  = { Cb , Q , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

84 :	"Q"
		- NEIGH  = { Cb , Q , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

84 :	"Cb"
		- NEIGH  = { Cb , Q , - , Krho , }
		- PARENT = { - , cosz , fabs , > , s , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

85 :	"xy"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

85 :	"x"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

85 :	"Krho"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

85 :	"*"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

85 :	"cosphi"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

85 :	"*"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

85 :	"sinlam"
		- NEIGH  = { cosphi , sinlam , Krho , * , x , xy , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { - , cosz , fabs , > , s , if , }
		- SUCC   = { == , mode , OBLIQ , Q , if , }

86 :	"if"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PRED   = { cosphi , sinlam , Krho , * , x , xy , }
		- SUCC   = { break , }

86 :	"Q"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PRED   = { cosphi , sinlam , Krho , * , x , xy , }
		- SUCC   = { break , }

86 :	"mode"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PRED   = { cosphi , sinlam , Krho , * , x , xy , }
		- SUCC   = { break , }

86 :	"=="
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PRED   = { cosphi , sinlam , Krho , * , x , xy , }
		- SUCC   = { break , }

86 :	"OBLIQ"
		- NEIGH  = { == , mode , OBLIQ , Q , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PRED   = { cosphi , sinlam , Krho , * , x , xy , }
		- SUCC   = { break , }

87 :	"xy"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"y"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"Krho"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"Q"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"cosph0"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"sinphi"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

87 :	"-"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"Q"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"sinph0"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"cosphi"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"*"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

88 :	"coslam"
		- NEIGH  = { cosphi , sinph0 , - , sinphi , cosph0 , Q , Krho , * , y , coslam , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"xy"
		- NEIGH  = { sinphi , Krho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"y"
		- NEIGH  = { sinphi , Krho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"Krho"
		- NEIGH  = { sinphi , Krho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"*"
		- NEIGH  = { sinphi , Krho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

90 :	"sinphi"
		- NEIGH  = { sinphi , Krho , * , y , xy , }
		- PARENT = { == , mode , OBLIQ , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

91 :	"break"
		- NEIGH  = { break , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { == , mode , OBLIQ , Q , if , }
		- SUCC   = { S_POLE , }

92 :	"S_POLE"
		- NEIGH  = { S_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { N_POLE , }

93 :	"N_POLE"
		- NEIGH  = { N_POLE , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { S_POLE , }
		- SUCC   = { - , Q , lp , p_halfpi , fabs , phi , }

94 :	"lp"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"phi"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"fabs"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"Q"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"p_halfpi"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"-"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"lp"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

94 :	"phi"
		- NEIGH  = { - , Q , lp , p_halfpi , fabs , phi , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { }
		- PRED   = { N_POLE , }
		- SUCC   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }

95 :	"if"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"!"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"Q"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"no_cut"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"&&"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"lp"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"phi"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"-"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	">"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

95 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { xy , return , PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PRED   = { - , Q , lp , p_halfpi , fabs , phi , }
		- SUCC   = { > , *= , phi , lp , if , }

96 :	"proj_errno_set"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

96 :	"P"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

96 :	"PJD_ERR_TOLERANCE_CONDITION"
		- NEIGH  = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- PARENT = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { xy , return , }

97 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

97 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- CHILD  = { }
		- PRED   = { PJD_ERR_TOLERANCE_CONDITION , P , proj_errno_set , }
		- SUCC   = { }

99 :	"if"
		- NEIGH  = { > , *= , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { mode , sinlam , x , xy , Cb , coslam , Q , + , * , == , phi , Krho , / , N_POLE , cos , if , log , t , lp , y , - , tan , }
		- PRED   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- SUCC   = { }

99 :	"lp"
		- NEIGH  = { > , *= , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { mode , sinlam , x , xy , Cb , coslam , Q , + , * , == , phi , Krho , / , N_POLE , cos , if , log , t , lp , y , - , tan , }
		- PRED   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- SUCC   = { }

99 :	"phi"
		- NEIGH  = { > , *= , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { mode , sinlam , x , xy , Cb , coslam , Q , + , * , == , phi , Krho , / , N_POLE , cos , if , log , t , lp , y , - , tan , }
		- PRED   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- SUCC   = { }

99 :	"*="
		- NEIGH  = { > , *= , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { mode , sinlam , x , xy , Cb , coslam , Q , + , * , == , phi , Krho , / , N_POLE , cos , if , log , t , lp , y , - , tan , }
		- PRED   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- SUCC   = { }

99 :	">"
		- NEIGH  = { > , *= , phi , lp , if , }
		- PARENT = { mode , Q , switch , }
		- CHILD  = { mode , sinlam , x , xy , Cb , coslam , Q , + , * , == , phi , Krho , / , N_POLE , cos , if , log , t , lp , y , - , tan , }
		- PRED   = { M_HALFPI , - , > , phi , lp , && , no_cut , Q , ! , if , }
		- SUCC   = { }

100 :	"t"
		- NEIGH  = { phi , lp , tan , t , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }

100 :	"tan"
		- NEIGH  = { phi , lp , tan , t , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }

100 :	"lp"
		- NEIGH  = { phi , lp , tan , t , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }

100 :	"phi"
		- NEIGH  = { phi , lp , tan , t , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }

101 :	"Krho"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"-"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"*"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"log"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"cos"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"lp"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"phi"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"/"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"t"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"+"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"t"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"*"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"Q"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

101 :	"Cb"
		- NEIGH  = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { phi , lp , tan , t , }
		- SUCC   = { sinlam , Krho , * , x , xy , }

102 :	"xy"
		- NEIGH  = { sinlam , Krho , * , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- SUCC   = { coslam , Krho , * , y , xy , }

102 :	"x"
		- NEIGH  = { sinlam , Krho , * , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- SUCC   = { coslam , Krho , * , y , xy , }

102 :	"Krho"
		- NEIGH  = { sinlam , Krho , * , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- SUCC   = { coslam , Krho , * , y , xy , }

102 :	"*"
		- NEIGH  = { sinlam , Krho , * , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- SUCC   = { coslam , Krho , * , y , xy , }

102 :	"sinlam"
		- NEIGH  = { sinlam , Krho , * , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { Cb , Q , + , lp , t , / , Krho , phi , cos , log , * , - , }
		- SUCC   = { coslam , Krho , * , y , xy , }

103 :	"xy"
		- NEIGH  = { coslam , Krho , * , y , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { sinlam , Krho , * , x , xy , }
		- SUCC   = { == , mode , N_POLE , Q , if , }

103 :	"y"
		- NEIGH  = { coslam , Krho , * , y , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { sinlam , Krho , * , x , xy , }
		- SUCC   = { == , mode , N_POLE , Q , if , }

103 :	"Krho"
		- NEIGH  = { coslam , Krho , * , y , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { sinlam , Krho , * , x , xy , }
		- SUCC   = { == , mode , N_POLE , Q , if , }

103 :	"*"
		- NEIGH  = { coslam , Krho , * , y , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { sinlam , Krho , * , x , xy , }
		- SUCC   = { == , mode , N_POLE , Q , if , }

103 :	"coslam"
		- NEIGH  = { coslam , Krho , * , y , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { sinlam , Krho , * , x , xy , }
		- SUCC   = { == , mode , N_POLE , Q , if , }

104 :	"if"
		- NEIGH  = { == , mode , N_POLE , Q , if , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { - , y , xy , }
		- PRED   = { coslam , Krho , * , y , xy , }
		- SUCC   = { }

104 :	"Q"
		- NEIGH  = { == , mode , N_POLE , Q , if , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { - , y , xy , }
		- PRED   = { coslam , Krho , * , y , xy , }
		- SUCC   = { }

104 :	"mode"
		- NEIGH  = { == , mode , N_POLE , Q , if , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { - , y , xy , }
		- PRED   = { coslam , Krho , * , y , xy , }
		- SUCC   = { }

104 :	"=="
		- NEIGH  = { == , mode , N_POLE , Q , if , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { - , y , xy , }
		- PRED   = { coslam , Krho , * , y , xy , }
		- SUCC   = { }

104 :	"N_POLE"
		- NEIGH  = { == , mode , N_POLE , Q , if , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { - , y , xy , }
		- PRED   = { coslam , Krho , * , y , xy , }
		- SUCC   = { }

105 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { == , mode , N_POLE , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

105 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { == , mode , N_POLE , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

105 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { == , mode , N_POLE , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

105 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { == , mode , N_POLE , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

105 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { == , mode , N_POLE , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"xy"
		- NEIGH  = { y , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"x"
		- NEIGH  = { y , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"xy"
		- NEIGH  = { y , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"y"
		- NEIGH  = { y , x , xy , }
		- PARENT = { > , *= , phi , lp , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

109 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

109 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mode , Q , switch , }
		- SUCC   = { }

115 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"airy"
		- NEIGH  = { airy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"beta"
		- NEIGH  = { beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }

118 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"Q"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"static_cast"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"<"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"*"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	">"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"pj_calloc"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

118 :	"pj_opaque"
		- NEIGH  = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { beta , }
		- SUCC   = { Q , == , if , }

119 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

119 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

119 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { ENOMEM , P , pj_default_destructor , return , }
		- PRED   = { pj_calloc , > , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

120 :	"return"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"pj_default_destructor"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"P"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

120 :	"ENOMEM"
		- NEIGH  = { ENOMEM , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { i , params , Q , ctx , pj_param , P , no_cut , }

122 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { i , params , Q , ctx , pj_param , P , no_cut , }

122 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { i , params , Q , ctx , pj_param , P , no_cut , }

124 :	"Q"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"no_cut"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"pj_param"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"P"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"ctx"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"P"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"params"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

124 :	"i"
		- NEIGH  = { i , params , Q , ctx , pj_param , P , no_cut , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }

125 :	"beta"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"*"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"M_HALFPI"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"-"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"pj_param"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"P"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"ctx"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"P"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"params"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

125 :	"f"
		- NEIGH  = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , Q , ctx , pj_param , P , no_cut , }
		- SUCC   = { < , fabs , beta , if , }

126 :	"if"
		- NEIGH  = { < , fabs , beta , if , }
		- PARENT = { }
		- CHILD  = { * , *= , beta , - , tan , Cb , cos , log , / , Q , }
		- PRED   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , P , fabs , }

126 :	"fabs"
		- NEIGH  = { < , fabs , beta , if , }
		- PARENT = { }
		- CHILD  = { * , *= , beta , - , tan , Cb , cos , log , / , Q , }
		- PRED   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , P , fabs , }

126 :	"beta"
		- NEIGH  = { < , fabs , beta , if , }
		- PARENT = { }
		- CHILD  = { * , *= , beta , - , tan , Cb , cos , log , / , Q , }
		- PRED   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , P , fabs , }

126 :	"<"
		- NEIGH  = { < , fabs , beta , if , }
		- PARENT = { }
		- CHILD  = { * , *= , beta , - , tan , Cb , cos , log , / , Q , }
		- PRED   = { f , ctx , P , params , - , M_HALFPI , pj_param , * , beta , }
		- SUCC   = { < , M_HALFPI , - , if , phi0 , P , fabs , }

127 :	"Q"
		- NEIGH  = { - , Cb , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

127 :	"Cb"
		- NEIGH  = { - , Cb , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

127 :	"-"
		- NEIGH  = { - , Cb , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

129 :	"Q"
		- NEIGH  = { beta , tan , Cb , / , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { beta , * , *= , Cb , cos , log , Q , }

129 :	"Cb"
		- NEIGH  = { beta , tan , Cb , / , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { beta , * , *= , Cb , cos , log , Q , }

129 :	"/"
		- NEIGH  = { beta , tan , Cb , / , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { beta , * , *= , Cb , cos , log , Q , }

129 :	"tan"
		- NEIGH  = { beta , tan , Cb , / , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { beta , * , *= , Cb , cos , log , Q , }

129 :	"beta"
		- NEIGH  = { beta , tan , Cb , / , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { beta , * , *= , Cb , cos , log , Q , }

130 :	"Q"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"Cb"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"*="
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"Q"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"Cb"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"*"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"log"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"cos"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

130 :	"beta"
		- NEIGH  = { beta , * , *= , Cb , cos , log , Q , }
		- PARENT = { < , fabs , beta , if , }
		- CHILD  = { }
		- PRED   = { beta , tan , Cb , / , Q , }
		- SUCC   = { }

133 :	"if"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"fabs"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"fabs"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"P"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"phi0"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"-"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"M_HALFPI"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

133 :	"<"
		- NEIGH  = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- PARENT = { }
		- CHILD  = { < , phi0 , P , if , }
		- PRED   = { < , fabs , beta , if , }
		- SUCC   = { phi0 , P , < , fabs , if , }

134 :	"if"
		- NEIGH  = { < , phi0 , P , if , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { N_POLE , - , S_POLE , mode , M_HALFPI , p_halfpi , Q , }
		- PRED   = { }
		- SUCC   = { }

134 :	"P"
		- NEIGH  = { < , phi0 , P , if , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { N_POLE , - , S_POLE , mode , M_HALFPI , p_halfpi , Q , }
		- PRED   = { }
		- SUCC   = { }

134 :	"phi0"
		- NEIGH  = { < , phi0 , P , if , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { N_POLE , - , S_POLE , mode , M_HALFPI , p_halfpi , Q , }
		- PRED   = { }
		- SUCC   = { }

134 :	"<"
		- NEIGH  = { < , phi0 , P , if , }
		- PARENT = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- CHILD  = { N_POLE , - , S_POLE , mode , M_HALFPI , p_halfpi , Q , }
		- PRED   = { }
		- SUCC   = { }

135 :	"Q"
		- NEIGH  = { - , M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { S_POLE , mode , Q , }

135 :	"p_halfpi"
		- NEIGH  = { - , M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { S_POLE , mode , Q , }

135 :	"-"
		- NEIGH  = { - , M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { S_POLE , mode , Q , }

135 :	"M_HALFPI"
		- NEIGH  = { - , M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { S_POLE , mode , Q , }

136 :	"Q"
		- NEIGH  = { S_POLE , mode , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { - , M_HALFPI , p_halfpi , Q , }
		- SUCC   = { }

136 :	"mode"
		- NEIGH  = { S_POLE , mode , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { - , M_HALFPI , p_halfpi , Q , }
		- SUCC   = { }

136 :	"S_POLE"
		- NEIGH  = { S_POLE , mode , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { - , M_HALFPI , p_halfpi , Q , }
		- SUCC   = { }

138 :	"Q"
		- NEIGH  = { M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mode , N_POLE , Q , }

138 :	"p_halfpi"
		- NEIGH  = { M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mode , N_POLE , Q , }

138 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , p_halfpi , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { mode , N_POLE , Q , }

139 :	"Q"
		- NEIGH  = { mode , N_POLE , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , p_halfpi , Q , }
		- SUCC   = { }

139 :	"mode"
		- NEIGH  = { mode , N_POLE , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , p_halfpi , Q , }
		- SUCC   = { }

139 :	"N_POLE"
		- NEIGH  = { mode , N_POLE , Q , }
		- PARENT = { < , phi0 , P , if , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , p_halfpi , Q , }
		- SUCC   = { }

142 :	"if"
		- NEIGH  = { phi0 , P , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , phi0 , sinph0 , EQUIT , sin , mode , cosph0 , P , OBLIQ , Q , }
		- PRED   = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { s_forward , fwd , P , }

142 :	"fabs"
		- NEIGH  = { phi0 , P , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , phi0 , sinph0 , EQUIT , sin , mode , cosph0 , P , OBLIQ , Q , }
		- PRED   = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { s_forward , fwd , P , }

142 :	"P"
		- NEIGH  = { phi0 , P , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , phi0 , sinph0 , EQUIT , sin , mode , cosph0 , P , OBLIQ , Q , }
		- PRED   = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { s_forward , fwd , P , }

142 :	"phi0"
		- NEIGH  = { phi0 , P , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , phi0 , sinph0 , EQUIT , sin , mode , cosph0 , P , OBLIQ , Q , }
		- PRED   = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { s_forward , fwd , P , }

142 :	"<"
		- NEIGH  = { phi0 , P , < , fabs , if , }
		- PARENT = { }
		- CHILD  = { cos , phi0 , sinph0 , EQUIT , sin , mode , cosph0 , P , OBLIQ , Q , }
		- PRED   = { < , M_HALFPI , - , if , phi0 , P , fabs , }
		- SUCC   = { s_forward , fwd , P , }

143 :	"Q"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"mode"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"EQUIT"
		- NEIGH  = { EQUIT , mode , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

145 :	"Q"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , phi0 , sinph0 , P , Q , }

145 :	"mode"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , phi0 , sinph0 , P , Q , }

145 :	"OBLIQ"
		- NEIGH  = { mode , OBLIQ , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sin , phi0 , sinph0 , P , Q , }

146 :	"Q"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

146 :	"sinph0"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

146 :	"sin"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

146 :	"P"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

146 :	"phi0"
		- NEIGH  = { sin , phi0 , sinph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { mode , OBLIQ , Q , }
		- SUCC   = { phi0 , cos , cosph0 , P , Q , }

147 :	"Q"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

147 :	"cosph0"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

147 :	"cos"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

147 :	"P"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

147 :	"phi0"
		- NEIGH  = { phi0 , cos , cosph0 , P , Q , }
		- PARENT = { phi0 , P , < , fabs , if , }
		- CHILD  = { }
		- PRED   = { sin , phi0 , sinph0 , P , Q , }
		- SUCC   = { }

150 :	"P"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi0 , P , < , fabs , if , }
		- SUCC   = { es , P , }

150 :	"fwd"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi0 , P , < , fabs , if , }
		- SUCC   = { es , P , }

150 :	"s_forward"
		- NEIGH  = { s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { phi0 , P , < , fabs , if , }
		- SUCC   = { es , P , }

151 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_forward , fwd , P , }
		- SUCC   = { P , return , }

151 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { s_forward , fwd , P , }
		- SUCC   = { P , return , }

152 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

152 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

