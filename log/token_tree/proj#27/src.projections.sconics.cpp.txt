9 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

10 :	"EULER"
		- NEIGH  = { EULER , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

11 :	"MURD1"
		- NEIGH  = { MURD1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

12 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

13 :	"MURD3"
		- NEIGH  = { MURD3 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

14 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

15 :	"TISSOT"
		- NEIGH  = { TISSOT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

16 :	"VITK1"
		- NEIGH  = { VITK1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

21 :	"pj_opaque"
		- NEIGH  = { pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

22 :	"n"
		- NEIGH  = { n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

23 :	"rho_c"
		- NEIGH  = { rho_c , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

24 :	"rho_0"
		- NEIGH  = { rho_0 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

25 :	"sig"
		- NEIGH  = { sig , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"c1"
		- NEIGH  = { c1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

26 :	"c2"
		- NEIGH  = { c2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

27 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

27 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

36 :	"euler"
		- NEIGH  = { euler , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

37 :	"murd1"
		- NEIGH  = { murd1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

38 :	"murd2"
		- NEIGH  = { murd2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

39 :	"murd3"
		- NEIGH  = { murd3 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

40 :	"pconic"
		- NEIGH  = { pconic , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

41 :	"tissot"
		- NEIGH  = { tissot , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"PROJ_HEAD"
		- NEIGH  = { PROJ_HEAD , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

42 :	"vitk1"
		- NEIGH  = { vitk1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"phi12"
		- NEIGH  = { phi12 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

47 :	"del"
		- NEIGH  = { del , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

48 :	"p1"
		- NEIGH  = { p2 , p1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

48 :	"p2"
		- NEIGH  = { p2 , p1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

49 :	"err"
		- NEIGH  = { err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p2 , p1 , }
		- SUCC   = { i , params , ctx , pj_param , P , ! , if , }

51 :	"if"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"!"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"pj_param"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"P"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"ctx"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"P"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"params"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

51 :	"i"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { }
		- CHILD  = { ctx , ! , if , pj_param , err , P , _ , i , params , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , proj_log_error , }
		- PRED   = { err , }
		- SUCC   = { err , return , }

53 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }

53 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }

53 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }

54 :	"err"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

54 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

56 :	"if"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"!"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"pj_param"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"P"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"ctx"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"P"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"params"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

56 :	"i"
		- NEIGH  = { i , params , ctx , pj_param , P , ! , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { fabs , opaque , params , pj_param , pj_opaque , < , * , f , static_cast , + , || , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , - , > , del , P , p2 , ctx , p1 , err , if , _ , sig , proj_log_error , }
		- PRED   = { }
		- SUCC   = { }

58 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }

58 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }

58 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }

59 :	"err"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

59 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

63 :	"p1"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

63 :	"pj_param"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

63 :	"P"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

63 :	"ctx"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

63 :	"P"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

63 :	"params"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

63 :	"f"
		- NEIGH  = { f , params , ctx , pj_param , P , p1 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , ctx , P , pj_param , params , p2 , }

64 :	"p2"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

64 :	"pj_param"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

64 :	"P"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

64 :	"ctx"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

64 :	"P"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

64 :	"params"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

64 :	"f"
		- NEIGH  = { f , ctx , P , pj_param , params , p2 , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , params , ctx , pj_param , P , p1 , }
		- SUCC   = { p1 , - , p2 , del , * , }

65 :	"*"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { p1 , + , p2 , * , sig , }

65 :	"del"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { p1 , + , p2 , * , sig , }

65 :	"*"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { p1 , + , p2 , * , sig , }

65 :	"p2"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { p1 , + , p2 , * , sig , }

65 :	"-"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { p1 , + , p2 , * , sig , }

65 :	"p1"
		- NEIGH  = { p1 , - , p2 , del , * , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { f , ctx , P , pj_param , params , p2 , }
		- SUCC   = { p1 , + , p2 , * , sig , }

66 :	"sig"
		- NEIGH  = { p1 , + , p2 , * , sig , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }

66 :	"*"
		- NEIGH  = { p1 , + , p2 , * , sig , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }

66 :	"p2"
		- NEIGH  = { p1 , + , p2 , * , sig , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }

66 :	"+"
		- NEIGH  = { p1 , + , p2 , * , sig , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }

66 :	"p1"
		- NEIGH  = { p1 , + , p2 , * , sig , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , - , p2 , del , * , }
		- SUCC   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }

67 :	"static_cast"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"<"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"pj_opaque"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"*"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	">"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"P"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"opaque"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"sig"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

67 :	"sig"
		- NEIGH  = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { p1 , + , p2 , * , sig , }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }

68 :	"err"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"fabs"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"*"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"del"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"<"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"||"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"fabs"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"sig"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"<"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

68 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { }
		- PRED   = { sig , opaque , P , > , < , * , pj_opaque , static_cast , }
		- SUCC   = { err , if , }

69 :	"if"
		- NEIGH  = { err , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { _ , P , proj_log_error , }
		- PRED   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- SUCC   = { }

69 :	"err"
		- NEIGH  = { err , if , }
		- PARENT = { i , params , ctx , pj_param , P , ! , if , }
		- CHILD  = { _ , P , proj_log_error , }
		- PRED   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , del , < , fabs , * , sig , || , err , }
		- SUCC   = { }

71 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

71 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

74 :	"return"
		- NEIGH  = { err , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , pj_param , P , ! , if , }
		- SUCC   = { }

74 :	"err"
		- NEIGH  = { err , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { i , params , ctx , pj_param , P , ! , if , }
		- SUCC   = { }

78 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"sconics_s_forward"
		- NEIGH  = { sconics_s_forward , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"lp"
		- NEIGH  = { lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

78 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

79 :	"PJ_XY"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

79 :	"xy"
		- NEIGH  = { xy , PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

80 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

80 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { xy , PJ_XY , }
		- SUCC   = { rho , }

81 :	"rho"
		- NEIGH  = { rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { type , Q , switch , }

83 :	"switch"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { c1 , * , c2 , PCONIC , phi , lp , sig , break , - , tan , + , MURD2 , Q , rho , rho_c , }
		- PRED   = { rho , }
		- SUCC   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }

83 :	"Q"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { c1 , * , c2 , PCONIC , phi , lp , sig , break , - , tan , + , MURD2 , Q , rho , rho_c , }
		- PRED   = { rho , }
		- SUCC   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }

83 :	"type"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { c1 , * , c2 , PCONIC , phi , lp , sig , break , - , tan , + , MURD2 , Q , rho , rho_c , }
		- PRED   = { rho , }
		- SUCC   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }

84 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }

85 :	"rho"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"Q"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"rho_c"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"+"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"tan"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"Q"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"sig"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"-"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"lp"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

85 :	"phi"
		- NEIGH  = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

86 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , sig , rho , rho_c , + , Q , - , tan , }
		- SUCC   = { PCONIC , }

87 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }

88 :	"rho"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"Q"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"c2"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"*"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"Q"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"c1"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"-"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"tan"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"lp"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"phi"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"-"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"Q"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

88 :	"sig"
		- NEIGH  = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

89 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , phi , lp , tan , - , * , c1 , c2 , Q , rho , }
		- SUCC   = { }

91 :	"rho"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

91 :	"Q"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

91 :	"rho_c"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

91 :	"-"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

91 :	"lp"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

91 :	"phi"
		- NEIGH  = { phi , lp , - , rho , rho_c , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

92 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi , lp , - , rho , rho_c , Q , }
		- SUCC   = { }

95 :	"xy"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"x"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"rho"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"*"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"sin"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"lp"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"lam"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"*="
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"Q"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

95 :	"n"
		- NEIGH  = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }

96 :	"xy"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"y"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"Q"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"rho_0"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"-"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"rho"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"*"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"cos"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"lp"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

96 :	"lam"
		- NEIGH  = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , n , lp , sin , lam , rho , *= , * , x , xy , }
		- SUCC   = { xy , return , }

97 :	"return"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- SUCC   = { }

97 :	"xy"
		- NEIGH  = { xy , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , cos , - , lam , rho , rho_0 , Q , * , y , xy , }
		- SUCC   = { }

101 :	"PJ_LP"
		- NEIGH  = { PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"sconics_s_inverse"
		- NEIGH  = { sconics_s_inverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"PJ_XY"
		- NEIGH  = { PJ_XY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"xy"
		- NEIGH  = { xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

102 :	"PJ_LP"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

102 :	"lp"
		- NEIGH  = { lp , PJ_LP , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }

103 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"Q"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"static_cast"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"<"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"pj_opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"*"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	">"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"P"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

103 :	"opaque"
		- NEIGH  = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lp , PJ_LP , }
		- SUCC   = { rho , }

104 :	"rho"
		- NEIGH  = { rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { P , > , < , opaque , Q , static_cast , * , pj_opaque , }
		- SUCC   = { - , rho_0 , Q , y , xy , }

106 :	"xy"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

106 :	"y"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

106 :	"Q"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

106 :	"rho_0"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

106 :	"-"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

106 :	"xy"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

106 :	"y"
		- NEIGH  = { - , rho_0 , Q , y , xy , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { rho , }
		- SUCC   = { y , x , xy , hypot , rho , }

107 :	"rho"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , rho_0 , Q , y , xy , }
		- SUCC   = { < , n , Q , if , }

107 :	"hypot"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , rho_0 , Q , y , xy , }
		- SUCC   = { < , n , Q , if , }

107 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , rho_0 , Q , y , xy , }
		- SUCC   = { < , n , Q , if , }

107 :	"x"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , rho_0 , Q , y , xy , }
		- SUCC   = { < , n , Q , if , }

107 :	"xy"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , rho_0 , Q , y , xy , }
		- SUCC   = { < , n , Q , if , }

107 :	"y"
		- NEIGH  = { y , x , xy , hypot , rho , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { - , rho_0 , Q , y , xy , }
		- SUCC   = { < , n , Q , if , }

108 :	"if"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

108 :	"Q"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

108 :	"n"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

108 :	"<"
		- NEIGH  = { < , n , Q , if , }
		- PARENT = { }
		- CHILD  = { y , x , xy , - , rho , }
		- PRED   = { y , x , xy , hypot , rho , }
		- SUCC   = { Q , / , y , x , xy , lam , atan2 , n , lp , }

109 :	"rho"
		- NEIGH  = { - , rho , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

109 :	"-"
		- NEIGH  = { - , rho , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

109 :	"rho"
		- NEIGH  = { - , rho , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { - , x , xy , }

110 :	"xy"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

110 :	"x"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

110 :	"-"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

110 :	"xy"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

110 :	"x"
		- NEIGH  = { - , x , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , rho , }
		- SUCC   = { - , y , xy , }

111 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

111 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

111 :	"-"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

111 :	"xy"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

111 :	"y"
		- NEIGH  = { - , y , xy , }
		- PARENT = { < , n , Q , if , }
		- CHILD  = { }
		- PRED   = { - , x , xy , }
		- SUCC   = { }

114 :	"lp"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"lam"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"atan2"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"xy"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"x"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"xy"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"y"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"/"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"Q"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

114 :	"n"
		- NEIGH  = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { < , n , Q , if , }
		- SUCC   = { type , Q , switch , }

116 :	"switch"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { break , sig , c2 , rho_c , rho , - , + , c1 , / , phi , atan , lp , MURD2 , Q , PCONIC , }
		- PRED   = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- SUCC   = { lp , return , }

116 :	"Q"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { break , sig , c2 , rho_c , rho , - , + , c1 , / , phi , atan , lp , MURD2 , Q , PCONIC , }
		- PRED   = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- SUCC   = { lp , return , }

116 :	"type"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { break , sig , c2 , rho_c , rho , - , + , c1 , / , phi , atan , lp , MURD2 , Q , PCONIC , }
		- PRED   = { Q , / , y , x , xy , lam , atan2 , n , lp , }
		- SUCC   = { lp , return , }

117 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }

118 :	"lp"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"phi"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"atan"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"Q"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"c1"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"-"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"rho"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"/"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"Q"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"c2"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"+"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"Q"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

118 :	"sig"
		- NEIGH  = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { break , }

119 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , c2 , rho , - , + , c1 , Q , lp , atan , / , phi , }
		- SUCC   = { MURD2 , }

120 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { rho_c , rho , Q , - , sig , phi , atan , lp , }

121 :	"lp"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"phi"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"Q"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"sig"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"-"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"atan"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"rho"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"-"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"Q"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

121 :	"rho_c"
		- NEIGH  = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { break , }

122 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { rho_c , rho , Q , - , sig , phi , atan , lp , }
		- SUCC   = { }

124 :	"lp"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

124 :	"phi"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

124 :	"Q"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

124 :	"rho_c"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

124 :	"-"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

124 :	"rho"
		- NEIGH  = { rho , rho_c , Q , - , phi , lp , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

126 :	"return"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { }

126 :	"lp"
		- NEIGH  = { lp , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { }

130 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"setup"
		- NEIGH  = { setup , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"P"
		- NEIGH  = { P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"Type"
		- NEIGH  = { Type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

131 :	"del"
		- NEIGH  = { cs , del , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

131 :	"cs"
		- NEIGH  = { cs , del , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , }

132 :	"err"
		- NEIGH  = { err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cs , del , }
		- SUCC   = { > , calloc , < , Q , static_cast , * , pj_opaque , }

133 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"*"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"Q"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"static_cast"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"<"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"*"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	">"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"calloc"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

133 :	"pj_opaque"
		- NEIGH  = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , }
		- SUCC   = { Q , == , if , }

134 :	"if"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

134 :	"=="
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

134 :	"Q"
		- NEIGH  = { Q , == , if , }
		- PARENT = { }
		- CHILD  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PRED   = { > , calloc , < , Q , static_cast , * , pj_opaque , }
		- SUCC   = { opaque , Q , P , }

135 :	"return"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"pj_default_destructor"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"P"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"PROJ_ERR_OTHER"
		- NEIGH  = { PROJ_ERR_OTHER , P , pj_default_destructor , return , }
		- PARENT = { Q , == , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"P"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { type , Q , }

136 :	"opaque"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { type , Q , }

136 :	"Q"
		- NEIGH  = { opaque , Q , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Q , == , if , }
		- SUCC   = { type , Q , }

137 :	"Q"
		- NEIGH  = { type , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { del , P , & , phi12 , err , }

137 :	"type"
		- NEIGH  = { type , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { del , P , & , phi12 , err , }

137 :	"type"
		- NEIGH  = { type , Q , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { opaque , Q , P , }
		- SUCC   = { del , P , & , phi12 , err , }

139 :	"err"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

139 :	"phi12"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

139 :	"P"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

139 :	"&"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

139 :	"del"
		- NEIGH  = { del , P , & , phi12 , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , }
		- SUCC   = { err , if , }

140 :	"if"
		- NEIGH  = { err , if , }
		- PARENT = { }
		- CHILD  = { err , P , pj_default_destructor , return , }
		- PRED   = { del , P , & , phi12 , err , }
		- SUCC   = { type , Q , switch , }

140 :	"err"
		- NEIGH  = { err , if , }
		- PARENT = { }
		- CHILD  = { err , P , pj_default_destructor , return , }
		- PRED   = { del , P , & , phi12 , err , }
		- SUCC   = { type , Q , switch , }

141 :	"return"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"pj_default_destructor"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"P"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

141 :	"err"
		- NEIGH  = { err , P , pj_default_destructor , return , }
		- PARENT = { err , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

143 :	"switch"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { VITK1 , >= , fabs , if , c1 , c2 , PCONIC , MURD3 , break , phi0 , tan , TISSOT , P , Q , - , *= , * , sqrt , + , rho_c , del , sig , / , MURD1 , cs , EULER , cos , M_HALFPI , rho_0 , sin , n , MURD2 , }
		- PRED   = { err , if , }
		- SUCC   = { sconics_s_inverse , inv , P , }

143 :	"Q"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { VITK1 , >= , fabs , if , c1 , c2 , PCONIC , MURD3 , break , phi0 , tan , TISSOT , P , Q , - , *= , * , sqrt , + , rho_c , del , sig , / , MURD1 , cs , EULER , cos , M_HALFPI , rho_0 , sin , n , MURD2 , }
		- PRED   = { err , if , }
		- SUCC   = { sconics_s_inverse , inv , P , }

143 :	"type"
		- NEIGH  = { type , Q , switch , }
		- PARENT = { }
		- CHILD  = { VITK1 , >= , fabs , if , c1 , c2 , PCONIC , MURD3 , break , phi0 , tan , TISSOT , P , Q , - , *= , * , sqrt , + , rho_c , del , sig , / , MURD1 , cs , EULER , cos , M_HALFPI , rho_0 , sin , n , MURD2 , }
		- PRED   = { err , if , }
		- SUCC   = { sconics_s_inverse , inv , P , }

145 :	"TISSOT"
		- NEIGH  = { TISSOT , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sig , sin , n , Q , }

146 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

146 :	"n"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

146 :	"sin"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

146 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

146 :	"sig"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { TISSOT , }
		- SUCC   = { del , cos , cs , }

147 :	"cs"
		- NEIGH  = { del , cos , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { + , cs , n , rho_c , / , Q , }

147 :	"cos"
		- NEIGH  = { del , cos , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { + , cs , n , rho_c , / , Q , }

147 :	"del"
		- NEIGH  = { del , cos , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { + , cs , n , rho_c , / , Q , }

148 :	"Q"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"rho_c"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"Q"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"n"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"/"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"cs"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"+"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"cs"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"/"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"Q"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

148 :	"n"
		- NEIGH  = { + , cs , n , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , cs , }
		- SUCC   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }

149 :	"Q"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"rho_0"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"sqrt"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"Q"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"rho_c"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"-"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"*"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"sin"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"P"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"phi0"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"/"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"Q"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

149 :	"n"
		- NEIGH  = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , cs , n , rho_c , / , Q , }
		- SUCC   = { break , }

150 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { n , / , phi0 , sin , * , - , P , rho_0 , rho_c , sqrt , Q , }
		- SUCC   = { MURD1 , }

152 :	"MURD1"
		- NEIGH  = { MURD1 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { + , sig , tan , * , del , sin , rho_c , / , Q , }

153 :	"Q"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"rho_c"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"sin"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"del"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"/"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"del"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"*"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"tan"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"Q"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"sig"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"+"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"Q"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

153 :	"sig"
		- NEIGH  = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD1 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

154 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

154 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

154 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

154 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

154 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

154 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

154 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , del , sin , rho_c , / , Q , }
		- SUCC   = { sig , sin , n , Q , }

155 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

155 :	"n"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

155 :	"sin"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

155 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

155 :	"sig"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

156 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { MURD2 , }

158 :	"MURD2"
		- NEIGH  = { MURD2 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }

159 :	"Q"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"rho_c"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"cs"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"sqrt"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"cos"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"del"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"/"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"tan"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"Q"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

159 :	"sig"
		- NEIGH  = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD2 , }
		- SUCC   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }

160 :	"Q"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"rho_0"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"Q"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"rho_c"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"+"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"tan"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"Q"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"sig"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"-"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"P"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

160 :	"phi0"
		- NEIGH  = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , del , / , cos , cs , Q , sqrt , rho_c , }
		- SUCC   = { * , sig , cs , sin , n , Q , }

161 :	"Q"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

161 :	"n"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

161 :	"sin"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

161 :	"Q"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

161 :	"sig"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

161 :	"*"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

161 :	"cs"
		- NEIGH  = { * , sig , cs , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , - , tan , P , rho_c , rho_0 , phi0 , + , Q , }
		- SUCC   = { break , }

162 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { * , sig , cs , sin , n , Q , }
		- SUCC   = { MURD3 , }

164 :	"MURD3"
		- NEIGH  = { MURD3 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { + , * , sig , tan , del , rho_c , / , Q , }

165 :	"Q"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"rho_c"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"del"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"/"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"tan"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"Q"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"sig"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"*"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"tan"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"del"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"+"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"Q"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

165 :	"sig"
		- NEIGH  = { + , * , sig , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { MURD3 , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

166 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

166 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

166 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

166 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

166 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

166 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

166 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , * , sig , tan , del , rho_c , / , Q , }
		- SUCC   = { / , tan , del , * , sig , sin , n , Q , }

167 :	"Q"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"n"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"sin"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"Q"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"sig"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"*"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"sin"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"*"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"tan"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"/"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"*"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

167 :	"del"
		- NEIGH  = { / , tan , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { break , }

168 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , tan , del , * , sig , sin , n , Q , }
		- SUCC   = { EULER , }

170 :	"EULER"
		- NEIGH  = { EULER , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { / , del , * , sig , sin , n , Q , }

171 :	"Q"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"n"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"sin"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"Q"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"sig"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"*"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"sin"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"del"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"/"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

171 :	"del"
		- NEIGH  = { / , del , * , sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { EULER , }
		- SUCC   = { *= , del , }

172 :	"del"
		- NEIGH  = { *= , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , del , * , sig , sin , n , Q , }
		- SUCC   = { + , sig , * , tan , del , rho_c , / , Q , }

172 :	"*="
		- NEIGH  = { *= , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { / , del , * , sig , sin , n , Q , }
		- SUCC   = { + , sig , * , tan , del , rho_c , / , Q , }

173 :	"Q"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"rho_c"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"del"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"/"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"tan"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"del"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"*"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"tan"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"Q"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"sig"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"+"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"Q"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

173 :	"sig"
		- NEIGH  = { + , sig , * , tan , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { *= , del , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

174 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

174 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

174 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

174 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

174 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

174 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

174 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , * , tan , del , rho_c , / , Q , }
		- SUCC   = { break , }

175 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { PCONIC , }

177 :	"PCONIC"
		- NEIGH  = { PCONIC , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { sig , sin , n , Q , }

178 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

178 :	"n"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

178 :	"sin"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

178 :	"Q"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

178 :	"sig"
		- NEIGH  = { sig , sin , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { PCONIC , }
		- SUCC   = { del , cos , c2 , Q , }

179 :	"Q"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

179 :	"c2"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

179 :	"cos"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

179 :	"del"
		- NEIGH  = { del , cos , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , sin , n , Q , }
		- SUCC   = { sig , tan , / , c1 , Q , }

180 :	"Q"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { sig , - , phi0 , Q , P , del , }

180 :	"c1"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { sig , - , phi0 , Q , P , del , }

180 :	"/"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { sig , - , phi0 , Q , P , del , }

180 :	"tan"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { sig , - , phi0 , Q , P , del , }

180 :	"Q"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { sig , - , phi0 , Q , P , del , }

180 :	"sig"
		- NEIGH  = { sig , tan , / , c1 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , cos , c2 , Q , }
		- SUCC   = { sig , - , phi0 , Q , P , del , }

181 :	"del"
		- NEIGH  = { sig , - , phi0 , Q , P , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { M_HALFPI , >= , - , fabs , del , if , }

181 :	"P"
		- NEIGH  = { sig , - , phi0 , Q , P , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { M_HALFPI , >= , - , fabs , del , if , }

181 :	"phi0"
		- NEIGH  = { sig , - , phi0 , Q , P , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { M_HALFPI , >= , - , fabs , del , if , }

181 :	"-"
		- NEIGH  = { sig , - , phi0 , Q , P , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { M_HALFPI , >= , - , fabs , del , if , }

181 :	"Q"
		- NEIGH  = { sig , - , phi0 , Q , P , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { M_HALFPI , >= , - , fabs , del , if , }

181 :	"sig"
		- NEIGH  = { sig , - , phi0 , Q , P , del , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { sig , tan , / , c1 , Q , }
		- SUCC   = { M_HALFPI , >= , - , fabs , del , if , }

182 :	"if"
		- NEIGH  = { M_HALFPI , >= , - , fabs , del , if , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { P , _ , pj_default_destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { sig , - , phi0 , Q , P , del , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

182 :	"fabs"
		- NEIGH  = { M_HALFPI , >= , - , fabs , del , if , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { P , _ , pj_default_destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { sig , - , phi0 , Q , P , del , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

182 :	"del"
		- NEIGH  = { M_HALFPI , >= , - , fabs , del , if , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { P , _ , pj_default_destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { sig , - , phi0 , Q , P , del , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

182 :	"-"
		- NEIGH  = { M_HALFPI , >= , - , fabs , del , if , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { P , _ , pj_default_destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { sig , - , phi0 , Q , P , del , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

182 :	">="
		- NEIGH  = { M_HALFPI , >= , - , fabs , del , if , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { P , _ , pj_default_destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { sig , - , phi0 , Q , P , del , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

182 :	"M_HALFPI"
		- NEIGH  = { M_HALFPI , >= , - , fabs , del , if , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { P , _ , pj_default_destructor , PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , return , proj_log_error , }
		- PRED   = { sig , - , phi0 , Q , P , del , }
		- SUCC   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }

184 :	"proj_log_error"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }

184 :	"P"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }

184 :	"_"
		- NEIGH  = { _ , P , proj_log_error , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }

185 :	"return"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

185 :	"pj_default_destructor"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

185 :	"P"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

185 :	"PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE"
		- NEIGH  = { PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE , P , pj_default_destructor , return , }
		- PARENT = { M_HALFPI , >= , - , fabs , del , if , }
		- CHILD  = { }
		- PRED   = { _ , P , proj_log_error , }
		- SUCC   = { }

187 :	"Q"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"rho_0"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"Q"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"c2"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"*"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"Q"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"c1"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"-"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"tan"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

187 :	"del"
		- NEIGH  = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { M_HALFPI , >= , - , fabs , del , if , }
		- SUCC   = { break , }

188 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , - , * , rho_0 , c1 , c2 , Q , }
		- SUCC   = { VITK1 , }

190 :	"VITK1"
		- NEIGH  = { VITK1 , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { break , }
		- SUCC   = { del , tan , cs , }

191 :	"cs"
		- NEIGH  = { del , tan , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { del , / , sig , cs , sin , * , n , Q , }

191 :	"tan"
		- NEIGH  = { del , tan , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { del , / , sig , cs , sin , * , n , Q , }

191 :	"del"
		- NEIGH  = { del , tan , cs , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { VITK1 , }
		- SUCC   = { del , / , sig , cs , sin , * , n , Q , }

192 :	"Q"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"n"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"cs"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"*"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"sin"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"Q"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"sig"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"/"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

192 :	"del"
		- NEIGH  = { del , / , sig , cs , sin , * , n , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , tan , cs , }
		- SUCC   = { + , sig , tan , * , cs , del , rho_c , / , Q , }

193 :	"Q"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"rho_c"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"del"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"/"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"cs"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"*"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"tan"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"Q"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"sig"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"+"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"Q"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

193 :	"sig"
		- NEIGH  = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { del , / , sig , cs , sin , * , n , Q , }
		- SUCC   = { phi0 , - , rho_c , rho_0 , P , Q , }

194 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

194 :	"rho_0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

194 :	"Q"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

194 :	"rho_c"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

194 :	"-"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

194 :	"P"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

194 :	"phi0"
		- NEIGH  = { phi0 , - , rho_c , rho_0 , P , Q , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { + , sig , tan , * , cs , del , rho_c , / , Q , }
		- SUCC   = { break , }

195 :	"break"
		- NEIGH  = { break , }
		- PARENT = { type , Q , switch , }
		- CHILD  = { }
		- PRED   = { phi0 , - , rho_c , rho_0 , P , Q , }
		- SUCC   = { }

198 :	"P"
		- NEIGH  = { sconics_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { sconics_s_forward , fwd , P , }

198 :	"inv"
		- NEIGH  = { sconics_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { sconics_s_forward , fwd , P , }

198 :	"sconics_s_inverse"
		- NEIGH  = { sconics_s_inverse , inv , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , Q , switch , }
		- SUCC   = { sconics_s_forward , fwd , P , }

199 :	"P"
		- NEIGH  = { sconics_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_inverse , inv , P , }
		- SUCC   = { es , P , }

199 :	"fwd"
		- NEIGH  = { sconics_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_inverse , inv , P , }
		- SUCC   = { es , P , }

199 :	"sconics_s_forward"
		- NEIGH  = { sconics_s_forward , fwd , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_inverse , inv , P , }
		- SUCC   = { es , P , }

200 :	"P"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_forward , fwd , P , }
		- SUCC   = { P , return , }

200 :	"es"
		- NEIGH  = { es , P , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { sconics_s_forward , fwd , P , }
		- SUCC   = { P , return , }

201 :	"return"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

201 :	"P"
		- NEIGH  = { P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { es , P , }
		- SUCC   = { }

205 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"euler"
		- NEIGH  = { euler , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"return"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"setup"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"P"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"EULER"
		- NEIGH  = { setup , EULER , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"tissot"
		- NEIGH  = { tissot , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"return"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"setup"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"P"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

211 :	"TISSOT"
		- NEIGH  = { TISSOT , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

215 :	"murd1"
		- NEIGH  = { murd1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"return"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"setup"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"P"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

216 :	"MURD1"
		- NEIGH  = { MURD1 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

220 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

220 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

220 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

220 :	"murd2"
		- NEIGH  = { murd2 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

221 :	"return"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

221 :	"setup"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

221 :	"P"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

221 :	"MURD2"
		- NEIGH  = { MURD2 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

225 :	"murd3"
		- NEIGH  = { murd3 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"return"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"setup"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"P"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

226 :	"MURD3"
		- NEIGH  = { MURD3 , setup , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"pconic"
		- NEIGH  = { pconic , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"return"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"setup"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"P"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"PCONIC"
		- NEIGH  = { setup , PCONIC , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"PJ"
		- NEIGH  = { PJ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"*"
		- NEIGH  = { * , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"PROJECTION"
		- NEIGH  = { PROJECTION , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"vitk1"
		- NEIGH  = { vitk1 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

236 :	"return"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

236 :	"setup"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

236 :	"P"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

236 :	"VITK1"
		- NEIGH  = { setup , VITK1 , P , return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

